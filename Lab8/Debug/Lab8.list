
Lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086d4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025e1c  080088d8  080088d8  000188d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e6f4  0802e6f4  000401d8  2**0
                  CONTENTS
  4 .ARM          00000008  0802e6f4  0802e6f4  0003e6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e6fc  0802e6fc  000401d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e6fc  0802e6fc  0003e6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e700  0802e700  0003e700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0802e704  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001d8  0802e8dc  000401d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  0802e8dc  00040480  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000401d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040206  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b73  00000000  00000000  00040249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000345c  00000000  00000000  00053dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00057218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e45  00000000  00000000  00058490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a163  00000000  00000000  000592d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b35  00000000  00000000  00083438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc151  00000000  00000000  0009bf6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b1c  00000000  00000000  001980c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0019dbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	080088bc 	.word	0x080088bc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	080088bc 	.word	0x080088bc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <MX_GPIO_Init+0xe8>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a33      	ldr	r2, [pc, #204]	; (80006d4 <MX_GPIO_Init+0xe8>)
 8000608:	f043 0310 	orr.w	r3, r3, #16
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b31      	ldr	r3, [pc, #196]	; (80006d4 <MX_GPIO_Init+0xe8>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0310 	and.w	r3, r3, #16
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <MX_GPIO_Init+0xe8>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a2d      	ldr	r2, [pc, #180]	; (80006d4 <MX_GPIO_Init+0xe8>)
 8000620:	f043 0320 	orr.w	r3, r3, #32
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_GPIO_Init+0xe8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0320 	and.w	r3, r3, #32
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_GPIO_Init+0xe8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <MX_GPIO_Init+0xe8>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <MX_GPIO_Init+0xe8>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_GPIO_Init+0xe8>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <MX_GPIO_Init+0xe8>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_GPIO_Init+0xe8>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2168      	movs	r1, #104	; 0x68
 8000666:	481c      	ldr	r0, [pc, #112]	; (80006d8 <MX_GPIO_Init+0xec>)
 8000668:	f002 fc5a 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000672:	481a      	ldr	r0, [pc, #104]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000674:	f002 fc54 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000678:	2314      	movs	r3, #20
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4813      	ldr	r0, [pc, #76]	; (80006d8 <MX_GPIO_Init+0xec>)
 800068c:	f002 fa84 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000690:	2368      	movs	r3, #104	; 0x68
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	480c      	ldr	r0, [pc, #48]	; (80006d8 <MX_GPIO_Init+0xec>)
 80006a8:	f002 fa76 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80006ac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_GPIO_Init+0xf0>)
 80006c6:	f002 fa67 	bl	8002b98 <HAL_GPIO_Init>

}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40020800 	.word	0x40020800

080006e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_I2C1_Init+0x74>)
 80006e6:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <MX_I2C1_Init+0x78>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_I2C1_Init+0x74>)
 80006ec:	4a1b      	ldr	r2, [pc, #108]	; (800075c <MX_I2C1_Init+0x7c>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_I2C1_Init+0x74>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_I2C1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071a:	480e      	ldr	r0, [pc, #56]	; (8000754 <MX_I2C1_Init+0x74>)
 800071c:	f002 fc1a 	bl	8002f54 <HAL_I2C_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000726:	f000 fd23 	bl	8001170 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072a:	2100      	movs	r1, #0
 800072c:	4809      	ldr	r0, [pc, #36]	; (8000754 <MX_I2C1_Init+0x74>)
 800072e:	f003 f8f7 	bl	8003920 <HAL_I2CEx_ConfigAnalogFilter>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000738:	f000 fd1a 	bl	8001170 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800073c:	2100      	movs	r1, #0
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_I2C1_Init+0x74>)
 8000740:	f003 f939 	bl	80039b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800074a:	f000 fd11 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200001f4 	.word	0x200001f4
 8000758:	40005400 	.word	0x40005400
 800075c:	00c0eaff 	.word	0x00c0eaff

08000760 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b0ae      	sub	sp, #184	; 0xb8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2290      	movs	r2, #144	; 0x90
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f006 f82a 	bl	80067da <memset>
  if(i2cHandle->Instance==I2C1)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a22      	ldr	r2, [pc, #136]	; (8000814 <HAL_I2C_MspInit+0xb4>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d13c      	bne.n	800080a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000790:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000794:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000796:	2300      	movs	r3, #0
 8000798:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 fe06 	bl	80043b0 <HAL_RCCEx_PeriphCLKConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007aa:	f000 fce1 	bl	8001170 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <HAL_I2C_MspInit+0xb8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a19      	ldr	r2, [pc, #100]	; (8000818 <HAL_I2C_MspInit+0xb8>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_I2C_MspInit+0xb8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ce:	2312      	movs	r3, #18
 80007d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007e0:	2304      	movs	r3, #4
 80007e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007ea:	4619      	mov	r1, r3
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <HAL_I2C_MspInit+0xbc>)
 80007ee:	f002 f9d3 	bl	8002b98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <HAL_I2C_MspInit+0xb8>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <HAL_I2C_MspInit+0xb8>)
 80007f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_I2C_MspInit+0xb8>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800080a:	bf00      	nop
 800080c:	37b8      	adds	r7, #184	; 0xb8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40005400 	.word	0x40005400
 8000818:	40023800 	.word	0x40023800
 800081c:	40020400 	.word	0x40020400

08000820 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000824:	f3bf 8f4f 	dsb	sy
}
 8000828:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800082a:	f3bf 8f6f 	isb	sy
}
 800082e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <SCB_EnableICache+0x48>)
 8000832:	2200      	movs	r2, #0
 8000834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000838:	f3bf 8f4f 	dsb	sy
}
 800083c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800083e:	f3bf 8f6f 	isb	sy
}
 8000842:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <SCB_EnableICache+0x48>)
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	4a07      	ldr	r2, [pc, #28]	; (8000868 <SCB_EnableICache+0x48>)
 800084a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000850:	f3bf 8f4f 	dsb	sy
}
 8000854:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000856:	f3bf 8f6f 	isb	sy
}
 800085a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <SCB_EnableDCache+0x84>)
 8000874:	2200      	movs	r2, #0
 8000876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800087a:	f3bf 8f4f 	dsb	sy
}
 800087e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <SCB_EnableDCache+0x84>)
 8000882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000886:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	0b5b      	lsrs	r3, r3, #13
 800088c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000890:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	08db      	lsrs	r3, r3, #3
 8000896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800089a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	015a      	lsls	r2, r3, #5
 80008a0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008a4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008aa:	4911      	ldr	r1, [pc, #68]	; (80008f0 <SCB_EnableDCache+0x84>)
 80008ac:	4313      	orrs	r3, r2
 80008ae:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1e5a      	subs	r2, r3, #1
 80008b6:	60ba      	str	r2, [r7, #8]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1ef      	bne.n	800089c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	60fa      	str	r2, [r7, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1e5      	bne.n	8000892 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80008c6:	f3bf 8f4f 	dsb	sy
}
 80008ca:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <SCB_EnableDCache+0x84>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <SCB_EnableDCache+0x84>)
 80008d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008d8:	f3bf 8f4f 	dsb	sy
}
 80008dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008de:	f3bf 8f6f 	isb	sy
}
 80008e2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <RGB565>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint16_t RGB565(uint16_t R, uint16_t G, uint16_t B) {
 80008f4:	b480      	push	{r7}
 80008f6:	b08b      	sub	sp, #44	; 0x2c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	81fb      	strh	r3, [r7, #14]
 80008fe:	460b      	mov	r3, r1
 8000900:	81bb      	strh	r3, [r7, #12]
 8000902:	4613      	mov	r3, r2
 8000904:	817b      	strh	r3, [r7, #10]

		float Rr = (R * 255)/(float)100;
 8000906:	89fa      	ldrh	r2, [r7, #14]
 8000908:	4613      	mov	r3, r2
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	1a9b      	subs	r3, r3, r2
 800090e:	ee07 3a90 	vmov	s15, r3
 8000912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000916:	eddf 6a42 	vldr	s13, [pc, #264]	; 8000a20 <RGB565+0x12c>
 800091a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800091e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float Gg = (G * 255)/(float)100;
 8000922:	89ba      	ldrh	r2, [r7, #12]
 8000924:	4613      	mov	r3, r2
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	1a9b      	subs	r3, r3, r2
 800092a:	ee07 3a90 	vmov	s15, r3
 800092e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000932:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8000a20 <RGB565+0x12c>
 8000936:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800093a:	edc7 7a08 	vstr	s15, [r7, #32]
		float Bb = (B * 255)/(float)100;
 800093e:	897a      	ldrh	r2, [r7, #10]
 8000940:	4613      	mov	r3, r2
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	1a9b      	subs	r3, r3, r2
 8000946:	ee07 3a90 	vmov	s15, r3
 800094a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800094e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8000a20 <RGB565+0x12c>
 8000952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000956:	edc7 7a07 	vstr	s15, [r7, #28]

		// ปรับค่าสี R, G, B ให้อยู่ในช่วง 0-255
		    uint8_t R8 = (uint8_t)(Rr + 0.5);  // �?าร�?ปลงค่าทศนิยมเป็นจำนวนเต็ม
 800095a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800095e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000962:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000966:	ee37 7b06 	vadd.f64	d7, d7, d6
 800096a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800096e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000972:	793b      	ldrb	r3, [r7, #4]
 8000974:	76fb      	strb	r3, [r7, #27]
		    uint8_t G8 = (uint8_t)(Gg + 0.5);
 8000976:	edd7 7a08 	vldr	s15, [r7, #32]
 800097a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800097e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000982:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000986:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800098a:	edc7 7a01 	vstr	s15, [r7, #4]
 800098e:	793b      	ldrb	r3, [r7, #4]
 8000990:	76bb      	strb	r3, [r7, #26]
		    uint8_t B8 = (uint8_t)(Bb + 0.5);
 8000992:	edd7 7a07 	vldr	s15, [r7, #28]
 8000996:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800099a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800099e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80009aa:	793b      	ldrb	r3, [r7, #4]
 80009ac:	767b      	strb	r3, [r7, #25]

		    // ทำ�?ารลดขนาดค่าสี R, G, B เข้าให้เป็นช่วง 0-31
		    uint8_t R5 = (R8 * 31) / 255;
 80009ae:	7efa      	ldrb	r2, [r7, #27]
 80009b0:	4613      	mov	r3, r2
 80009b2:	015b      	lsls	r3, r3, #5
 80009b4:	1a9b      	subs	r3, r3, r2
 80009b6:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <RGB565+0x130>)
 80009b8:	fb82 1203 	smull	r1, r2, r2, r3
 80009bc:	441a      	add	r2, r3
 80009be:	11d2      	asrs	r2, r2, #7
 80009c0:	17db      	asrs	r3, r3, #31
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	763b      	strb	r3, [r7, #24]
		    uint8_t G6 = (G8 * 63) / 255;
 80009c6:	7eba      	ldrb	r2, [r7, #26]
 80009c8:	4613      	mov	r3, r2
 80009ca:	019b      	lsls	r3, r3, #6
 80009cc:	1a9b      	subs	r3, r3, r2
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <RGB565+0x130>)
 80009d0:	fb82 1203 	smull	r1, r2, r2, r3
 80009d4:	441a      	add	r2, r3
 80009d6:	11d2      	asrs	r2, r2, #7
 80009d8:	17db      	asrs	r3, r3, #31
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	75fb      	strb	r3, [r7, #23]
		    uint8_t B5 = (B8 * 31) / 255;
 80009de:	7e7a      	ldrb	r2, [r7, #25]
 80009e0:	4613      	mov	r3, r2
 80009e2:	015b      	lsls	r3, r3, #5
 80009e4:	1a9b      	subs	r3, r3, r2
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <RGB565+0x130>)
 80009e8:	fb82 1203 	smull	r1, r2, r2, r3
 80009ec:	441a      	add	r2, r3
 80009ee:	11d2      	asrs	r2, r2, #7
 80009f0:	17db      	asrs	r3, r3, #31
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	75bb      	strb	r3, [r7, #22]


		    // คำนวณค่า RGB565
		    uint16_t RGB565 = ((R5 << 11) | (G6 << 5) | B5);
 80009f6:	7e3b      	ldrb	r3, [r7, #24]
 80009f8:	02db      	lsls	r3, r3, #11
 80009fa:	b21a      	sxth	r2, r3
 80009fc:	7dfb      	ldrb	r3, [r7, #23]
 80009fe:	015b      	lsls	r3, r3, #5
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	7dbb      	ldrb	r3, [r7, #22]
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	82bb      	strh	r3, [r7, #20]


		    return RGB565;
 8000a10:	8abb      	ldrh	r3, [r7, #20]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	372c      	adds	r7, #44	; 0x2c
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	42c80000 	.word	0x42c80000
 8000a24:	80808081 	.word	0x80808081

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0


  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000a2e:	f7ff fef7 	bl	8000820 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000a32:	f7ff ff1b 	bl	800086c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a36:	f001 ff0d 	bl	8002854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3a:	f000 f87f 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3e:	f7ff fdd5 	bl	80005ec <MX_GPIO_Init>
  MX_RNG_Init();
 8000a42:	f000 fb99 	bl	8001178 <MX_RNG_Init>
  MX_SPI5_Init();
 8000a46:	f000 fbdf 	bl	8001208 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000a4a:	f000 fd95 	bl	8001578 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000a4e:	f7ff fe47 	bl	80006e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8000a52:	f001 fac3 	bl	8001fdc <ILI9341_Init>
  HAL_TIM_Base_Start_IT (&htim1);
 8000a56:	4833      	ldr	r0, [pc, #204]	; (8000b24 <main+0xfc>)
 8000a58:	f004 fcf6 	bl	8005448 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ILI9341_Fill_Screen(WHITE);
 8000a5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a60:	f001 fc68 	bl	8002334 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f001 fa5b 	bl	8001f20 <ILI9341_Set_Rotation>


  cmdBuffer[0] = 0x03;
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <main+0x100>)
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	701a      	strb	r2, [r3, #0]
  cmdBuffer[1] = 0x00;
 8000a70:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <main+0x100>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	705a      	strb	r2, [r3, #1]
  cmdBuffer[2] = 0x04;
 8000a76:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <main+0x100>)
 8000a78:	2204      	movs	r2, #4
 8000a7a:	709a      	strb	r2, [r3, #2]


  ex1();
 8000a7c:	f000 f98c 	bl	8000d98 <ex1>
	  //---------------------------------------------------------- Ex 01


	  //ex1();

	 if (state == 0){
 8000a80:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <main+0x104>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <main+0x66>
		 ex1();
 8000a88:	f000 f986 	bl	8000d98 <ex1>
 8000a8c:	e7f8      	b.n	8000a80 <main+0x58>
		// HAL_Delay(1000);
	 }
	 else if (state == 1){
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <main+0x104>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d1f4      	bne.n	8000a80 <main+0x58>

		 if(ch2 == 0){
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <main+0x108>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d107      	bne.n	8000aae <main+0x86>
			 ex2();
 8000a9e:	f000 fb27 	bl	80010f0 <ex2>
			 ch2+=1;
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <main+0x108>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <main+0x108>)
 8000aac:	701a      	strb	r2, [r3, #0]
		 }
	if((count - timestart) > 5000 ){
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <main+0x10c>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <main+0x110>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d906      	bls.n	8000ace <main+0xa6>

		 state = 0;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <main+0x104>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
		ILI9341_Fill_Screen(WHITE);
 8000ac6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000aca:	f001 fc33 	bl	8002334 <ILI9341_Fill_Screen>
	}
	 if(TP_Touchpad_Pressed()){
 8000ace:	f001 feb1 	bl	8002834 <TP_Touchpad_Pressed>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0d3      	beq.n	8000a80 <main+0x58>

		uint16_t x_pos1 = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	80fb      	strh	r3, [r7, #6]
		uint16_t y_pos1 = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	80bb      	strh	r3, [r7, #4]

		//HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);

		uint16_t position_array[2];

		if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fde4 	bl	80026b0 <TP_Read_Coordinates>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d1c8      	bne.n	8000a80 <main+0x58>
		{
		x_pos1 = position_array[0];
 8000aee:	883b      	ldrh	r3, [r7, #0]
 8000af0:	80fb      	strh	r3, [r7, #6]
		y_pos1 = position_array[1];
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	80bb      	strh	r3, [r7, #4]
//		 ILI9341_Draw_Text(str,135 , 180 , BLACK, 2, WHITE);
//		 str = "";
//		 sprintf(str,"%d", y_pos1);
//		 ILI9341_Draw_Text(str,135 , 200 , BLACK, 2, WHITE);

				if(x_pos1 > 115 && x_pos1 < 200){
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	2b73      	cmp	r3, #115	; 0x73
 8000afa:	d9c1      	bls.n	8000a80 <main+0x58>
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	2bc7      	cmp	r3, #199	; 0xc7
 8000b00:	d8be      	bhi.n	8000a80 <main+0x58>
					if(y_pos1 > 40 && y_pos1< 76){
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	2b28      	cmp	r3, #40	; 0x28
 8000b06:	d9bb      	bls.n	8000a80 <main+0x58>
 8000b08:	88bb      	ldrh	r3, [r7, #4]
 8000b0a:	2b4b      	cmp	r3, #75	; 0x4b
 8000b0c:	d8b8      	bhi.n	8000a80 <main+0x58>

					state = 0;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <main+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
					ch2 = 0;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <main+0x108>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
					ILI9341_Fill_Screen(WHITE);
 8000b1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b1e:	f001 fc09 	bl	8002334 <ILI9341_Fill_Screen>
	 if (state == 0){
 8000b22:	e7ad      	b.n	8000a80 <main+0x58>
 8000b24:	200002e4 	.word	0x200002e4
 8000b28:	2000025c 	.word	0x2000025c
 8000b2c:	2000025b 	.word	0x2000025b
 8000b30:	2000025a 	.word	0x2000025a
 8000b34:	20000248 	.word	0x20000248
 8000b38:	20000268 	.word	0x20000268

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b094      	sub	sp, #80	; 0x50
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	2234      	movs	r2, #52	; 0x34
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f005 fe45 	bl	80067da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <SystemClock_Config+0xd4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a2a      	ldr	r2, [pc, #168]	; (8000c10 <SystemClock_Config+0xd4>)
 8000b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <SystemClock_Config+0xd4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <SystemClock_Config+0xd8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a25      	ldr	r2, [pc, #148]	; (8000c14 <SystemClock_Config+0xd8>)
 8000b7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <SystemClock_Config+0xd8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b94:	2301      	movs	r3, #1
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000ba8:	23c8      	movs	r3, #200	; 0xc8
 8000baa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000bb0:	2309      	movs	r3, #9
 8000bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f002 ff97 	bl	8003af0 <HAL_RCC_OscConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000bc8:	f000 fad2 	bl	8001170 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bcc:	f002 ff40 	bl	8003a50 <HAL_PWREx_EnableOverDrive>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bd6:	f000 facb 	bl	8001170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bda:	230f      	movs	r3, #15
 8000bdc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bde:	2302      	movs	r3, #2
 8000be0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000be6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	2106      	movs	r1, #6
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 fa27 	bl	800404c <HAL_RCC_ClockConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c04:	f000 fab4 	bl	8001170 <Error_Handler>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3750      	adds	r7, #80	; 0x50
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40007000 	.word	0x40007000

08000c18 <CRC16_2>:

/* USER CODE BEGIN 4 */

uint16_t CRC16_2(uint8_t *ptr, uint8_t lenght){
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xffff;
 8000c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c28:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	737b      	strb	r3, [r7, #13]

	while (lenght--){
 8000c2e:	e023      	b.n	8000c78 <CRC16_2+0x60>
		crc ^= *ptr++;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
 8000c3c:	4053      	eors	r3, r2
 8000c3e:	81fb      	strh	r3, [r7, #14]

		for (s = 0 ; s <8 ;s++){
 8000c40:	2300      	movs	r3, #0
 8000c42:	737b      	strb	r3, [r7, #13]
 8000c44:	e015      	b.n	8000c72 <CRC16_2+0x5a>
			if ((crc & 0x01) != 0){
 8000c46:	89fb      	ldrh	r3, [r7, #14]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d00a      	beq.n	8000c66 <CRC16_2+0x4e>
				crc >>= 1;
 8000c50:	89fb      	ldrh	r3, [r7, #14]
 8000c52:	085b      	lsrs	r3, r3, #1
 8000c54:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8000c56:	89fb      	ldrh	r3, [r7, #14]
 8000c58:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000c5c:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000c60:	43db      	mvns	r3, r3
 8000c62:	81fb      	strh	r3, [r7, #14]
 8000c64:	e002      	b.n	8000c6c <CRC16_2+0x54>

			}
			else{
				crc >>= 1;
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	085b      	lsrs	r3, r3, #1
 8000c6a:	81fb      	strh	r3, [r7, #14]
		for (s = 0 ; s <8 ;s++){
 8000c6c:	7b7b      	ldrb	r3, [r7, #13]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	737b      	strb	r3, [r7, #13]
 8000c72:	7b7b      	ldrb	r3, [r7, #13]
 8000c74:	2b07      	cmp	r3, #7
 8000c76:	d9e6      	bls.n	8000c46 <CRC16_2+0x2e>
	while (lenght--){
 8000c78:	78fb      	ldrb	r3, [r7, #3]
 8000c7a:	1e5a      	subs	r2, r3, #1
 8000c7c:	70fa      	strb	r2, [r7, #3]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1d6      	bne.n	8000c30 <CRC16_2+0x18>
			}
		}
	}
	return crc;
 8000c82:	89fb      	ldrh	r3, [r7, #14]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <updateSensor>:

void updateSensor(){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af02      	add	r7, sp, #8
			HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1 , cmdBuffer, 3, 200);
 8000c96:	23c8      	movs	r3, #200	; 0xc8
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	4a39      	ldr	r2, [pc, #228]	; (8000d84 <updateSensor+0xf4>)
 8000c9e:	21b8      	movs	r1, #184	; 0xb8
 8000ca0:	4839      	ldr	r0, [pc, #228]	; (8000d88 <updateSensor+0xf8>)
 8000ca2:	f002 f9e7 	bl	8003074 <HAL_I2C_Master_Transmit>
		  	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1 , cmdBuffer, 3, 200);
 8000ca6:	23c8      	movs	r3, #200	; 0xc8
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2303      	movs	r3, #3
 8000cac:	4a35      	ldr	r2, [pc, #212]	; (8000d84 <updateSensor+0xf4>)
 8000cae:	21b8      	movs	r1, #184	; 0xb8
 8000cb0:	4835      	ldr	r0, [pc, #212]	; (8000d88 <updateSensor+0xf8>)
 8000cb2:	f002 f9df 	bl	8003074 <HAL_I2C_Master_Transmit>
		  	HAL_Delay(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f001 fe38 	bl	800292c <HAL_Delay>
		  	// receive sensor data
		  	HAL_I2C_Master_Receive(&hi2c1, 0x5c << 1 , dataBuffer , 8, 200);
 8000cbc:	23c8      	movs	r3, #200	; 0xc8
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	4a32      	ldr	r2, [pc, #200]	; (8000d8c <updateSensor+0xfc>)
 8000cc4:	21b8      	movs	r1, #184	; 0xb8
 8000cc6:	4830      	ldr	r0, [pc, #192]	; (8000d88 <updateSensor+0xf8>)
 8000cc8:	f002 fac8 	bl	800325c <HAL_I2C_Master_Receive>
		  	uint16_t Rcrc = dataBuffer[7] << 8 ;
 8000ccc:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <updateSensor+0xfc>)
 8000cce:	79db      	ldrb	r3, [r3, #7]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	80fb      	strh	r3, [r7, #6]
		  	Rcrc += dataBuffer[6];
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <updateSensor+0xfc>)
 8000cd8:	799b      	ldrb	r3, [r3, #6]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	4413      	add	r3, r2
 8000ce0:	80fb      	strh	r3, [r7, #6]
		  	if (Rcrc == CRC16_2(dataBuffer,6)){
 8000ce2:	2106      	movs	r1, #6
 8000ce4:	4829      	ldr	r0, [pc, #164]	; (8000d8c <updateSensor+0xfc>)
 8000ce6:	f7ff ff97 	bl	8000c18 <CRC16_2>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d143      	bne.n	8000d7c <updateSensor+0xec>
		  		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8 ) + dataBuffer[5];
 8000cf4:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <updateSensor+0xfc>)
 8000cf6:	791b      	ldrb	r3, [r3, #4]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <updateSensor+0xfc>)
 8000d04:	795b      	ldrb	r3, [r3, #5]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	4413      	add	r3, r2
 8000d0a:	80bb      	strh	r3, [r7, #4]
		  		temp = temperature  / 10.0 ;
 8000d0c:	88bb      	ldrh	r3, [r7, #4]
 8000d0e:	ee07 3a90 	vmov	s15, r3
 8000d12:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d16:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000d1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <updateSensor+0x100>)
 8000d24:	edc3 7a00 	vstr	s15, [r3]
		  		temp = (((dataBuffer[4] & 0x80) >> 7 ) == 1)? (temp * (-1)) : temp ;
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <updateSensor+0xfc>)
 8000d2a:	791b      	ldrb	r3, [r3, #4]
 8000d2c:	09db      	lsrs	r3, r3, #7
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d105      	bne.n	8000d40 <updateSensor+0xb0>
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <updateSensor+0x100>)
 8000d36:	edd3 7a00 	vldr	s15, [r3]
 8000d3a:	eef1 7a67 	vneg.f32	s15, s15
 8000d3e:	e002      	b.n	8000d46 <updateSensor+0xb6>
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <updateSensor+0x100>)
 8000d42:	edd3 7a00 	vldr	s15, [r3]
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <updateSensor+0x100>)
 8000d48:	edc3 7a00 	vstr	s15, [r3]

		  		uint16_t humi = (dataBuffer[2] << 8) + dataBuffer[3] ;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <updateSensor+0xfc>)
 8000d4e:	789b      	ldrb	r3, [r3, #2]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <updateSensor+0xfc>)
 8000d58:	78db      	ldrb	r3, [r3, #3]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	807b      	strh	r3, [r7, #2]
		  		RH = humi / 10.0 ;
 8000d60:	887b      	ldrh	r3, [r7, #2]
 8000d62:	ee07 3a90 	vmov	s15, r3
 8000d66:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d6a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000d6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <updateSensor+0x104>)
 8000d78:	edc3 7a00 	vstr	s15, [r3]
		  	}
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000025c 	.word	0x2000025c
 8000d88:	200001f4 	.word	0x200001f4
 8000d8c:	20000260 	.word	0x20000260
 8000d90:	2000024c 	.word	0x2000024c
 8000d94:	20000250 	.word	0x20000250

08000d98 <ex1>:


void ex1(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af02      	add	r7, sp, #8
	updateSensor();
 8000d9e:	f7ff ff77 	bl	8000c90 <updateSensor>

		  unsigned short int color = RGB565(Red,Green,Blue);
 8000da2:	4baf      	ldr	r3, [pc, #700]	; (8001060 <ex1+0x2c8>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	4aaf      	ldr	r2, [pc, #700]	; (8001064 <ex1+0x2cc>)
 8000da8:	8811      	ldrh	r1, [r2, #0]
 8000daa:	4aaf      	ldr	r2, [pc, #700]	; (8001068 <ex1+0x2d0>)
 8000dac:	8812      	ldrh	r2, [r2, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fda0 	bl	80008f4 <RGB565>
 8000db4:	4603      	mov	r3, r0
 8000db6:	82fb      	strh	r3, [r7, #22]
		  char strcolor[]="";
 8000db8:	2300      	movs	r3, #0
 8000dba:	743b      	strb	r3, [r7, #16]

				    		    sprintf(strcolor,"%d",color);
 8000dbc:	8afa      	ldrh	r2, [r7, #22]
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	49aa      	ldr	r1, [pc, #680]	; (800106c <ex1+0x2d4>)
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f005 fca5 	bl	8006714 <siprintf>

				    		    ILI9341_Draw_Text(strcolor, 120, 60, BLACK, 2, WHITE);
 8000dca:	f107 0010 	add.w	r0, r7, #16
 8000dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	223c      	movs	r2, #60	; 0x3c
 8000ddc:	2178      	movs	r1, #120	; 0x78
 8000dde:	f000 fdef 	bl	80019c0 <ILI9341_Draw_Text>


		  	  	char s[] = "";
 8000de2:	2300      	movs	r3, #0
 8000de4:	733b      	strb	r3, [r7, #12]

		  	  	sprintf(s,"%.1f C",temp);
 8000de6:	4ba2      	ldr	r3, [pc, #648]	; (8001070 <ex1+0x2d8>)
 8000de8:	edd3 7a00 	vldr	s15, [r3]
 8000dec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000df0:	f107 000c 	add.w	r0, r7, #12
 8000df4:	ec53 2b17 	vmov	r2, r3, d7
 8000df8:	499e      	ldr	r1, [pc, #632]	; (8001074 <ex1+0x2dc>)
 8000dfa:	f005 fc8b 	bl	8006714 <siprintf>

		  	  	ILI9341_Draw_Text(s, 20, 30, BLACK, 2, WHITE);
 8000dfe:	f107 000c 	add.w	r0, r7, #12
 8000e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	2302      	movs	r3, #2
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	221e      	movs	r2, #30
 8000e10:	2114      	movs	r1, #20
 8000e12:	f000 fdd5 	bl	80019c0 <ILI9341_Draw_Text>

		  	  	ILI9341_Draw_Filled_Circle(135, 35, 27,color );
 8000e16:	8afb      	ldrh	r3, [r7, #22]
 8000e18:	221b      	movs	r2, #27
 8000e1a:	2123      	movs	r1, #35	; 0x23
 8000e1c:	2087      	movs	r0, #135	; 0x87
 8000e1e:	f000 fc4e 	bl	80016be <ILI9341_Draw_Filled_Circle>

		  	  sprintf(s,"%.1f %%RH",RH);
 8000e22:	4b95      	ldr	r3, [pc, #596]	; (8001078 <ex1+0x2e0>)
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e2c:	f107 000c 	add.w	r0, r7, #12
 8000e30:	ec53 2b17 	vmov	r2, r3, d7
 8000e34:	4991      	ldr	r1, [pc, #580]	; (800107c <ex1+0x2e4>)
 8000e36:	f005 fc6d 	bl	8006714 <siprintf>

		  	  	ILI9341_Draw_Text(s, 170, 30, BLACK, 2, WHITE);
 8000e3a:	f107 000c 	add.w	r0, r7, #12
 8000e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	2302      	movs	r3, #2
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	221e      	movs	r2, #30
 8000e4c:	21aa      	movs	r1, #170	; 0xaa
 8000e4e:	f000 fdb7 	bl	80019c0 <ILI9341_Draw_Text>



		  		ILI9341_Draw_Filled_Circle(60, 85, 20, RED);
 8000e52:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e56:	2214      	movs	r2, #20
 8000e58:	2155      	movs	r1, #85	; 0x55
 8000e5a:	203c      	movs	r0, #60	; 0x3c
 8000e5c:	f000 fc2f 	bl	80016be <ILI9341_Draw_Filled_Circle>

		  		ILI9341_Draw_Filled_Rectangle_Coord(90, 75, 190, 95, 0xFDD7);
 8000e60:	f64f 53d7 	movw	r3, #64983	; 0xfdd7
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	235f      	movs	r3, #95	; 0x5f
 8000e68:	22be      	movs	r2, #190	; 0xbe
 8000e6a:	214b      	movs	r1, #75	; 0x4b
 8000e6c:	205a      	movs	r0, #90	; 0x5a
 8000e6e:	f000 fcae 	bl	80017ce <ILI9341_Draw_Filled_Rectangle_Coord>

		  		ILI9341_Draw_Filled_Rectangle_Coord(90, 75, Red+90, 95, RED);
 8000e72:	4b7b      	ldr	r3, [pc, #492]	; (8001060 <ex1+0x2c8>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	335a      	adds	r3, #90	; 0x5a
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	235f      	movs	r3, #95	; 0x5f
 8000e82:	214b      	movs	r1, #75	; 0x4b
 8000e84:	205a      	movs	r0, #90	; 0x5a
 8000e86:	f000 fca2 	bl	80017ce <ILI9341_Draw_Filled_Rectangle_Coord>

		  		char str[] ="";
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	723b      	strb	r3, [r7, #8]
		  		sprintf(str,"%d %%",Red);
 8000e8e:	4b74      	ldr	r3, [pc, #464]	; (8001060 <ex1+0x2c8>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	4979      	ldr	r1, [pc, #484]	; (8001080 <ex1+0x2e8>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f005 fc3a 	bl	8006714 <siprintf>

		  		ILI9341_Draw_Text(str, 200, 75, BLACK, 2, WHITE);
 8000ea0:	f107 0008 	add.w	r0, r7, #8
 8000ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	2302      	movs	r3, #2
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	224b      	movs	r2, #75	; 0x4b
 8000eb2:	21c8      	movs	r1, #200	; 0xc8
 8000eb4:	f000 fd84 	bl	80019c0 <ILI9341_Draw_Text>

		  		////////////////

		  		ILI9341_Draw_Filled_Circle(60, 145, 20, GREEN);
 8000eb8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ebc:	2214      	movs	r2, #20
 8000ebe:	2191      	movs	r1, #145	; 0x91
 8000ec0:	203c      	movs	r0, #60	; 0x3c
 8000ec2:	f000 fbfc 	bl	80016be <ILI9341_Draw_Filled_Circle>


		  		ILI9341_Draw_Filled_Rectangle_Coord(90, 135, 190, 155, 0xCFF8);
 8000ec6:	f64c 73f8 	movw	r3, #53240	; 0xcff8
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	239b      	movs	r3, #155	; 0x9b
 8000ece:	22be      	movs	r2, #190	; 0xbe
 8000ed0:	2187      	movs	r1, #135	; 0x87
 8000ed2:	205a      	movs	r0, #90	; 0x5a
 8000ed4:	f000 fc7b 	bl	80017ce <ILI9341_Draw_Filled_Rectangle_Coord>

		  		ILI9341_Draw_Filled_Rectangle_Coord(90, 135, Green+90, 155, GREEN);
 8000ed8:	4b62      	ldr	r3, [pc, #392]	; (8001064 <ex1+0x2cc>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	335a      	adds	r3, #90	; 0x5a
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	239b      	movs	r3, #155	; 0x9b
 8000ee8:	2187      	movs	r1, #135	; 0x87
 8000eea:	205a      	movs	r0, #90	; 0x5a
 8000eec:	f000 fc6f 	bl	80017ce <ILI9341_Draw_Filled_Rectangle_Coord>



		  		sprintf(str,"%d %%",Green);
 8000ef0:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <ex1+0x2cc>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4961      	ldr	r1, [pc, #388]	; (8001080 <ex1+0x2e8>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 fc09 	bl	8006714 <siprintf>

		  		ILI9341_Draw_Text(str, 200, 135, BLACK, 2, WHITE);
 8000f02:	f107 0008 	add.w	r0, r7, #8
 8000f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2300      	movs	r3, #0
 8000f12:	2287      	movs	r2, #135	; 0x87
 8000f14:	21c8      	movs	r1, #200	; 0xc8
 8000f16:	f000 fd53 	bl	80019c0 <ILI9341_Draw_Text>

		  		//////


		  		ILI9341_Draw_Filled_Circle(60, 205, 20, BLUE);
 8000f1a:	231f      	movs	r3, #31
 8000f1c:	2214      	movs	r2, #20
 8000f1e:	21cd      	movs	r1, #205	; 0xcd
 8000f20:	203c      	movs	r0, #60	; 0x3c
 8000f22:	f000 fbcc 	bl	80016be <ILI9341_Draw_Filled_Circle>

		  		ILI9341_Draw_Filled_Rectangle_Coord(90, 195, 190, 215, 0xCE7F);
 8000f26:	f64c 637f 	movw	r3, #52863	; 0xce7f
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	23d7      	movs	r3, #215	; 0xd7
 8000f2e:	22be      	movs	r2, #190	; 0xbe
 8000f30:	21c3      	movs	r1, #195	; 0xc3
 8000f32:	205a      	movs	r0, #90	; 0x5a
 8000f34:	f000 fc4b 	bl	80017ce <ILI9341_Draw_Filled_Rectangle_Coord>

		  		ILI9341_Draw_Filled_Rectangle_Coord(90, 195, Blue+90, 215, BLUE);
 8000f38:	4b4b      	ldr	r3, [pc, #300]	; (8001068 <ex1+0x2d0>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	335a      	adds	r3, #90	; 0x5a
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	231f      	movs	r3, #31
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	23d7      	movs	r3, #215	; 0xd7
 8000f46:	21c3      	movs	r1, #195	; 0xc3
 8000f48:	205a      	movs	r0, #90	; 0x5a
 8000f4a:	f000 fc40 	bl	80017ce <ILI9341_Draw_Filled_Rectangle_Coord>

		  		sprintf(str,"%d %%",Blue);
 8000f4e:	4b46      	ldr	r3, [pc, #280]	; (8001068 <ex1+0x2d0>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	4949      	ldr	r1, [pc, #292]	; (8001080 <ex1+0x2e8>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f005 fbda 	bl	8006714 <siprintf>
		  		ILI9341_Draw_Text(str, 200, 195, BLACK, 2, WHITE);
 8000f60:	f107 0008 	add.w	r0, r7, #8
 8000f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	22c3      	movs	r2, #195	; 0xc3
 8000f72:	21c8      	movs	r1, #200	; 0xc8
 8000f74:	f000 fd24 	bl	80019c0 <ILI9341_Draw_Text>




		  		if(TP_Touchpad_Pressed()){
 8000f78:	f001 fc5c 	bl	8002834 <TP_Touchpad_Pressed>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 80af 	beq.w	80010e2 <ex1+0x34a>

					uint16_t x_pos = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	82bb      	strh	r3, [r7, #20]
					uint16_t y_pos = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	827b      	strh	r3, [r7, #18]

					//HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);

					uint16_t position_array[2];

					if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 fb8e 	bl	80026b0 <TP_Read_Coordinates>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	f040 80a3 	bne.w	80010e2 <ex1+0x34a>
					{
					x_pos = position_array[0];
 8000f9c:	88bb      	ldrh	r3, [r7, #4]
 8000f9e:	82bb      	strh	r3, [r7, #20]
					y_pos = position_array[1];
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	827b      	strh	r3, [r7, #18]



					if (x_pos > 200 && x_pos < 222) {
 8000fa4:	8abb      	ldrh	r3, [r7, #20]
 8000fa6:	2bc8      	cmp	r3, #200	; 0xc8
 8000fa8:	d912      	bls.n	8000fd0 <ex1+0x238>
 8000faa:	8abb      	ldrh	r3, [r7, #20]
 8000fac:	2bdd      	cmp	r3, #221	; 0xdd
 8000fae:	d80f      	bhi.n	8000fd0 <ex1+0x238>
						if (y_pos > 115 && y_pos < 157 ){
 8000fb0:	8a7b      	ldrh	r3, [r7, #18]
 8000fb2:	2b73      	cmp	r3, #115	; 0x73
 8000fb4:	d90c      	bls.n	8000fd0 <ex1+0x238>
 8000fb6:	8a7b      	ldrh	r3, [r7, #18]
 8000fb8:	2b9c      	cmp	r3, #156	; 0x9c
 8000fba:	d809      	bhi.n	8000fd0 <ex1+0x238>
							state = 1;
 8000fbc:	4b31      	ldr	r3, [pc, #196]	; (8001084 <ex1+0x2ec>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
							ch2 = 0;
 8000fc2:	4b31      	ldr	r3, [pc, #196]	; (8001088 <ex1+0x2f0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
							timestart = count;
 8000fc8:	4b30      	ldr	r3, [pc, #192]	; (800108c <ex1+0x2f4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a30      	ldr	r2, [pc, #192]	; (8001090 <ex1+0x2f8>)
 8000fce:	6013      	str	r3, [r2, #0]



					// RED

					if (x_pos > 135 && x_pos < 160) {
 8000fd0:	8abb      	ldrh	r3, [r7, #20]
 8000fd2:	2b87      	cmp	r3, #135	; 0x87
 8000fd4:	d920      	bls.n	8001018 <ex1+0x280>
 8000fd6:	8abb      	ldrh	r3, [r7, #20]
 8000fd8:	2b9f      	cmp	r3, #159	; 0x9f
 8000fda:	d81d      	bhi.n	8001018 <ex1+0x280>
						if (y_pos > 40 && y_pos < 70 ){
 8000fdc:	8a7b      	ldrh	r3, [r7, #18]
 8000fde:	2b28      	cmp	r3, #40	; 0x28
 8000fe0:	d97c      	bls.n	80010dc <ex1+0x344>
 8000fe2:	8a7b      	ldrh	r3, [r7, #18]
 8000fe4:	2b45      	cmp	r3, #69	; 0x45
 8000fe6:	d879      	bhi.n	80010dc <ex1+0x344>
							Red += 10;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <ex1+0x2c8>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	330a      	adds	r3, #10
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <ex1+0x2c8>)
 8000ff2:	801a      	strh	r2, [r3, #0]

							if (Red > 100){
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <ex1+0x2c8>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	2b64      	cmp	r3, #100	; 0x64
 8000ffa:	d96f      	bls.n	80010dc <ex1+0x344>
								Red = 0;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <ex1+0x2c8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	801a      	strh	r2, [r3, #0]
								ILI9341_Draw_Filled_Rectangle_Coord(90, 75, 300, 95, WHITE);
 8001002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	235f      	movs	r3, #95	; 0x5f
 800100a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800100e:	214b      	movs	r1, #75	; 0x4b
 8001010:	205a      	movs	r0, #90	; 0x5a
 8001012:	f000 fbdc 	bl	80017ce <ILI9341_Draw_Filled_Rectangle_Coord>
						if (y_pos > 40 && y_pos < 70 ){
 8001016:	e061      	b.n	80010dc <ex1+0x344>

							}
						}
					}

					else if (x_pos > 80 && x_pos < 100) {
 8001018:	8abb      	ldrh	r3, [r7, #20]
 800101a:	2b50      	cmp	r3, #80	; 0x50
 800101c:	d93a      	bls.n	8001094 <ex1+0x2fc>
 800101e:	8abb      	ldrh	r3, [r7, #20]
 8001020:	2b63      	cmp	r3, #99	; 0x63
 8001022:	d837      	bhi.n	8001094 <ex1+0x2fc>
						if (y_pos > 40 && y_pos < 70 ){
 8001024:	8a7b      	ldrh	r3, [r7, #18]
 8001026:	2b28      	cmp	r3, #40	; 0x28
 8001028:	d95a      	bls.n	80010e0 <ex1+0x348>
 800102a:	8a7b      	ldrh	r3, [r7, #18]
 800102c:	2b45      	cmp	r3, #69	; 0x45
 800102e:	d857      	bhi.n	80010e0 <ex1+0x348>

							Green += 10;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <ex1+0x2cc>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	330a      	adds	r3, #10
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <ex1+0x2cc>)
 800103a:	801a      	strh	r2, [r3, #0]

							if (Green > 100){
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <ex1+0x2cc>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	2b64      	cmp	r3, #100	; 0x64
 8001042:	d94d      	bls.n	80010e0 <ex1+0x348>
								Green = 0;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <ex1+0x2cc>)
 8001046:	2200      	movs	r2, #0
 8001048:	801a      	strh	r2, [r3, #0]

								ILI9341_Draw_Filled_Rectangle_Coord(90, 135, 300, 155, WHITE);
 800104a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	239b      	movs	r3, #155	; 0x9b
 8001052:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001056:	2187      	movs	r1, #135	; 0x87
 8001058:	205a      	movs	r0, #90	; 0x5a
 800105a:	f000 fbb8 	bl	80017ce <ILI9341_Draw_Filled_Rectangle_Coord>
						if (y_pos > 40 && y_pos < 70 ){
 800105e:	e03f      	b.n	80010e0 <ex1+0x348>
 8001060:	20000254 	.word	0x20000254
 8001064:	20000256 	.word	0x20000256
 8001068:	20000258 	.word	0x20000258
 800106c:	080088d8 	.word	0x080088d8
 8001070:	2000024c 	.word	0x2000024c
 8001074:	080088dc 	.word	0x080088dc
 8001078:	20000250 	.word	0x20000250
 800107c:	080088e4 	.word	0x080088e4
 8001080:	080088f0 	.word	0x080088f0
 8001084:	2000025b 	.word	0x2000025b
 8001088:	2000025a 	.word	0x2000025a
 800108c:	20000248 	.word	0x20000248
 8001090:	20000268 	.word	0x20000268
							}

						}
					}
					else if (x_pos > 20 && x_pos < 50) {
 8001094:	8abb      	ldrh	r3, [r7, #20]
 8001096:	2b14      	cmp	r3, #20
 8001098:	d923      	bls.n	80010e2 <ex1+0x34a>
 800109a:	8abb      	ldrh	r3, [r7, #20]
 800109c:	2b31      	cmp	r3, #49	; 0x31
 800109e:	d820      	bhi.n	80010e2 <ex1+0x34a>
							if (y_pos > 40 && y_pos < 70 ){
 80010a0:	8a7b      	ldrh	r3, [r7, #18]
 80010a2:	2b28      	cmp	r3, #40	; 0x28
 80010a4:	d91d      	bls.n	80010e2 <ex1+0x34a>
 80010a6:	8a7b      	ldrh	r3, [r7, #18]
 80010a8:	2b45      	cmp	r3, #69	; 0x45
 80010aa:	d81a      	bhi.n	80010e2 <ex1+0x34a>
								Blue += 10;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <ex1+0x354>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	330a      	adds	r3, #10
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <ex1+0x354>)
 80010b6:	801a      	strh	r2, [r3, #0]

								if (Blue > 100){
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <ex1+0x354>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	2b64      	cmp	r3, #100	; 0x64
 80010be:	d910      	bls.n	80010e2 <ex1+0x34a>
									Blue = 0;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <ex1+0x354>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	801a      	strh	r2, [r3, #0]

									ILI9341_Draw_Filled_Rectangle_Coord(90, 195, 300, 215, WHITE);
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	23d7      	movs	r3, #215	; 0xd7
 80010ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010d2:	21c3      	movs	r1, #195	; 0xc3
 80010d4:	205a      	movs	r0, #90	; 0x5a
 80010d6:	f000 fb7a 	bl	80017ce <ILI9341_Draw_Filled_Rectangle_Coord>



		  }

}
 80010da:	e002      	b.n	80010e2 <ex1+0x34a>
						if (y_pos > 40 && y_pos < 70 ){
 80010dc:	bf00      	nop
 80010de:	e000      	b.n	80010e2 <ex1+0x34a>
						if (y_pos > 40 && y_pos < 70 ){
 80010e0:	bf00      	nop
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000258 	.word	0x20000258

080010f0 <ex2>:

void ex2(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Image((const char*) snow_tiger, SCREEN_HORIZONTAL_1);
 80010f6:	2101      	movs	r1, #1
 80010f8:	4818      	ldr	r0, [pc, #96]	; (800115c <ex2+0x6c>)
 80010fa:	f000 fc91 	bl	8001a20 <ILI9341_Draw_Image>

	  ILI9341_Draw_Text("Group No.18",135 , 70 , BLACK, 2, WHITE);
 80010fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	2302      	movs	r3, #2
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2300      	movs	r3, #0
 800110a:	2246      	movs	r2, #70	; 0x46
 800110c:	2187      	movs	r1, #135	; 0x87
 800110e:	4814      	ldr	r0, [pc, #80]	; (8001160 <ex2+0x70>)
 8001110:	f000 fc56 	bl	80019c0 <ILI9341_Draw_Text>

	  ILI9341_Draw_Text("PITPIBUL",135 , 100 , BLACK, 2, WHITE);
 8001114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	2302      	movs	r3, #2
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2300      	movs	r3, #0
 8001120:	2264      	movs	r2, #100	; 0x64
 8001122:	2187      	movs	r1, #135	; 0x87
 8001124:	480f      	ldr	r0, [pc, #60]	; (8001164 <ex2+0x74>)
 8001126:	f000 fc4b 	bl	80019c0 <ILI9341_Draw_Text>

	  ILI9341_Draw_Text("PHONGPHOTJANATHAM",135 , 130 , BLACK, 1, WHITE);
 800112a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	2301      	movs	r3, #1
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2300      	movs	r3, #0
 8001136:	2282      	movs	r2, #130	; 0x82
 8001138:	2187      	movs	r1, #135	; 0x87
 800113a:	480b      	ldr	r0, [pc, #44]	; (8001168 <ex2+0x78>)
 800113c:	f000 fc40 	bl	80019c0 <ILI9341_Draw_Text>

	  ILI9341_Draw_Text("64010591",135 , 160 , BLACK, 2, WHITE);
 8001140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	2302      	movs	r3, #2
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	22a0      	movs	r2, #160	; 0xa0
 800114e:	2187      	movs	r1, #135	; 0x87
 8001150:	4806      	ldr	r0, [pc, #24]	; (800116c <ex2+0x7c>)
 8001152:	f000 fc35 	bl	80019c0 <ILI9341_Draw_Text>


}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	08008930 	.word	0x08008930
 8001160:	080088f8 	.word	0x080088f8
 8001164:	08008904 	.word	0x08008904
 8001168:	08008910 	.word	0x08008910
 800116c:	08008924 	.word	0x08008924

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x4>
	...

08001178 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_RNG_Init+0x20>)
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <MX_RNG_Init+0x24>)
 8001180:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_RNG_Init+0x20>)
 8001184:	f003 fd3c 	bl	8004c00 <HAL_RNG_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800118e:	f7ff ffef 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000026c 	.word	0x2000026c
 800119c:	50060800 	.word	0x50060800

080011a0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0a8      	sub	sp, #160	; 0xa0
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	2290      	movs	r2, #144	; 0x90
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f005 fb12 	bl	80067da <memset>
  if(rngHandle->Instance==RNG)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a11      	ldr	r2, [pc, #68]	; (8001200 <HAL_RNG_MspInit+0x60>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d11b      	bne.n	80011f8 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 f8ed 	bl	80043b0 <HAL_RCCEx_PeriphCLKConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80011dc:	f7ff ffc8 	bl	8001170 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_RNG_MspInit+0x64>)
 80011e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_RNG_MspInit+0x64>)
 80011e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ea:	6353      	str	r3, [r2, #52]	; 0x34
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_RNG_MspInit+0x64>)
 80011ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	37a0      	adds	r7, #160	; 0xa0
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	50060800 	.word	0x50060800
 8001204:	40023800 	.word	0x40023800

08001208 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_SPI5_Init+0x74>)
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <MX_SPI5_Init+0x78>)
 8001210:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_SPI5_Init+0x74>)
 8001214:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001218:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_SPI5_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_SPI5_Init+0x74>)
 8001222:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001226:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_SPI5_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_SPI5_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_SPI5_Init+0x74>)
 8001236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_SPI5_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_SPI5_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_SPI5_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_SPI5_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_SPI5_Init+0x74>)
 8001256:	2207      	movs	r2, #7
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_SPI5_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_SPI5_Init+0x74>)
 8001262:	2208      	movs	r2, #8
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_SPI5_Init+0x74>)
 8001268:	f003 fcf4 	bl	8004c54 <HAL_SPI_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001272:	f7ff ff7d 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000027c 	.word	0x2000027c
 8001280:	40015000 	.word	0x40015000

08001284 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a17      	ldr	r2, [pc, #92]	; (8001300 <HAL_SPI_MspInit+0x7c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d128      	bne.n	80012f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_SPI_MspInit+0x80>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a16      	ldr	r2, [pc, #88]	; (8001304 <HAL_SPI_MspInit+0x80>)
 80012ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_SPI_MspInit+0x80>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_SPI_MspInit+0x80>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <HAL_SPI_MspInit+0x80>)
 80012c4:	f043 0320 	orr.w	r3, r3, #32
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_SPI_MspInit+0x80>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80012d6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012e8:	2305      	movs	r3, #5
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_SPI_MspInit+0x84>)
 80012f4:	f001 fc50 	bl	8002b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40015000 	.word	0x40015000
 8001304:	40023800 	.word	0x40023800
 8001308:	40021400 	.word	0x40021400

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_MspInit+0x44>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_MspInit+0x44>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_MspInit+0x44>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_MspInit+0x44>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_MspInit+0x44>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_MspInit+0x44>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001342:	2005      	movs	r0, #5
 8001344:	f001 fbe6 	bl	8002b14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40023800 	.word	0x40023800

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <NMI_Handler+0x4>

0800135a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <MemManage_Handler+0x4>

08001366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <UsageFault_Handler+0x4>

08001372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a0:	f001 faa4 	bl	80028ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80013ae:	f004 f8c3 	bl	8005538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  count++;
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a02      	ldr	r2, [pc, #8]	; (80013c4 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80013ba:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200002e4 	.word	0x200002e4
 80013c4:	20000248 	.word	0x20000248

080013c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return 1;
 80013cc:	2301      	movs	r3, #1
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_kill>:

int _kill(int pid, int sig)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013e2:	f005 fa4d 	bl	8006880 <__errno>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2216      	movs	r2, #22
 80013ea:	601a      	str	r2, [r3, #0]
  return -1;
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_exit>:

void _exit (int status)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ffe7 	bl	80013d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800140a:	e7fe      	b.n	800140a <_exit+0x12>

0800140c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	e00a      	b.n	8001434 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800141e:	f3af 8000 	nop.w
 8001422:	4601      	mov	r1, r0
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	60ba      	str	r2, [r7, #8]
 800142a:	b2ca      	uxtb	r2, r1
 800142c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	dbf0      	blt.n	800141e <_read+0x12>
  }

  return len;
 800143c:	687b      	ldr	r3, [r7, #4]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	e009      	b.n	800146c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	60ba      	str	r2, [r7, #8]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	429a      	cmp	r2, r3
 8001472:	dbf1      	blt.n	8001458 <_write+0x12>
  }
  return len;
 8001474:	687b      	ldr	r3, [r7, #4]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_close>:

int _close(int file)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a6:	605a      	str	r2, [r3, #4]
  return 0;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_isatty>:

int _isatty(int file)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f0:	4a14      	ldr	r2, [pc, #80]	; (8001544 <_sbrk+0x5c>)
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <_sbrk+0x60>)
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <_sbrk+0x64>)
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <_sbrk+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d207      	bcs.n	8001528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001518:	f005 f9b2 	bl	8006880 <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e009      	b.n	800153c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <_sbrk+0x64>)
 8001538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20080000 	.word	0x20080000
 8001548:	00000400 	.word	0x00000400
 800154c:	200002e0 	.word	0x200002e0
 8001550:	20000480 	.word	0x20000480

08001554 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <MX_TIM1_Init+0xa0>)
 8001598:	4a20      	ldr	r2, [pc, #128]	; (800161c <MX_TIM1_Init+0xa4>)
 800159a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <MX_TIM1_Init+0xa0>)
 800159e:	22d7      	movs	r2, #215	; 0xd7
 80015a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <MX_TIM1_Init+0xa0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_TIM1_Init+0xa0>)
 80015aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <MX_TIM1_Init+0xa0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_TIM1_Init+0xa0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_TIM1_Init+0xa0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015c2:	4815      	ldr	r0, [pc, #84]	; (8001618 <MX_TIM1_Init+0xa0>)
 80015c4:	f003 fee8 	bl	8005398 <HAL_TIM_Base_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80015ce:	f7ff fdcf 	bl	8001170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4619      	mov	r1, r3
 80015de:	480e      	ldr	r0, [pc, #56]	; (8001618 <MX_TIM1_Init+0xa0>)
 80015e0:	f004 f8ca 	bl	8005778 <HAL_TIM_ConfigClockSource>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80015ea:	f7ff fdc1 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <MX_TIM1_Init+0xa0>)
 8001600:	f004 faf0 	bl	8005be4 <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800160a:	f7ff fdb1 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200002e4 	.word	0x200002e4
 800161c:	40010000 	.word	0x40010000

08001620 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <HAL_TIM_Base_MspInit+0x44>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d113      	bne.n	800165a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_TIM_Base_MspInit+0x48>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <HAL_TIM_Base_MspInit+0x48>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_TIM_Base_MspInit+0x48>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2019      	movs	r0, #25
 8001650:	f001 fa6b 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001654:	2019      	movs	r0, #25
 8001656:	f001 fa84 	bl	8002b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */
  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40010000 	.word	0x40010000
 8001668:	40023800 	.word	0x40023800

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001672:	490e      	ldr	r1, [pc, #56]	; (80016ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800167c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001688:	4c0b      	ldr	r4, [pc, #44]	; (80016b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001696:	f7ff ff5d 	bl	8001554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169a:	f005 f8f7 	bl	800688c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169e:	f7ff f9c3 	bl	8000a28 <main>
  bx  lr    
 80016a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016a4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80016b0:	0802e704 	.word	0x0802e704
  ldr r2, =_sbss
 80016b4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80016b8:	20000480 	.word	0x20000480

080016bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>

080016be <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80016be:	b590      	push	{r4, r7, lr}
 80016c0:	b08b      	sub	sp, #44	; 0x2c
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4604      	mov	r4, r0
 80016c6:	4608      	mov	r0, r1
 80016c8:	4611      	mov	r1, r2
 80016ca:	461a      	mov	r2, r3
 80016cc:	4623      	mov	r3, r4
 80016ce:	80fb      	strh	r3, [r7, #6]
 80016d0:	4603      	mov	r3, r0
 80016d2:	80bb      	strh	r3, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80016dc:	887b      	ldrh	r3, [r7, #2]
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80016e4:	887b      	ldrh	r3, [r7, #2]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	f1c3 0301 	rsb	r3, r3, #1
 80016ec:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80016f6:	e061      	b.n	80017bc <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80016f8:	88fa      	ldrh	r2, [r7, #6]
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	e018      	b.n	8001734 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	b298      	uxth	r0, r3
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	b29a      	uxth	r2, r3
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	b29b      	uxth	r3, r3
 8001710:	883a      	ldrh	r2, [r7, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	f000 fe34 	bl	8002380 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	b298      	uxth	r0, r3
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	b29b      	uxth	r3, r3
 8001720:	88ba      	ldrh	r2, [r7, #4]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	b29b      	uxth	r3, r3
 8001726:	883a      	ldrh	r2, [r7, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f000 fe29 	bl	8002380 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	3301      	adds	r3, #1
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	88fa      	ldrh	r2, [r7, #6]
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	4413      	add	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	429a      	cmp	r2, r3
 800173e:	dde0      	ble.n	8001702 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8001740:	88fa      	ldrh	r2, [r7, #6]
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e018      	b.n	800177c <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	b298      	uxth	r0, r3
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	b29a      	uxth	r2, r3
 8001752:	88bb      	ldrh	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	b29b      	uxth	r3, r3
 8001758:	883a      	ldrh	r2, [r7, #0]
 800175a:	4619      	mov	r1, r3
 800175c:	f000 fe10 	bl	8002380 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	b298      	uxth	r0, r3
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	b29b      	uxth	r3, r3
 8001768:	88ba      	ldrh	r2, [r7, #4]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b29b      	uxth	r3, r3
 800176e:	883a      	ldrh	r2, [r7, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	f000 fe05 	bl	8002380 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3301      	adds	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	88fa      	ldrh	r2, [r7, #6]
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	4413      	add	r3, r2
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	dde0      	ble.n	800174a <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	3301      	adds	r3, #1
 800178c:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	4413      	add	r3, r2
 8001794:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	3302      	adds	r3, #2
 800179a:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005a      	lsls	r2, r3, #1
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	4413      	add	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	dd09      	ble.n	80017bc <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	3b01      	subs	r3, #1
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	4413      	add	r3, r2
 80017b4:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3302      	adds	r3, #2
 80017ba:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80017bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	da99      	bge.n	80016f8 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	372c      	adds	r7, #44	; 0x2c
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd90      	pop	{r4, r7, pc}

080017ce <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80017ce:	b590      	push	{r4, r7, lr}
 80017d0:	b089      	sub	sp, #36	; 0x24
 80017d2:	af02      	add	r7, sp, #8
 80017d4:	4604      	mov	r4, r0
 80017d6:	4608      	mov	r0, r1
 80017d8:	4611      	mov	r1, r2
 80017da:	461a      	mov	r2, r3
 80017dc:	4623      	mov	r3, r4
 80017de:	80fb      	strh	r3, [r7, #6]
 80017e0:	4603      	mov	r3, r0
 80017e2:	80bb      	strh	r3, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8001808:	887a      	ldrh	r2, [r7, #2]
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	da01      	bge.n	800181a <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8001816:	2301      	movs	r3, #1
 8001818:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 800181e:	883a      	ldrh	r2, [r7, #0]
 8001820:	88bb      	ldrh	r3, [r7, #4]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	da01      	bge.n	8001830 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 800182c:	2301      	movs	r3, #1
 800182e:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8001830:	7cfb      	ldrb	r3, [r7, #19]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d106      	bne.n	8001844 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	823b      	strh	r3, [r7, #16]
 8001842:	e005      	b.n	8001850 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8001850:	7cbb      	ldrb	r3, [r7, #18]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8001856:	883a      	ldrh	r2, [r7, #0]
 8001858:	88bb      	ldrh	r3, [r7, #4]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 800185e:	88bb      	ldrh	r3, [r7, #4]
 8001860:	81fb      	strh	r3, [r7, #14]
 8001862:	e005      	b.n	8001870 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8001864:	88ba      	ldrh	r2, [r7, #4]
 8001866:	883b      	ldrh	r3, [r7, #0]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 800186c:	883b      	ldrh	r3, [r7, #0]
 800186e:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8001870:	8abc      	ldrh	r4, [r7, #20]
 8001872:	8afa      	ldrh	r2, [r7, #22]
 8001874:	89f9      	ldrh	r1, [r7, #14]
 8001876:	8a38      	ldrh	r0, [r7, #16]
 8001878:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	4623      	mov	r3, r4
 800187e:	f000 fe59 	bl	8002534 <ILI9341_Draw_Rectangle>
}
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd90      	pop	{r4, r7, pc}
	...

0800188c <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af02      	add	r7, sp, #8
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4623      	mov	r3, r4
 800189c:	71fb      	strb	r3, [r7, #7]
 800189e:	4603      	mov	r3, r0
 80018a0:	71bb      	strb	r3, [r7, #6]
 80018a2:	460b      	mov	r3, r1
 80018a4:	717b      	strb	r3, [r7, #5]
 80018a6:	4613      	mov	r3, r2
 80018a8:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	2b1f      	cmp	r3, #31
 80018b2:	d802      	bhi.n	80018ba <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	71fb      	strb	r3, [r7, #7]
 80018b8:	e002      	b.n	80018c0 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	3b20      	subs	r3, #32
 80018be:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	753b      	strb	r3, [r7, #20]
 80018c4:	e012      	b.n	80018ec <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80018c6:	7dfa      	ldrb	r2, [r7, #23]
 80018c8:	7d38      	ldrb	r0, [r7, #20]
 80018ca:	7d39      	ldrb	r1, [r7, #20]
 80018cc:	4c3b      	ldr	r4, [pc, #236]	; (80019bc <ILI9341_Draw_Char+0x130>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4423      	add	r3, r4
 80018d8:	4403      	add	r3, r0
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	f101 0318 	add.w	r3, r1, #24
 80018e0:	443b      	add	r3, r7
 80018e2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80018e6:	7d3b      	ldrb	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	753b      	strb	r3, [r7, #20]
 80018ec:	7d3b      	ldrb	r3, [r7, #20]
 80018ee:	2b05      	cmp	r3, #5
 80018f0:	d9e9      	bls.n	80018c6 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80018f2:	79bb      	ldrb	r3, [r7, #6]
 80018f4:	b298      	uxth	r0, r3
 80018f6:	797b      	ldrb	r3, [r7, #5]
 80018f8:	b299      	uxth	r1, r3
 80018fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018fc:	461a      	mov	r2, r3
 80018fe:	0052      	lsls	r2, r2, #1
 8001900:	4413      	add	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	b29c      	uxth	r4, r3
 800190c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	4623      	mov	r3, r4
 8001912:	f000 fe0f 	bl	8002534 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001916:	2300      	movs	r3, #0
 8001918:	757b      	strb	r3, [r7, #21]
 800191a:	e047      	b.n	80019ac <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800191c:	2300      	movs	r3, #0
 800191e:	75bb      	strb	r3, [r7, #22]
 8001920:	e03e      	b.n	80019a0 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001922:	7d7b      	ldrb	r3, [r7, #21]
 8001924:	3318      	adds	r3, #24
 8001926:	443b      	add	r3, r7
 8001928:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800192c:	461a      	mov	r2, r3
 800192e:	7dbb      	ldrb	r3, [r7, #22]
 8001930:	fa42 f303 	asr.w	r3, r2, r3
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d02e      	beq.n	800199a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 800193c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800193e:	2b01      	cmp	r3, #1
 8001940:	d110      	bne.n	8001964 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001942:	79bb      	ldrb	r3, [r7, #6]
 8001944:	b29a      	uxth	r2, r3
 8001946:	7d7b      	ldrb	r3, [r7, #21]
 8001948:	b29b      	uxth	r3, r3
 800194a:	4413      	add	r3, r2
 800194c:	b298      	uxth	r0, r3
 800194e:	797b      	ldrb	r3, [r7, #5]
 8001950:	b29a      	uxth	r2, r3
 8001952:	7dbb      	ldrb	r3, [r7, #22]
 8001954:	b29b      	uxth	r3, r3
 8001956:	4413      	add	r3, r2
 8001958:	b29b      	uxth	r3, r3
 800195a:	887a      	ldrh	r2, [r7, #2]
 800195c:	4619      	mov	r1, r3
 800195e:	f000 fd0f 	bl	8002380 <ILI9341_Draw_Pixel>
 8001962:	e01a      	b.n	800199a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	b29a      	uxth	r2, r3
 8001968:	7d7b      	ldrb	r3, [r7, #21]
 800196a:	b29b      	uxth	r3, r3
 800196c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800196e:	fb11 f303 	smulbb	r3, r1, r3
 8001972:	b29b      	uxth	r3, r3
 8001974:	4413      	add	r3, r2
 8001976:	b298      	uxth	r0, r3
 8001978:	797b      	ldrb	r3, [r7, #5]
 800197a:	b29a      	uxth	r2, r3
 800197c:	7dbb      	ldrb	r3, [r7, #22]
 800197e:	b29b      	uxth	r3, r3
 8001980:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001982:	fb11 f303 	smulbb	r3, r1, r3
 8001986:	b29b      	uxth	r3, r3
 8001988:	4413      	add	r3, r2
 800198a:	b299      	uxth	r1, r3
 800198c:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800198e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	4623      	mov	r3, r4
 8001996:	f000 fdcd 	bl	8002534 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800199a:	7dbb      	ldrb	r3, [r7, #22]
 800199c:	3301      	adds	r3, #1
 800199e:	75bb      	strb	r3, [r7, #22]
 80019a0:	7dbb      	ldrb	r3, [r7, #22]
 80019a2:	2b07      	cmp	r3, #7
 80019a4:	d9bd      	bls.n	8001922 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80019a6:	7d7b      	ldrb	r3, [r7, #21]
 80019a8:	3301      	adds	r3, #1
 80019aa:	757b      	strb	r3, [r7, #21]
 80019ac:	7d7b      	ldrb	r3, [r7, #21]
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d9b4      	bls.n	800191c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	0802e140 	.word	0x0802e140

080019c0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	4608      	mov	r0, r1
 80019ca:	4611      	mov	r1, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	4603      	mov	r3, r0
 80019d0:	70fb      	strb	r3, [r7, #3]
 80019d2:	460b      	mov	r3, r1
 80019d4:	70bb      	strb	r3, [r7, #2]
 80019d6:	4613      	mov	r3, r2
 80019d8:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80019da:	e017      	b.n	8001a0c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	7818      	ldrb	r0, [r3, #0]
 80019e4:	883c      	ldrh	r4, [r7, #0]
 80019e6:	78ba      	ldrb	r2, [r7, #2]
 80019e8:	78f9      	ldrb	r1, [r7, #3]
 80019ea:	8bbb      	ldrh	r3, [r7, #28]
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	8b3b      	ldrh	r3, [r7, #24]
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	4623      	mov	r3, r4
 80019f4:	f7ff ff4a 	bl	800188c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80019f8:	8b3b      	ldrh	r3, [r7, #24]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	0052      	lsls	r2, r2, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	4413      	add	r3, r2
 8001a0a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1e3      	bne.n	80019dc <ILI9341_Draw_Text+0x1c>
    }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}
	...

08001a20 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001a2c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001a30:	6018      	str	r0, [r3, #0]
 8001a32:	460a      	mov	r2, r1
 8001a34:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001a38:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001a3c:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 8001a3e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001a42:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d15e      	bne.n	8001b0a <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f000 fa67 	bl	8001f20 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8001a52:	23f0      	movs	r3, #240	; 0xf0
 8001a54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f000 f9f6 	bl	8001e4c <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(GPIOC, DC_Pin, GPIO_PIN_SET);	
 8001a60:	2201      	movs	r2, #1
 8001a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a66:	48c4      	ldr	r0, [pc, #784]	; (8001d78 <ILI9341_Draw_Image+0x358>)
 8001a68:	f001 fa5a 	bl	8002f20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a72:	48c1      	ldr	r0, [pc, #772]	; (8001d78 <ILI9341_Draw_Image+0x358>)
 8001a74:	f001 fa54 	bl	8002f20 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001a84:	e035      	b.n	8001af2 <ILI9341_Draw_Image+0xd2>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001a8c:	e019      	b.n	8001ac2 <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001a8e:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001a92:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001a96:	4413      	add	r3, r2
 8001a98:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001a9c:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	7819      	ldrb	r1, [r3, #0]
 8001aa6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001aaa:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001aae:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001ab2:	4413      	add	r3, r2
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001ab8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001abc:	3301      	adds	r3, #1
 8001abe:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001ac2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001ac6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001aca:	d3e0      	bcc.n	8001a8e <ILI9341_Draw_Image+0x6e>
				}						
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
 8001acc:	f107 010c 	add.w	r1, r7, #12
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ad6:	48a9      	ldr	r0, [pc, #676]	; (8001d7c <ILI9341_Draw_Image+0x35c>)
 8001ad8:	f003 f967 	bl	8004daa <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001adc:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001ae0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ae4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001ae8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001aec:	3301      	adds	r3, #1
 8001aee:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001af2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001af6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001afa:	d9c4      	bls.n	8001a86 <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
 8001afc:	2201      	movs	r2, #1
 8001afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b02:	489d      	ldr	r0, [pc, #628]	; (8001d78 <ILI9341_Draw_Image+0x358>)
 8001b04:	f001 fa0c 	bl	8002f20 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
	}
}
 8001b08:	e130      	b.n	8001d6c <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 8001b0a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001b0e:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d15e      	bne.n	8001bd6 <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001b18:	2003      	movs	r0, #3
 8001b1a:	f000 fa01 	bl	8001f20 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8001b1e:	23f0      	movs	r3, #240	; 0xf0
 8001b20:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b24:	2100      	movs	r1, #0
 8001b26:	2000      	movs	r0, #0
 8001b28:	f000 f990 	bl	8001e4c <ILI9341_Set_Address>
		HAL_GPIO_WritePin(GPIOC, DC_Pin, GPIO_PIN_SET);	
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b32:	4891      	ldr	r0, [pc, #580]	; (8001d78 <ILI9341_Draw_Image+0x358>)
 8001b34:	f001 f9f4 	bl	8002f20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b3e:	488e      	ldr	r0, [pc, #568]	; (8001d78 <ILI9341_Draw_Image+0x358>)
 8001b40:	f001 f9ee 	bl	8002f20 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001b50:	e035      	b.n	8001bbe <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001b58:	e019      	b.n	8001b8e <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001b5a:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8001b5e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001b62:	4413      	add	r3, r2
 8001b64:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001b68:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7819      	ldrb	r1, [r3, #0]
 8001b72:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001b76:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001b7a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001b7e:	4413      	add	r3, r2
 8001b80:	460a      	mov	r2, r1
 8001b82:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001b84:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001b8e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001b92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b96:	d3e0      	bcc.n	8001b5a <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
 8001b98:	f107 010c 	add.w	r1, r7, #12
 8001b9c:	230a      	movs	r3, #10
 8001b9e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ba2:	4876      	ldr	r0, [pc, #472]	; (8001d7c <ILI9341_Draw_Image+0x35c>)
 8001ba4:	f003 f901 	bl	8004daa <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001ba8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001bac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001bb0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001bb4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001bbe:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001bc2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001bc6:	d9c4      	bls.n	8001b52 <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bce:	486a      	ldr	r0, [pc, #424]	; (8001d78 <ILI9341_Draw_Image+0x358>)
 8001bd0:	f001 f9a6 	bl	8002f20 <HAL_GPIO_WritePin>
}
 8001bd4:	e0ca      	b.n	8001d6c <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 8001bd6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001bda:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d15e      	bne.n	8001ca2 <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8001be4:	2002      	movs	r0, #2
 8001be6:	f000 f99b 	bl	8001f20 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8001bea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001bee:	22f0      	movs	r2, #240	; 0xf0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 f92a 	bl	8001e4c <ILI9341_Set_Address>
		HAL_GPIO_WritePin(GPIOC, DC_Pin, GPIO_PIN_SET);	
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bfe:	485e      	ldr	r0, [pc, #376]	; (8001d78 <ILI9341_Draw_Image+0x358>)
 8001c00:	f001 f98e 	bl	8002f20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0a:	485b      	ldr	r0, [pc, #364]	; (8001d78 <ILI9341_Draw_Image+0x358>)
 8001c0c:	f001 f988 	bl	8002f20 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001c1c:	e035      	b.n	8001c8a <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001c24:	e019      	b.n	8001c5a <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001c26:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001c2a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001c2e:	4413      	add	r3, r2
 8001c30:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001c34:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	7819      	ldrb	r1, [r3, #0]
 8001c3e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c42:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001c46:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001c4a:	4413      	add	r3, r2
 8001c4c:	460a      	mov	r2, r1
 8001c4e:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001c50:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001c54:	3301      	adds	r3, #1
 8001c56:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001c5a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001c5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c62:	d3e0      	bcc.n	8001c26 <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
 8001c64:	f107 010c 	add.w	r1, r7, #12
 8001c68:	230a      	movs	r3, #10
 8001c6a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c6e:	4843      	ldr	r0, [pc, #268]	; (8001d7c <ILI9341_Draw_Image+0x35c>)
 8001c70:	f003 f89b 	bl	8004daa <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001c74:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001c78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c7c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001c80:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001c84:	3301      	adds	r3, #1
 8001c86:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001c8a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001c8e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001c92:	d9c4      	bls.n	8001c1e <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c9a:	4837      	ldr	r0, [pc, #220]	; (8001d78 <ILI9341_Draw_Image+0x358>)
 8001c9c:	f001 f940 	bl	8002f20 <HAL_GPIO_WritePin>
}
 8001ca0:	e064      	b.n	8001d6c <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 8001ca2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001ca6:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d15d      	bne.n	8001d6c <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f000 f935 	bl	8001f20 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8001cb6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001cba:	22f0      	movs	r2, #240	; 0xf0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f000 f8c4 	bl	8001e4c <ILI9341_Set_Address>
		HAL_GPIO_WritePin(GPIOC, DC_Pin, GPIO_PIN_SET);	
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cca:	482b      	ldr	r0, [pc, #172]	; (8001d78 <ILI9341_Draw_Image+0x358>)
 8001ccc:	f001 f928 	bl	8002f20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd6:	4828      	ldr	r0, [pc, #160]	; (8001d78 <ILI9341_Draw_Image+0x358>)
 8001cd8:	f001 f922 	bl	8002f20 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001ce8:	e035      	b.n	8001d56 <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001cf0:	e019      	b.n	8001d26 <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001cf2:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8001cf6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001d00:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	7819      	ldrb	r1, [r3, #0]
 8001d0a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001d0e:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001d12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d16:	4413      	add	r3, r2
 8001d18:	460a      	mov	r2, r1
 8001d1a:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001d1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d20:	3301      	adds	r3, #1
 8001d22:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001d26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d2e:	d3e0      	bcc.n	8001cf2 <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
 8001d30:	f107 010c 	add.w	r1, r7, #12
 8001d34:	230a      	movs	r3, #10
 8001d36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d3a:	4810      	ldr	r0, [pc, #64]	; (8001d7c <ILI9341_Draw_Image+0x35c>)
 8001d3c:	f003 f835 	bl	8004daa <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001d40:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001d44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d48:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001d4c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001d50:	3301      	adds	r3, #1
 8001d52:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001d56:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001d5a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001d5e:	d9c4      	bls.n	8001cea <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
 8001d60:	2201      	movs	r2, #1
 8001d62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d66:	4804      	ldr	r0, [pc, #16]	; (8001d78 <ILI9341_Draw_Image+0x358>)
 8001d68:	f001 f8da 	bl	8002f20 <HAL_GPIO_WritePin>
}
 8001d6c:	bf00      	nop
 8001d6e:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	2000027c 	.word	0x2000027c

08001d80 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8001d84:	f7ff fa40 	bl	8001208 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8001d88:	f7fe fc30 	bl	80005ec <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d92:	4802      	ldr	r0, [pc, #8]	; (8001d9c <ILI9341_SPI_Init+0x1c>)
 8001d94:	f001 f8c4 	bl	8002f20 <HAL_GPIO_WritePin>
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40020800 	.word	0x40020800

08001da0 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001daa:	1df9      	adds	r1, r7, #7
 8001dac:	2301      	movs	r3, #1
 8001dae:	2201      	movs	r2, #1
 8001db0:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <ILI9341_SPI_Send+0x20>)
 8001db2:	f002 fffa 	bl	8004daa <HAL_SPI_Transmit>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000027c 	.word	0x2000027c

08001dc4 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dd4:	480b      	ldr	r0, [pc, #44]	; (8001e04 <ILI9341_Write_Command+0x40>)
 8001dd6:	f001 f8a3 	bl	8002f20 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de0:	4808      	ldr	r0, [pc, #32]	; (8001e04 <ILI9341_Write_Command+0x40>)
 8001de2:	f001 f89d 	bl	8002f20 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ffd9 	bl	8001da0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001dee:	2201      	movs	r2, #1
 8001df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001df4:	4803      	ldr	r0, [pc, #12]	; (8001e04 <ILI9341_Write_Command+0x40>)
 8001df6:	f001 f893 	bl	8002f20 <HAL_GPIO_WritePin>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40020800 	.word	0x40020800

08001e08 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001e12:	2201      	movs	r2, #1
 8001e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e18:	480b      	ldr	r0, [pc, #44]	; (8001e48 <ILI9341_Write_Data+0x40>)
 8001e1a:	f001 f881 	bl	8002f20 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e24:	4808      	ldr	r0, [pc, #32]	; (8001e48 <ILI9341_Write_Data+0x40>)
 8001e26:	f001 f87b 	bl	8002f20 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ffb7 	bl	8001da0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001e32:	2201      	movs	r2, #1
 8001e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e38:	4803      	ldr	r0, [pc, #12]	; (8001e48 <ILI9341_Write_Data+0x40>)
 8001e3a:	f001 f871 	bl	8002f20 <HAL_GPIO_WritePin>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40020800 	.word	0x40020800

08001e4c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4604      	mov	r4, r0
 8001e54:	4608      	mov	r0, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4623      	mov	r3, r4
 8001e5c:	80fb      	strh	r3, [r7, #6]
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80bb      	strh	r3, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	807b      	strh	r3, [r7, #2]
 8001e66:	4613      	mov	r3, r2
 8001e68:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001e6a:	202a      	movs	r0, #42	; 0x2a
 8001e6c:	f7ff ffaa 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ffc5 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ffc0 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ffb9 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001e96:	887b      	ldrh	r3, [r7, #2]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ffb4 	bl	8001e08 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001ea0:	202b      	movs	r0, #43	; 0x2b
 8001ea2:	f7ff ff8f 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001ea6:	88bb      	ldrh	r3, [r7, #4]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ffaa 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001eb4:	88bb      	ldrh	r3, [r7, #4]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ffa5 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001ebe:	883b      	ldrh	r3, [r7, #0]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff9e 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001ecc:	883b      	ldrh	r3, [r7, #0]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff99 	bl	8001e08 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001ed6:	202c      	movs	r0, #44	; 0x2c
 8001ed8:	f7ff ff74 	bl	8001dc4 <ILI9341_Write_Command>
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd90      	pop	{r4, r7, pc}

08001ee4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eee:	480b      	ldr	r0, [pc, #44]	; (8001f1c <ILI9341_Reset+0x38>)
 8001ef0:	f001 f816 	bl	8002f20 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001ef4:	20c8      	movs	r0, #200	; 0xc8
 8001ef6:	f000 fd19 	bl	800292c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f00:	4806      	ldr	r0, [pc, #24]	; (8001f1c <ILI9341_Reset+0x38>)
 8001f02:	f001 f80d 	bl	8002f20 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001f06:	20c8      	movs	r0, #200	; 0xc8
 8001f08:	f000 fd10 	bl	800292c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f12:	4802      	ldr	r0, [pc, #8]	; (8001f1c <ILI9341_Reset+0x38>)
 8001f14:	f001 f804 	bl	8002f20 <HAL_GPIO_WritePin>
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40020800 	.word	0x40020800

08001f20 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001f2e:	2036      	movs	r0, #54	; 0x36
 8001f30:	f7ff ff48 	bl	8001dc4 <ILI9341_Write_Command>
HAL_Delay(1);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f000 fcf9 	bl	800292c <HAL_Delay>
	
switch(screen_rotation) 
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d837      	bhi.n	8001fb0 <ILI9341_Set_Rotation+0x90>
 8001f40:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <ILI9341_Set_Rotation+0x28>)
 8001f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f46:	bf00      	nop
 8001f48:	08001f59 	.word	0x08001f59
 8001f4c:	08001f6f 	.word	0x08001f6f
 8001f50:	08001f85 	.word	0x08001f85
 8001f54:	08001f9b 	.word	0x08001f9b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001f58:	2048      	movs	r0, #72	; 0x48
 8001f5a:	f7ff ff55 	bl	8001e08 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <ILI9341_Set_Rotation+0x9c>)
 8001f60:	22f0      	movs	r2, #240	; 0xf0
 8001f62:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001f64:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <ILI9341_Set_Rotation+0xa0>)
 8001f66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f6a:	801a      	strh	r2, [r3, #0]
			break;
 8001f6c:	e021      	b.n	8001fb2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001f6e:	2028      	movs	r0, #40	; 0x28
 8001f70:	f7ff ff4a 	bl	8001e08 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <ILI9341_Set_Rotation+0x9c>)
 8001f76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f7a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001f7c:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <ILI9341_Set_Rotation+0xa0>)
 8001f7e:	22f0      	movs	r2, #240	; 0xf0
 8001f80:	801a      	strh	r2, [r3, #0]
			break;
 8001f82:	e016      	b.n	8001fb2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001f84:	2088      	movs	r0, #136	; 0x88
 8001f86:	f7ff ff3f 	bl	8001e08 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <ILI9341_Set_Rotation+0x9c>)
 8001f8c:	22f0      	movs	r2, #240	; 0xf0
 8001f8e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <ILI9341_Set_Rotation+0xa0>)
 8001f92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f96:	801a      	strh	r2, [r3, #0]
			break;
 8001f98:	e00b      	b.n	8001fb2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001f9a:	20e8      	movs	r0, #232	; 0xe8
 8001f9c:	f7ff ff34 	bl	8001e08 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <ILI9341_Set_Rotation+0x9c>)
 8001fa2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fa6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <ILI9341_Set_Rotation+0xa0>)
 8001faa:	22f0      	movs	r2, #240	; 0xf0
 8001fac:	801a      	strh	r2, [r3, #0]
			break;
 8001fae:	e000      	b.n	8001fb2 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001fb0:	bf00      	nop
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000006 	.word	0x20000006
 8001fc0:	20000004 	.word	0x20000004

08001fc4 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fce:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <ILI9341_Enable+0x14>)
 8001fd0:	f000 ffa6 	bl	8002f20 <HAL_GPIO_WritePin>
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40020800 	.word	0x40020800

08001fdc <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001fe0:	f7ff fff0 	bl	8001fc4 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001fe4:	f7ff fecc 	bl	8001d80 <ILI9341_SPI_Init>
ILI9341_Reset();
 8001fe8:	f7ff ff7c 	bl	8001ee4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001fec:	2001      	movs	r0, #1
 8001fee:	f7ff fee9 	bl	8001dc4 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001ff2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ff6:	f000 fc99 	bl	800292c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001ffa:	20cb      	movs	r0, #203	; 0xcb
 8001ffc:	f7ff fee2 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002000:	2039      	movs	r0, #57	; 0x39
 8002002:	f7ff ff01 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002006:	202c      	movs	r0, #44	; 0x2c
 8002008:	f7ff fefe 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff fefb 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002012:	2034      	movs	r0, #52	; 0x34
 8002014:	f7ff fef8 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002018:	2002      	movs	r0, #2
 800201a:	f7ff fef5 	bl	8001e08 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800201e:	20cf      	movs	r0, #207	; 0xcf
 8002020:	f7ff fed0 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff feef 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800202a:	20c1      	movs	r0, #193	; 0xc1
 800202c:	f7ff feec 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002030:	2030      	movs	r0, #48	; 0x30
 8002032:	f7ff fee9 	bl	8001e08 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002036:	20e8      	movs	r0, #232	; 0xe8
 8002038:	f7ff fec4 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 800203c:	2085      	movs	r0, #133	; 0x85
 800203e:	f7ff fee3 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002042:	2000      	movs	r0, #0
 8002044:	f7ff fee0 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002048:	2078      	movs	r0, #120	; 0x78
 800204a:	f7ff fedd 	bl	8001e08 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800204e:	20ea      	movs	r0, #234	; 0xea
 8002050:	f7ff feb8 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002054:	2000      	movs	r0, #0
 8002056:	f7ff fed7 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800205a:	2000      	movs	r0, #0
 800205c:	f7ff fed4 	bl	8001e08 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002060:	20ed      	movs	r0, #237	; 0xed
 8002062:	f7ff feaf 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002066:	2064      	movs	r0, #100	; 0x64
 8002068:	f7ff fece 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800206c:	2003      	movs	r0, #3
 800206e:	f7ff fecb 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002072:	2012      	movs	r0, #18
 8002074:	f7ff fec8 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002078:	2081      	movs	r0, #129	; 0x81
 800207a:	f7ff fec5 	bl	8001e08 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800207e:	20f7      	movs	r0, #247	; 0xf7
 8002080:	f7ff fea0 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002084:	2020      	movs	r0, #32
 8002086:	f7ff febf 	bl	8001e08 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800208a:	20c0      	movs	r0, #192	; 0xc0
 800208c:	f7ff fe9a 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002090:	2023      	movs	r0, #35	; 0x23
 8002092:	f7ff feb9 	bl	8001e08 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002096:	20c1      	movs	r0, #193	; 0xc1
 8002098:	f7ff fe94 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800209c:	2010      	movs	r0, #16
 800209e:	f7ff feb3 	bl	8001e08 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80020a2:	20c5      	movs	r0, #197	; 0xc5
 80020a4:	f7ff fe8e 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80020a8:	203e      	movs	r0, #62	; 0x3e
 80020aa:	f7ff fead 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80020ae:	2028      	movs	r0, #40	; 0x28
 80020b0:	f7ff feaa 	bl	8001e08 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80020b4:	20c7      	movs	r0, #199	; 0xc7
 80020b6:	f7ff fe85 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80020ba:	2086      	movs	r0, #134	; 0x86
 80020bc:	f7ff fea4 	bl	8001e08 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80020c0:	2036      	movs	r0, #54	; 0x36
 80020c2:	f7ff fe7f 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80020c6:	2048      	movs	r0, #72	; 0x48
 80020c8:	f7ff fe9e 	bl	8001e08 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80020cc:	203a      	movs	r0, #58	; 0x3a
 80020ce:	f7ff fe79 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80020d2:	2055      	movs	r0, #85	; 0x55
 80020d4:	f7ff fe98 	bl	8001e08 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80020d8:	20b1      	movs	r0, #177	; 0xb1
 80020da:	f7ff fe73 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80020de:	2000      	movs	r0, #0
 80020e0:	f7ff fe92 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80020e4:	2018      	movs	r0, #24
 80020e6:	f7ff fe8f 	bl	8001e08 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80020ea:	20b6      	movs	r0, #182	; 0xb6
 80020ec:	f7ff fe6a 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80020f0:	2008      	movs	r0, #8
 80020f2:	f7ff fe89 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80020f6:	2082      	movs	r0, #130	; 0x82
 80020f8:	f7ff fe86 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80020fc:	2027      	movs	r0, #39	; 0x27
 80020fe:	f7ff fe83 	bl	8001e08 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002102:	20f2      	movs	r0, #242	; 0xf2
 8002104:	f7ff fe5e 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff fe7d 	bl	8001e08 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800210e:	2026      	movs	r0, #38	; 0x26
 8002110:	f7ff fe58 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002114:	2001      	movs	r0, #1
 8002116:	f7ff fe77 	bl	8001e08 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800211a:	20e0      	movs	r0, #224	; 0xe0
 800211c:	f7ff fe52 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002120:	200f      	movs	r0, #15
 8002122:	f7ff fe71 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002126:	2031      	movs	r0, #49	; 0x31
 8002128:	f7ff fe6e 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 800212c:	202b      	movs	r0, #43	; 0x2b
 800212e:	f7ff fe6b 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002132:	200c      	movs	r0, #12
 8002134:	f7ff fe68 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002138:	200e      	movs	r0, #14
 800213a:	f7ff fe65 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800213e:	2008      	movs	r0, #8
 8002140:	f7ff fe62 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002144:	204e      	movs	r0, #78	; 0x4e
 8002146:	f7ff fe5f 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800214a:	20f1      	movs	r0, #241	; 0xf1
 800214c:	f7ff fe5c 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002150:	2037      	movs	r0, #55	; 0x37
 8002152:	f7ff fe59 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002156:	2007      	movs	r0, #7
 8002158:	f7ff fe56 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 800215c:	2010      	movs	r0, #16
 800215e:	f7ff fe53 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002162:	2003      	movs	r0, #3
 8002164:	f7ff fe50 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002168:	200e      	movs	r0, #14
 800216a:	f7ff fe4d 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800216e:	2009      	movs	r0, #9
 8002170:	f7ff fe4a 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff fe47 	bl	8001e08 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800217a:	20e1      	movs	r0, #225	; 0xe1
 800217c:	f7ff fe22 	bl	8001dc4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002180:	2000      	movs	r0, #0
 8002182:	f7ff fe41 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002186:	200e      	movs	r0, #14
 8002188:	f7ff fe3e 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 800218c:	2014      	movs	r0, #20
 800218e:	f7ff fe3b 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002192:	2003      	movs	r0, #3
 8002194:	f7ff fe38 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002198:	2011      	movs	r0, #17
 800219a:	f7ff fe35 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800219e:	2007      	movs	r0, #7
 80021a0:	f7ff fe32 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80021a4:	2031      	movs	r0, #49	; 0x31
 80021a6:	f7ff fe2f 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80021aa:	20c1      	movs	r0, #193	; 0xc1
 80021ac:	f7ff fe2c 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80021b0:	2048      	movs	r0, #72	; 0x48
 80021b2:	f7ff fe29 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80021b6:	2008      	movs	r0, #8
 80021b8:	f7ff fe26 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80021bc:	200f      	movs	r0, #15
 80021be:	f7ff fe23 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80021c2:	200c      	movs	r0, #12
 80021c4:	f7ff fe20 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80021c8:	2031      	movs	r0, #49	; 0x31
 80021ca:	f7ff fe1d 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80021ce:	2036      	movs	r0, #54	; 0x36
 80021d0:	f7ff fe1a 	bl	8001e08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80021d4:	200f      	movs	r0, #15
 80021d6:	f7ff fe17 	bl	8001e08 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80021da:	2011      	movs	r0, #17
 80021dc:	f7ff fdf2 	bl	8001dc4 <ILI9341_Write_Command>
HAL_Delay(120);
 80021e0:	2078      	movs	r0, #120	; 0x78
 80021e2:	f000 fba3 	bl	800292c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80021e6:	2029      	movs	r0, #41	; 0x29
 80021e8:	f7ff fdec 	bl	8001dc4 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7ff fe97 	bl	8001f20 <ILI9341_Set_Rotation>
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80021f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021fc:	b08d      	sub	sp, #52	; 0x34
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	6039      	str	r1, [r7, #0]
 8002204:	80fb      	strh	r3, [r7, #6]
 8002206:	466b      	mov	r3, sp
 8002208:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002216:	d202      	bcs.n	800221e <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800221c:	e002      	b.n	8002224 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800221e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002224:	2201      	movs	r2, #1
 8002226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800222a:	4840      	ldr	r0, [pc, #256]	; (800232c <ILI9341_Draw_Colour_Burst+0x134>)
 800222c:	f000 fe78 	bl	8002f20 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002230:	2200      	movs	r2, #0
 8002232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002236:	483d      	ldr	r0, [pc, #244]	; (800232c <ILI9341_Draw_Colour_Burst+0x134>)
 8002238:	f000 fe72 	bl	8002f20 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	b29b      	uxth	r3, r3
 8002242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002248:	460b      	mov	r3, r1
 800224a:	3b01      	subs	r3, #1
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	2300      	movs	r3, #0
 8002250:	4688      	mov	r8, r1
 8002252:	4699      	mov	r9, r3
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002260:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002264:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002268:	2300      	movs	r3, #0
 800226a:	460c      	mov	r4, r1
 800226c:	461d      	mov	r5, r3
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	00eb      	lsls	r3, r5, #3
 8002278:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800227c:	00e2      	lsls	r2, r4, #3
 800227e:	1dcb      	adds	r3, r1, #7
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	ebad 0d03 	sub.w	sp, sp, r3
 8002288:	466b      	mov	r3, sp
 800228a:	3300      	adds	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
 8002292:	e00e      	b.n	80022b2 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	4413      	add	r3, r2
 800229a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800229e:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80022a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a2:	3301      	adds	r3, #1
 80022a4:	88fa      	ldrh	r2, [r7, #6]
 80022a6:	b2d1      	uxtb	r1, r2
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	3302      	adds	r3, #2
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d3ec      	bcc.n	8002294 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c8:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80022d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022d4:	fb01 f202 	mul.w	r2, r1, r2
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d010      	beq.n	8002304 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
 80022e6:	e009      	b.n	80022fc <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	230a      	movs	r3, #10
 80022ee:	69b9      	ldr	r1, [r7, #24]
 80022f0:	480f      	ldr	r0, [pc, #60]	; (8002330 <ILI9341_Draw_Colour_Burst+0x138>)
 80022f2:	f002 fd5a 	bl	8004daa <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	3301      	adds	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
 80022fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d3f1      	bcc.n	80022e8 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	b29a      	uxth	r2, r3
 8002308:	230a      	movs	r3, #10
 800230a:	69b9      	ldr	r1, [r7, #24]
 800230c:	4808      	ldr	r0, [pc, #32]	; (8002330 <ILI9341_Draw_Colour_Burst+0x138>)
 800230e:	f002 fd4c 	bl	8004daa <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002312:	2201      	movs	r2, #1
 8002314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002318:	4804      	ldr	r0, [pc, #16]	; (800232c <ILI9341_Draw_Colour_Burst+0x134>)
 800231a:	f000 fe01 	bl	8002f20 <HAL_GPIO_WritePin>
 800231e:	46b5      	mov	sp, r6
}
 8002320:	bf00      	nop
 8002322:	3734      	adds	r7, #52	; 0x34
 8002324:	46bd      	mov	sp, r7
 8002326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800232a:	bf00      	nop
 800232c:	40020800 	.word	0x40020800
 8002330:	2000027c 	.word	0x2000027c

08002334 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <ILI9341_Fill_Screen+0x44>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b0d      	ldr	r3, [pc, #52]	; (800237c <ILI9341_Fill_Screen+0x48>)
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	2100      	movs	r1, #0
 800234c:	2000      	movs	r0, #0
 800234e:	f7ff fd7d 	bl	8001e4c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <ILI9341_Fill_Screen+0x44>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <ILI9341_Fill_Screen+0x48>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	461a      	mov	r2, r3
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff44 	bl	80021f8 <ILI9341_Draw_Colour_Burst>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000006 	.word	0x20000006
 800237c:	20000004 	.word	0x20000004

08002380 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
 800238a:	460b      	mov	r3, r1
 800238c:	80bb      	strh	r3, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002392:	4b64      	ldr	r3, [pc, #400]	; (8002524 <ILI9341_Draw_Pixel+0x1a4>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	88fa      	ldrh	r2, [r7, #6]
 800239a:	429a      	cmp	r2, r3
 800239c:	f080 80be 	bcs.w	800251c <ILI9341_Draw_Pixel+0x19c>
 80023a0:	4b61      	ldr	r3, [pc, #388]	; (8002528 <ILI9341_Draw_Pixel+0x1a8>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	88ba      	ldrh	r2, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	f080 80b7 	bcs.w	800251c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80023ae:	2200      	movs	r2, #0
 80023b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023b4:	485d      	ldr	r0, [pc, #372]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 80023b6:	f000 fdb3 	bl	8002f20 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023c0:	485a      	ldr	r0, [pc, #360]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 80023c2:	f000 fdad 	bl	8002f20 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80023c6:	202a      	movs	r0, #42	; 0x2a
 80023c8:	f7ff fcea 	bl	8001da0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80023cc:	2201      	movs	r2, #1
 80023ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023d2:	4856      	ldr	r0, [pc, #344]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 80023d4:	f000 fda4 	bl	8002f20 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80023d8:	2201      	movs	r2, #1
 80023da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023de:	4853      	ldr	r0, [pc, #332]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 80023e0:	f000 fd9e 	bl	8002f20 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80023e4:	2200      	movs	r2, #0
 80023e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ea:	4850      	ldr	r0, [pc, #320]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 80023ec:	f000 fd98 	bl	8002f20 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	753b      	strb	r3, [r7, #20]
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	757b      	strb	r3, [r7, #21]
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	3301      	adds	r3, #1
 8002404:	121b      	asrs	r3, r3, #8
 8002406:	b2db      	uxtb	r3, r3
 8002408:	75bb      	strb	r3, [r7, #22]
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	3301      	adds	r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002414:	f107 0114 	add.w	r1, r7, #20
 8002418:	2301      	movs	r3, #1
 800241a:	2204      	movs	r2, #4
 800241c:	4844      	ldr	r0, [pc, #272]	; (8002530 <ILI9341_Draw_Pixel+0x1b0>)
 800241e:	f002 fcc4 	bl	8004daa <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002422:	2201      	movs	r2, #1
 8002424:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002428:	4840      	ldr	r0, [pc, #256]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 800242a:	f000 fd79 	bl	8002f20 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800242e:	2200      	movs	r2, #0
 8002430:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002434:	483d      	ldr	r0, [pc, #244]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 8002436:	f000 fd73 	bl	8002f20 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800243a:	2200      	movs	r2, #0
 800243c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002440:	483a      	ldr	r0, [pc, #232]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 8002442:	f000 fd6d 	bl	8002f20 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002446:	202b      	movs	r0, #43	; 0x2b
 8002448:	f7ff fcaa 	bl	8001da0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800244c:	2201      	movs	r2, #1
 800244e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002452:	4836      	ldr	r0, [pc, #216]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 8002454:	f000 fd64 	bl	8002f20 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800245e:	4833      	ldr	r0, [pc, #204]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 8002460:	f000 fd5e 	bl	8002f20 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002464:	2200      	movs	r2, #0
 8002466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800246a:	4830      	ldr	r0, [pc, #192]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 800246c:	f000 fd58 	bl	8002f20 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002470:	88bb      	ldrh	r3, [r7, #4]
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	b29b      	uxth	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	743b      	strb	r3, [r7, #16]
 800247a:	88bb      	ldrh	r3, [r7, #4]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	747b      	strb	r3, [r7, #17]
 8002480:	88bb      	ldrh	r3, [r7, #4]
 8002482:	3301      	adds	r3, #1
 8002484:	121b      	asrs	r3, r3, #8
 8002486:	b2db      	uxtb	r3, r3
 8002488:	74bb      	strb	r3, [r7, #18]
 800248a:	88bb      	ldrh	r3, [r7, #4]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	3301      	adds	r3, #1
 8002490:	b2db      	uxtb	r3, r3
 8002492:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002494:	f107 0110 	add.w	r1, r7, #16
 8002498:	2301      	movs	r3, #1
 800249a:	2204      	movs	r2, #4
 800249c:	4824      	ldr	r0, [pc, #144]	; (8002530 <ILI9341_Draw_Pixel+0x1b0>)
 800249e:	f002 fc84 	bl	8004daa <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80024a2:	2201      	movs	r2, #1
 80024a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024a8:	4820      	ldr	r0, [pc, #128]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 80024aa:	f000 fd39 	bl	8002f20 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80024ae:	2200      	movs	r2, #0
 80024b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024b4:	481d      	ldr	r0, [pc, #116]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 80024b6:	f000 fd33 	bl	8002f20 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80024ba:	2200      	movs	r2, #0
 80024bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024c0:	481a      	ldr	r0, [pc, #104]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 80024c2:	f000 fd2d 	bl	8002f20 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80024c6:	202c      	movs	r0, #44	; 0x2c
 80024c8:	f7ff fc6a 	bl	8001da0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80024cc:	2201      	movs	r2, #1
 80024ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024d2:	4816      	ldr	r0, [pc, #88]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 80024d4:	f000 fd24 	bl	8002f20 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80024d8:	2201      	movs	r2, #1
 80024da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024de:	4813      	ldr	r0, [pc, #76]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 80024e0:	f000 fd1e 	bl	8002f20 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80024e4:	2200      	movs	r2, #0
 80024e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ea:	4810      	ldr	r0, [pc, #64]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 80024ec:	f000 fd18 	bl	8002f20 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80024f0:	887b      	ldrh	r3, [r7, #2]
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	733b      	strb	r3, [r7, #12]
 80024fa:	887b      	ldrh	r3, [r7, #2]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002500:	f107 010c 	add.w	r1, r7, #12
 8002504:	2301      	movs	r3, #1
 8002506:	2202      	movs	r2, #2
 8002508:	4809      	ldr	r0, [pc, #36]	; (8002530 <ILI9341_Draw_Pixel+0x1b0>)
 800250a:	f002 fc4e 	bl	8004daa <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800250e:	2201      	movs	r2, #1
 8002510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002514:	4805      	ldr	r0, [pc, #20]	; (800252c <ILI9341_Draw_Pixel+0x1ac>)
 8002516:	f000 fd03 	bl	8002f20 <HAL_GPIO_WritePin>
 800251a:	e000      	b.n	800251e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800251c:	bf00      	nop
	
}
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000006 	.word	0x20000006
 8002528:	20000004 	.word	0x20000004
 800252c:	40020800 	.word	0x40020800
 8002530:	2000027c 	.word	0x2000027c

08002534 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4604      	mov	r4, r0
 800253c:	4608      	mov	r0, r1
 800253e:	4611      	mov	r1, r2
 8002540:	461a      	mov	r2, r3
 8002542:	4623      	mov	r3, r4
 8002544:	80fb      	strh	r3, [r7, #6]
 8002546:	4603      	mov	r3, r0
 8002548:	80bb      	strh	r3, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	807b      	strh	r3, [r7, #2]
 800254e:	4613      	mov	r3, r2
 8002550:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <ILI9341_Draw_Rectangle+0xb0>)
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	88fa      	ldrh	r2, [r7, #6]
 800255a:	429a      	cmp	r2, r3
 800255c:	d23d      	bcs.n	80025da <ILI9341_Draw_Rectangle+0xa6>
 800255e:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <ILI9341_Draw_Rectangle+0xb4>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	88ba      	ldrh	r2, [r7, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	d237      	bcs.n	80025da <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800256a:	88fa      	ldrh	r2, [r7, #6]
 800256c:	887b      	ldrh	r3, [r7, #2]
 800256e:	4413      	add	r3, r2
 8002570:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <ILI9341_Draw_Rectangle+0xb0>)
 8002572:	8812      	ldrh	r2, [r2, #0]
 8002574:	b292      	uxth	r2, r2
 8002576:	4293      	cmp	r3, r2
 8002578:	dd05      	ble.n	8002586 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <ILI9341_Draw_Rectangle+0xb0>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29a      	uxth	r2, r3
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002586:	88ba      	ldrh	r2, [r7, #4]
 8002588:	883b      	ldrh	r3, [r7, #0]
 800258a:	4413      	add	r3, r2
 800258c:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <ILI9341_Draw_Rectangle+0xb4>)
 800258e:	8812      	ldrh	r2, [r2, #0]
 8002590:	b292      	uxth	r2, r2
 8002592:	4293      	cmp	r3, r2
 8002594:	dd05      	ble.n	80025a2 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002596:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <ILI9341_Draw_Rectangle+0xb4>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	b29a      	uxth	r2, r3
 800259c:	88bb      	ldrh	r3, [r7, #4]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80025a2:	88fa      	ldrh	r2, [r7, #6]
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	4413      	add	r3, r2
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29c      	uxth	r4, r3
 80025ae:	88ba      	ldrh	r2, [r7, #4]
 80025b0:	883b      	ldrh	r3, [r7, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	88b9      	ldrh	r1, [r7, #4]
 80025bc:	88f8      	ldrh	r0, [r7, #6]
 80025be:	4622      	mov	r2, r4
 80025c0:	f7ff fc44 	bl	8001e4c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80025c4:	883b      	ldrh	r3, [r7, #0]
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	8b3b      	ldrh	r3, [r7, #24]
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fe10 	bl	80021f8 <ILI9341_Draw_Colour_Burst>
 80025d8:	e000      	b.n	80025dc <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80025da:	bf00      	nop
}
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd90      	pop	{r4, r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000006 	.word	0x20000006
 80025e8:	20000004 	.word	0x20000004

080025ec <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 80025f2:	2310      	movs	r3, #16
 80025f4:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 80025fa:	e019      	b.n	8002630 <TP_Read+0x44>
    {
        value <<= 1;
 80025fc:	88bb      	ldrh	r3, [r7, #4]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002602:	2201      	movs	r2, #1
 8002604:	2108      	movs	r1, #8
 8002606:	480e      	ldr	r0, [pc, #56]	; (8002640 <TP_Read+0x54>)
 8002608:	f000 fc8a 	bl	8002f20 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 800260c:	2200      	movs	r2, #0
 800260e:	2108      	movs	r1, #8
 8002610:	480b      	ldr	r0, [pc, #44]	; (8002640 <TP_Read+0x54>)
 8002612:	f000 fc85 	bl	8002f20 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8002616:	2110      	movs	r1, #16
 8002618:	4809      	ldr	r0, [pc, #36]	; (8002640 <TP_Read+0x54>)
 800261a:	f000 fc69 	bl	8002ef0 <HAL_GPIO_ReadPin>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <TP_Read+0x3e>
        {
            value++;
 8002624:	88bb      	ldrh	r3, [r7, #4]
 8002626:	3301      	adds	r3, #1
 8002628:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	3b01      	subs	r3, #1
 800262e:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1e2      	bne.n	80025fc <TP_Read+0x10>
    };

    return value;
 8002636:	88bb      	ldrh	r3, [r7, #4]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000

08002644 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 800264e:	2308      	movs	r3, #8
 8002650:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8002652:	2200      	movs	r2, #0
 8002654:	2108      	movs	r1, #8
 8002656:	4815      	ldr	r0, [pc, #84]	; (80026ac <TP_Write+0x68>)
 8002658:	f000 fc62 	bl	8002f20 <HAL_GPIO_WritePin>
	
    while(i > 0)
 800265c:	e01e      	b.n	800269c <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	da05      	bge.n	8002672 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8002666:	2201      	movs	r2, #1
 8002668:	2120      	movs	r1, #32
 800266a:	4810      	ldr	r0, [pc, #64]	; (80026ac <TP_Write+0x68>)
 800266c:	f000 fc58 	bl	8002f20 <HAL_GPIO_WritePin>
 8002670:	e004      	b.n	800267c <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8002672:	2200      	movs	r2, #0
 8002674:	2120      	movs	r1, #32
 8002676:	480d      	ldr	r0, [pc, #52]	; (80026ac <TP_Write+0x68>)
 8002678:	f000 fc52 	bl	8002f20 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002682:	2201      	movs	r2, #1
 8002684:	2108      	movs	r1, #8
 8002686:	4809      	ldr	r0, [pc, #36]	; (80026ac <TP_Write+0x68>)
 8002688:	f000 fc4a 	bl	8002f20 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 800268c:	2200      	movs	r2, #0
 800268e:	2108      	movs	r1, #8
 8002690:	4806      	ldr	r0, [pc, #24]	; (80026ac <TP_Write+0x68>)
 8002692:	f000 fc45 	bl	8002f20 <HAL_GPIO_WritePin>
        i--;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	3b01      	subs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1dd      	bne.n	800265e <TP_Write+0x1a>
    };
}
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 80026b8:	2201      	movs	r2, #1
 80026ba:	2108      	movs	r1, #8
 80026bc:	485a      	ldr	r0, [pc, #360]	; (8002828 <TP_Read_Coordinates+0x178>)
 80026be:	f000 fc2f 	bl	8002f20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 80026c2:	2201      	movs	r2, #1
 80026c4:	2120      	movs	r1, #32
 80026c6:	4858      	ldr	r0, [pc, #352]	; (8002828 <TP_Read_Coordinates+0x178>)
 80026c8:	f000 fc2a 	bl	8002f20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 80026cc:	2201      	movs	r2, #1
 80026ce:	2140      	movs	r1, #64	; 0x40
 80026d0:	4855      	ldr	r0, [pc, #340]	; (8002828 <TP_Read_Coordinates+0x178>)
 80026d2:	f000 fc25 	bl	8002f20 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 80026da:	2300      	movs	r3, #0
 80026dc:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 80026e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e6:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2140      	movs	r1, #64	; 0x40
 80026f0:	484d      	ldr	r0, [pc, #308]	; (8002828 <TP_Read_Coordinates+0x178>)
 80026f2:	f000 fc15 	bl	8002f20 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80026f6:	e023      	b.n	8002740 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 80026f8:	2090      	movs	r0, #144	; 0x90
 80026fa:	f7ff ffa3 	bl	8002644 <TP_Write>

				rawy = TP_Read();	
 80026fe:	f7ff ff75 	bl	80025ec <TP_Read>
 8002702:	4603      	mov	r3, r0
 8002704:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8002706:	89fb      	ldrh	r3, [r7, #14]
 8002708:	6a3a      	ldr	r2, [r7, #32]
 800270a:	4413      	add	r3, r2
 800270c:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 800270e:	89fb      	ldrh	r3, [r7, #14]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4413      	add	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8002716:	20d0      	movs	r0, #208	; 0xd0
 8002718:	f7ff ff94 	bl	8002644 <TP_Write>
        rawx = TP_Read();
 800271c:	f7ff ff66 	bl	80025ec <TP_Read>
 8002720:	4603      	mov	r3, r0
 8002722:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8002724:	89bb      	ldrh	r3, [r7, #12]
 8002726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002728:	4413      	add	r3, r2
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 800272c:	89bb      	ldrh	r3, [r7, #12]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	4413      	add	r3, r2
 8002732:	61fb      	str	r3, [r7, #28]
        samples--;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3b01      	subs	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
				counted_samples++;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	3301      	adds	r3, #1
 800273e:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d006      	beq.n	8002754 <TP_Read_Coordinates+0xa4>
 8002746:	2104      	movs	r1, #4
 8002748:	4837      	ldr	r0, [pc, #220]	; (8002828 <TP_Read_Coordinates+0x178>)
 800274a:	f000 fbd1 	bl	8002ef0 <HAL_GPIO_ReadPin>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0d1      	beq.n	80026f8 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8002754:	2201      	movs	r2, #1
 8002756:	2140      	movs	r1, #64	; 0x40
 8002758:	4833      	ldr	r0, [pc, #204]	; (8002828 <TP_Read_Coordinates+0x178>)
 800275a:	f000 fbe1 	bl	8002f20 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002764:	d14d      	bne.n	8002802 <TP_Read_Coordinates+0x152>
 8002766:	2104      	movs	r1, #4
 8002768:	482f      	ldr	r0, [pc, #188]	; (8002828 <TP_Read_Coordinates+0x178>)
 800276a:	f000 fbc1 	bl	8002ef0 <HAL_GPIO_ReadPin>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d146      	bne.n	8002802 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8002790:	89bb      	ldrh	r3, [r7, #12]
 8002792:	425b      	negs	r3, r3
 8002794:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002796:	89fb      	ldrh	r3, [r7, #14]
 8002798:	425b      	negs	r3, r3
 800279a:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 800279c:	89ba      	ldrh	r2, [r7, #12]
 800279e:	4b23      	ldr	r3, [pc, #140]	; (800282c <TP_Read_Coordinates+0x17c>)
 80027a0:	fba3 1302 	umull	r1, r3, r3, r2
 80027a4:	1ad2      	subs	r2, r2, r3
 80027a6:	0852      	lsrs	r2, r2, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027ba:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002820 <TP_Read_Coordinates+0x170>
 80027be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80027c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80027c6:	ee17 3a90 	vmov	r3, s15
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 80027d0:	89fb      	ldrh	r3, [r7, #14]
 80027d2:	4a17      	ldr	r2, [pc, #92]	; (8002830 <TP_Read_Coordinates+0x180>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	09db      	lsrs	r3, r3, #7
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b0f      	subs	r3, #15
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027e6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8002820 <TP_Read_Coordinates+0x170>
 80027ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3302      	adds	r3, #2
 80027f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80027f6:	ee17 2a90 	vmov	r2, s15
 80027fa:	b292      	uxth	r2, r2
 80027fc:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 80027fe:	2301      	movs	r3, #1
 8002800:	e007      	b.n	8002812 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3302      	adds	r3, #2
 800280c:	2200      	movs	r2, #0
 800280e:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8002810:	2300      	movs	r3, #0
		}
}
 8002812:	4618      	mov	r0, r3
 8002814:	3728      	adds	r7, #40	; 0x28
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	f3af 8000 	nop.w
 8002820:	28f5c28f 	.word	0x28f5c28f
 8002824:	3ff28f5c 	.word	0x3ff28f5c
 8002828:	40021000 	.word	0x40021000
 800282c:	e01e01e1 	.word	0xe01e01e1
 8002830:	a0a0a0a1 	.word	0xa0a0a0a1

08002834 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8002838:	2104      	movs	r1, #4
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <TP_Touchpad_Pressed+0x1c>)
 800283c:	f000 fb58 	bl	8002ef0 <HAL_GPIO_ReadPin>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 800284a:	2300      	movs	r3, #0
	}
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000

08002854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_Init+0x34>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_Init+0x34>)
 800285e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002862:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_Init+0x34>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a07      	ldr	r2, [pc, #28]	; (8002888 <HAL_Init+0x34>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002870:	2003      	movs	r0, #3
 8002872:	f000 f94f 	bl	8002b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002876:	2000      	movs	r0, #0
 8002878:	f000 f808 	bl	800288c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800287c:	f7fe fd46 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00

0800288c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_InitTick+0x54>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_InitTick+0x58>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f967 	bl	8002b7e <HAL_SYSTICK_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00e      	b.n	80028d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b0f      	cmp	r3, #15
 80028be:	d80a      	bhi.n	80028d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c0:	2200      	movs	r2, #0
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	f000 f92f 	bl	8002b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028cc:	4a06      	ldr	r2, [pc, #24]	; (80028e8 <HAL_InitTick+0x5c>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000000 	.word	0x20000000
 80028e4:	2000000c 	.word	0x2000000c
 80028e8:	20000008 	.word	0x20000008

080028ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_IncTick+0x20>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_IncTick+0x24>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <HAL_IncTick+0x24>)
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	2000000c 	.word	0x2000000c
 8002910:	20000330 	.word	0x20000330

08002914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return uwTick;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_GetTick+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000330 	.word	0x20000330

0800292c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff ffee 	bl	8002914 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d005      	beq.n	8002952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <HAL_Delay+0x44>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002952:	bf00      	nop
 8002954:	f7ff ffde 	bl	8002914 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	429a      	cmp	r2, r3
 8002962:	d8f7      	bhi.n	8002954 <HAL_Delay+0x28>
  {
  }
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	2000000c 	.word	0x2000000c

08002974 <__NVIC_SetPriorityGrouping>:
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <__NVIC_SetPriorityGrouping+0x40>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002990:	4013      	ands	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <__NVIC_SetPriorityGrouping+0x44>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a2:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <__NVIC_SetPriorityGrouping+0x40>)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	60d3      	str	r3, [r2, #12]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00
 80029b8:	05fa0000 	.word	0x05fa0000

080029bc <__NVIC_GetPriorityGrouping>:
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <__NVIC_GetPriorityGrouping+0x18>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	0a1b      	lsrs	r3, r3, #8
 80029c6:	f003 0307 	and.w	r3, r3, #7
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <__NVIC_EnableIRQ>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	db0b      	blt.n	8002a02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	f003 021f 	and.w	r2, r3, #31
 80029f0:	4907      	ldr	r1, [pc, #28]	; (8002a10 <__NVIC_EnableIRQ+0x38>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2001      	movs	r0, #1
 80029fa:	fa00 f202 	lsl.w	r2, r0, r2
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000e100 	.word	0xe000e100

08002a14 <__NVIC_SetPriority>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	6039      	str	r1, [r7, #0]
 8002a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	db0a      	blt.n	8002a3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	490c      	ldr	r1, [pc, #48]	; (8002a60 <__NVIC_SetPriority+0x4c>)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	0112      	lsls	r2, r2, #4
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	440b      	add	r3, r1
 8002a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a3c:	e00a      	b.n	8002a54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4908      	ldr	r1, [pc, #32]	; (8002a64 <__NVIC_SetPriority+0x50>)
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	3b04      	subs	r3, #4
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	440b      	add	r3, r1
 8002a52:	761a      	strb	r2, [r3, #24]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000e100 	.word	0xe000e100
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <NVIC_EncodePriority>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f1c3 0307 	rsb	r3, r3, #7
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	bf28      	it	cs
 8002a86:	2304      	movcs	r3, #4
 8002a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d902      	bls.n	8002a98 <NVIC_EncodePriority+0x30>
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3b03      	subs	r3, #3
 8002a96:	e000      	b.n	8002a9a <NVIC_EncodePriority+0x32>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	401a      	ands	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	43d9      	mvns	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac0:	4313      	orrs	r3, r2
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3724      	adds	r7, #36	; 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae0:	d301      	bcc.n	8002ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e00f      	b.n	8002b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <SysTick_Config+0x40>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aee:	210f      	movs	r1, #15
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	f7ff ff8e 	bl	8002a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <SysTick_Config+0x40>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002afe:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <SysTick_Config+0x40>)
 8002b00:	2207      	movs	r2, #7
 8002b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	e000e010 	.word	0xe000e010

08002b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff ff29 	bl	8002974 <__NVIC_SetPriorityGrouping>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b3c:	f7ff ff3e 	bl	80029bc <__NVIC_GetPriorityGrouping>
 8002b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	6978      	ldr	r0, [r7, #20]
 8002b48:	f7ff ff8e 	bl	8002a68 <NVIC_EncodePriority>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ff5d 	bl	8002a14 <__NVIC_SetPriority>
}
 8002b5a:	bf00      	nop
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	4603      	mov	r3, r0
 8002b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff31 	bl	80029d8 <__NVIC_EnableIRQ>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff ffa2 	bl	8002ad0 <SysTick_Config>
 8002b8c:	4603      	mov	r3, r0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	e175      	b.n	8002ea4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bb8:	2201      	movs	r2, #1
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	f040 8164 	bne.w	8002e9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d005      	beq.n	8002bee <HAL_GPIO_Init+0x56>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d130      	bne.n	8002c50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c24:	2201      	movs	r2, #1
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 0201 	and.w	r2, r3, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d017      	beq.n	8002c8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2203      	movs	r2, #3
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d123      	bne.n	8002ce0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	08da      	lsrs	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3208      	adds	r2, #8
 8002ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	220f      	movs	r2, #15
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	08da      	lsrs	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3208      	adds	r2, #8
 8002cda:	69b9      	ldr	r1, [r7, #24]
 8002cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	2203      	movs	r2, #3
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0203 	and.w	r2, r3, #3
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80be 	beq.w	8002e9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d22:	4b66      	ldr	r3, [pc, #408]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	4a65      	ldr	r2, [pc, #404]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2e:	4b63      	ldr	r3, [pc, #396]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d3a:	4a61      	ldr	r2, [pc, #388]	; (8002ec0 <HAL_GPIO_Init+0x328>)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	3302      	adds	r3, #2
 8002d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <HAL_GPIO_Init+0x32c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d037      	beq.n	8002dd6 <HAL_GPIO_Init+0x23e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a57      	ldr	r2, [pc, #348]	; (8002ec8 <HAL_GPIO_Init+0x330>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d031      	beq.n	8002dd2 <HAL_GPIO_Init+0x23a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a56      	ldr	r2, [pc, #344]	; (8002ecc <HAL_GPIO_Init+0x334>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d02b      	beq.n	8002dce <HAL_GPIO_Init+0x236>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a55      	ldr	r2, [pc, #340]	; (8002ed0 <HAL_GPIO_Init+0x338>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d025      	beq.n	8002dca <HAL_GPIO_Init+0x232>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a54      	ldr	r2, [pc, #336]	; (8002ed4 <HAL_GPIO_Init+0x33c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d01f      	beq.n	8002dc6 <HAL_GPIO_Init+0x22e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a53      	ldr	r2, [pc, #332]	; (8002ed8 <HAL_GPIO_Init+0x340>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d019      	beq.n	8002dc2 <HAL_GPIO_Init+0x22a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a52      	ldr	r2, [pc, #328]	; (8002edc <HAL_GPIO_Init+0x344>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_GPIO_Init+0x226>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a51      	ldr	r2, [pc, #324]	; (8002ee0 <HAL_GPIO_Init+0x348>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00d      	beq.n	8002dba <HAL_GPIO_Init+0x222>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a50      	ldr	r2, [pc, #320]	; (8002ee4 <HAL_GPIO_Init+0x34c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <HAL_GPIO_Init+0x21e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4f      	ldr	r2, [pc, #316]	; (8002ee8 <HAL_GPIO_Init+0x350>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_GPIO_Init+0x21a>
 8002dae:	2309      	movs	r3, #9
 8002db0:	e012      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002db2:	230a      	movs	r3, #10
 8002db4:	e010      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002db6:	2308      	movs	r3, #8
 8002db8:	e00e      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dba:	2307      	movs	r3, #7
 8002dbc:	e00c      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dbe:	2306      	movs	r3, #6
 8002dc0:	e00a      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dc2:	2305      	movs	r3, #5
 8002dc4:	e008      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	e006      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e004      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e002      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	f002 0203 	and.w	r2, r2, #3
 8002dde:	0092      	lsls	r2, r2, #2
 8002de0:	4093      	lsls	r3, r2
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002de8:	4935      	ldr	r1, [pc, #212]	; (8002ec0 <HAL_GPIO_Init+0x328>)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3302      	adds	r3, #2
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002df6:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <HAL_GPIO_Init+0x354>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e1a:	4a34      	ldr	r2, [pc, #208]	; (8002eec <HAL_GPIO_Init+0x354>)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e20:	4b32      	ldr	r3, [pc, #200]	; (8002eec <HAL_GPIO_Init+0x354>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e44:	4a29      	ldr	r2, [pc, #164]	; (8002eec <HAL_GPIO_Init+0x354>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e4a:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_GPIO_Init+0x354>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e6e:	4a1f      	ldr	r2, [pc, #124]	; (8002eec <HAL_GPIO_Init+0x354>)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e74:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <HAL_GPIO_Init+0x354>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e98:	4a14      	ldr	r2, [pc, #80]	; (8002eec <HAL_GPIO_Init+0x354>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b0f      	cmp	r3, #15
 8002ea8:	f67f ae86 	bls.w	8002bb8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002eac:	bf00      	nop
 8002eae:	bf00      	nop
 8002eb0:	3724      	adds	r7, #36	; 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	40020000 	.word	0x40020000
 8002ec8:	40020400 	.word	0x40020400
 8002ecc:	40020800 	.word	0x40020800
 8002ed0:	40020c00 	.word	0x40020c00
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40021400 	.word	0x40021400
 8002edc:	40021800 	.word	0x40021800
 8002ee0:	40021c00 	.word	0x40021c00
 8002ee4:	40022000 	.word	0x40022000
 8002ee8:	40022400 	.word	0x40022400
 8002eec:	40013c00 	.word	0x40013c00

08002ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	887b      	ldrh	r3, [r7, #2]
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	e001      	b.n	8002f12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f30:	787b      	ldrb	r3, [r7, #1]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f3c:	e003      	b.n	8002f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f3e:	887b      	ldrh	r3, [r7, #2]
 8002f40:	041a      	lsls	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	619a      	str	r2, [r3, #24]
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e07f      	b.n	8003066 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fd fbf0 	bl	8000760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2224      	movs	r2, #36	; 0x24
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fa4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d107      	bne.n	8002fce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	e006      	b.n	8002fdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d104      	bne.n	8002fee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_I2C_Init+0x11c>)
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800300c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69d9      	ldr	r1, [r3, #28]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1a      	ldr	r2, [r3, #32]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	02008000 	.word	0x02008000

08003074 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	461a      	mov	r2, r3
 8003080:	460b      	mov	r3, r1
 8003082:	817b      	strh	r3, [r7, #10]
 8003084:	4613      	mov	r3, r2
 8003086:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b20      	cmp	r3, #32
 8003092:	f040 80da 	bne.w	800324a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_I2C_Master_Transmit+0x30>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e0d3      	b.n	800324c <HAL_I2C_Master_Transmit+0x1d8>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030ac:	f7ff fc32 	bl	8002914 <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	2319      	movs	r3, #25
 80030b8:	2201      	movs	r2, #1
 80030ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f9e6 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0be      	b.n	800324c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2221      	movs	r2, #33	; 0x21
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2210      	movs	r2, #16
 80030da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	893a      	ldrh	r2, [r7, #8]
 80030ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2bff      	cmp	r3, #255	; 0xff
 80030fe:	d90e      	bls.n	800311e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	22ff      	movs	r2, #255	; 0xff
 8003104:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	b2da      	uxtb	r2, r3
 800310c:	8979      	ldrh	r1, [r7, #10]
 800310e:	4b51      	ldr	r3, [pc, #324]	; (8003254 <HAL_I2C_Master_Transmit+0x1e0>)
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fbd0 	bl	80038bc <I2C_TransferConfig>
 800311c:	e06c      	b.n	80031f8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	b2da      	uxtb	r2, r3
 800312e:	8979      	ldrh	r1, [r7, #10]
 8003130:	4b48      	ldr	r3, [pc, #288]	; (8003254 <HAL_I2C_Master_Transmit+0x1e0>)
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fbbf 	bl	80038bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800313e:	e05b      	b.n	80031f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	6a39      	ldr	r1, [r7, #32]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f9e3 	bl	8003510 <I2C_WaitOnTXISFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e07b      	b.n	800324c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	781a      	ldrb	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d034      	beq.n	80031f8 <HAL_I2C_Master_Transmit+0x184>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	2b00      	cmp	r3, #0
 8003194:	d130      	bne.n	80031f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	2200      	movs	r2, #0
 800319e:	2180      	movs	r1, #128	; 0x80
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f975 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e04d      	b.n	800324c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2bff      	cmp	r3, #255	; 0xff
 80031b8:	d90e      	bls.n	80031d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	22ff      	movs	r2, #255	; 0xff
 80031be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	8979      	ldrh	r1, [r7, #10]
 80031c8:	2300      	movs	r3, #0
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 fb73 	bl	80038bc <I2C_TransferConfig>
 80031d6:	e00f      	b.n	80031f8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	8979      	ldrh	r1, [r7, #10]
 80031ea:	2300      	movs	r3, #0
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fb62 	bl	80038bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d19e      	bne.n	8003140 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f9c2 	bl	8003590 <I2C_WaitOnSTOPFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e01a      	b.n	800324c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2220      	movs	r2, #32
 800321c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_I2C_Master_Transmit+0x1e4>)
 800322a:	400b      	ands	r3, r1
 800322c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e000      	b.n	800324c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800324a:	2302      	movs	r3, #2
  }
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	80002000 	.word	0x80002000
 8003258:	fe00e800 	.word	0xfe00e800

0800325c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	461a      	mov	r2, r3
 8003268:	460b      	mov	r3, r1
 800326a:	817b      	strh	r3, [r7, #10]
 800326c:	4613      	mov	r3, r2
 800326e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b20      	cmp	r3, #32
 800327a:	f040 80db 	bne.w	8003434 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_I2C_Master_Receive+0x30>
 8003288:	2302      	movs	r3, #2
 800328a:	e0d4      	b.n	8003436 <HAL_I2C_Master_Receive+0x1da>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003294:	f7ff fb3e 	bl	8002914 <HAL_GetTick>
 8003298:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2319      	movs	r3, #25
 80032a0:	2201      	movs	r2, #1
 80032a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f8f2 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e0bf      	b.n	8003436 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2222      	movs	r2, #34	; 0x22
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2210      	movs	r2, #16
 80032c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	893a      	ldrh	r2, [r7, #8]
 80032d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2bff      	cmp	r3, #255	; 0xff
 80032e6:	d90e      	bls.n	8003306 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	22ff      	movs	r2, #255	; 0xff
 80032ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	8979      	ldrh	r1, [r7, #10]
 80032f6:	4b52      	ldr	r3, [pc, #328]	; (8003440 <HAL_I2C_Master_Receive+0x1e4>)
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fadc 	bl	80038bc <I2C_TransferConfig>
 8003304:	e06d      	b.n	80033e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	b2da      	uxtb	r2, r3
 8003316:	8979      	ldrh	r1, [r7, #10]
 8003318:	4b49      	ldr	r3, [pc, #292]	; (8003440 <HAL_I2C_Master_Receive+0x1e4>)
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 facb 	bl	80038bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003326:	e05c      	b.n	80033e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	6a39      	ldr	r1, [r7, #32]
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f96b 	bl	8003608 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e07c      	b.n	8003436 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d034      	beq.n	80033e2 <HAL_I2C_Master_Receive+0x186>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	2b00      	cmp	r3, #0
 800337e:	d130      	bne.n	80033e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	2200      	movs	r2, #0
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f880 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e04d      	b.n	8003436 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2bff      	cmp	r3, #255	; 0xff
 80033a2:	d90e      	bls.n	80033c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	22ff      	movs	r2, #255	; 0xff
 80033a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	8979      	ldrh	r1, [r7, #10]
 80033b2:	2300      	movs	r3, #0
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 fa7e 	bl	80038bc <I2C_TransferConfig>
 80033c0:	e00f      	b.n	80033e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	8979      	ldrh	r1, [r7, #10]
 80033d4:	2300      	movs	r3, #0
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fa6d 	bl	80038bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d19d      	bne.n	8003328 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	6a39      	ldr	r1, [r7, #32]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f8cd 	bl	8003590 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e01a      	b.n	8003436 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2220      	movs	r2, #32
 8003406:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6859      	ldr	r1, [r3, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <HAL_I2C_Master_Receive+0x1e8>)
 8003414:	400b      	ands	r3, r1
 8003416:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	80002400 	.word	0x80002400
 8003444:	fe00e800 	.word	0xfe00e800

08003448 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b02      	cmp	r3, #2
 800345c:	d103      	bne.n	8003466 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2200      	movs	r2, #0
 8003464:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d007      	beq.n	8003484 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	619a      	str	r2, [r3, #24]
  }
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a0:	e022      	b.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d01e      	beq.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7ff fa33 	bl	8002914 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d113      	bne.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c4:	f043 0220 	orr.w	r2, r3, #32
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e00f      	b.n	8003508 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	429a      	cmp	r2, r3
 8003504:	d0cd      	beq.n	80034a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800351c:	e02c      	b.n	8003578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f8ea 	bl	80036fc <I2C_IsErrorOccurred>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e02a      	b.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d01e      	beq.n	8003578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7ff f9eb 	bl	8002914 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d113      	bne.n	8003578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e007      	b.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b02      	cmp	r3, #2
 8003584:	d1cb      	bne.n	800351e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800359c:	e028      	b.n	80035f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f8aa 	bl	80036fc <I2C_IsErrorOccurred>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e026      	b.n	8003600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7ff f9af 	bl	8002914 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d113      	bne.n	80035f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e007      	b.n	8003600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d1cf      	bne.n	800359e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003614:	e064      	b.n	80036e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f86e 	bl	80036fc <I2C_IsErrorOccurred>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e062      	b.n	80036f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b20      	cmp	r3, #32
 8003636:	d138      	bne.n	80036aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b04      	cmp	r3, #4
 8003644:	d105      	bne.n	8003652 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	e04e      	b.n	80036f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b10      	cmp	r3, #16
 800365e:	d107      	bne.n	8003670 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2210      	movs	r2, #16
 8003666:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2204      	movs	r2, #4
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
 800366e:	e002      	b.n	8003676 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2220      	movs	r2, #32
 800367c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800368a:	400b      	ands	r3, r1
 800368c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e022      	b.n	80036f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7ff f933 	bl	8002914 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	f043 0220 	orr.w	r2, r3, #32
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e007      	b.n	80036f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d193      	bne.n	8003616 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	fe00e800 	.word	0xfe00e800

080036fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	; 0x28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	d068      	beq.n	80037fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2210      	movs	r2, #16
 800372e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003730:	e049      	b.n	80037c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d045      	beq.n	80037c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800373a:	f7ff f8eb 	bl	8002914 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	429a      	cmp	r2, r3
 8003748:	d302      	bcc.n	8003750 <I2C_IsErrorOccurred+0x54>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d13a      	bne.n	80037c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003762:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003772:	d121      	bne.n	80037b8 <I2C_IsErrorOccurred+0xbc>
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800377a:	d01d      	beq.n	80037b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	2b20      	cmp	r3, #32
 8003780:	d01a      	beq.n	80037b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003790:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003792:	f7ff f8bf 	bl	8002914 <HAL_GetTick>
 8003796:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003798:	e00e      	b.n	80037b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800379a:	f7ff f8bb 	bl	8002914 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b19      	cmp	r3, #25
 80037a6:	d907      	bls.n	80037b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	f043 0320 	orr.w	r3, r3, #32
 80037ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80037b6:	e006      	b.n	80037c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d1e9      	bne.n	800379a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d003      	beq.n	80037dc <I2C_IsErrorOccurred+0xe0>
 80037d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0aa      	beq.n	8003732 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2220      	movs	r2, #32
 80037ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	f043 0304 	orr.w	r3, r3, #4
 80037f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800381c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	f043 0308 	orr.w	r3, r3, #8
 8003834:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800383e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	f043 0302 	orr.w	r3, r3, #2
 8003856:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003860:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01c      	beq.n	80038aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f7ff fde9 	bl	8003448 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <I2C_IsErrorOccurred+0x1bc>)
 8003882:	400b      	ands	r3, r1
 8003884:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	431a      	orrs	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80038aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3728      	adds	r7, #40	; 0x28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	fe00e800 	.word	0xfe00e800

080038bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	817b      	strh	r3, [r7, #10]
 80038ca:	4613      	mov	r3, r2
 80038cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ce:	897b      	ldrh	r3, [r7, #10]
 80038d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038d4:	7a7b      	ldrb	r3, [r7, #9]
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	0d5b      	lsrs	r3, r3, #21
 80038f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <I2C_TransferConfig+0x60>)
 80038fc:	430b      	orrs	r3, r1
 80038fe:	43db      	mvns	r3, r3
 8003900:	ea02 0103 	and.w	r1, r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	03ff63ff 	.word	0x03ff63ff

08003920 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b20      	cmp	r3, #32
 8003934:	d138      	bne.n	80039a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003940:	2302      	movs	r3, #2
 8003942:	e032      	b.n	80039aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2224      	movs	r2, #36	; 0x24
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003972:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d139      	bne.n	8003a40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e033      	b.n	8003a42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2224      	movs	r2, #36	; 0x24
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a5a:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	4a22      	ldr	r2, [pc, #136]	; (8003ae8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6413      	str	r3, [r2, #64]	; 0x40
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a72:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a7e:	f7fe ff49 	bl	8002914 <HAL_GetTick>
 8003a82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a84:	e009      	b.n	8003a9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a86:	f7fe ff45 	bl	8002914 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a94:	d901      	bls.n	8003a9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e022      	b.n	8003ae0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa6:	d1ee      	bne.n	8003a86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ab4:	f7fe ff2e 	bl	8002914 <HAL_GetTick>
 8003ab8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003aba:	e009      	b.n	8003ad0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003abc:	f7fe ff2a 	bl	8002914 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aca:	d901      	bls.n	8003ad0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e007      	b.n	8003ae0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003adc:	d1ee      	bne.n	8003abc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40007000 	.word	0x40007000

08003af0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003af8:	2300      	movs	r3, #0
 8003afa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e29b      	b.n	800403e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8087 	beq.w	8003c22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b14:	4b96      	ldr	r3, [pc, #600]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d00c      	beq.n	8003b3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b20:	4b93      	ldr	r3, [pc, #588]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d112      	bne.n	8003b52 <HAL_RCC_OscConfig+0x62>
 8003b2c:	4b90      	ldr	r3, [pc, #576]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b38:	d10b      	bne.n	8003b52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3a:	4b8d      	ldr	r3, [pc, #564]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d06c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x130>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d168      	bne.n	8003c20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e275      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCC_OscConfig+0x7a>
 8003b5c:	4b84      	ldr	r3, [pc, #528]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a83      	ldr	r2, [pc, #524]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	e02e      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x9c>
 8003b72:	4b7f      	ldr	r3, [pc, #508]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a7e      	ldr	r2, [pc, #504]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b7c      	ldr	r3, [pc, #496]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a7b      	ldr	r2, [pc, #492]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e01d      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0xc0>
 8003b96:	4b76      	ldr	r3, [pc, #472]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a75      	ldr	r2, [pc, #468]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4b73      	ldr	r3, [pc, #460]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a72      	ldr	r2, [pc, #456]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd8>
 8003bb0:	4b6f      	ldr	r3, [pc, #444]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6e      	ldr	r2, [pc, #440]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	4b6c      	ldr	r3, [pc, #432]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a6b      	ldr	r2, [pc, #428]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d013      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fea0 	bl	8002914 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fe fe9c 	bl	8002914 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2bc8      	cmp	r3, #200	; 0xc8
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e229      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0xe8>
 8003bf6:	e014      	b.n	8003c22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fe8c 	bl	8002914 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fe fe88 	bl	8002914 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2bc8      	cmp	r3, #200	; 0xc8
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e215      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c12:	4b57      	ldr	r3, [pc, #348]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x110>
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d069      	beq.n	8003d02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c2e:	4b50      	ldr	r3, [pc, #320]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3a:	4b4d      	ldr	r3, [pc, #308]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d11c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x190>
 8003c46:	4b4a      	ldr	r3, [pc, #296]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d116      	bne.n	8003c80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_RCC_OscConfig+0x17a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d001      	beq.n	8003c6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e1e9      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6a:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	493d      	ldr	r1, [pc, #244]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7e:	e040      	b.n	8003d02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d023      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c88:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a38      	ldr	r2, [pc, #224]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fe fe3e 	bl	8002914 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9c:	f7fe fe3a 	bl	8002914 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e1c7      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cae:	4b30      	ldr	r3, [pc, #192]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cba:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4929      	ldr	r1, [pc, #164]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]
 8003cce:	e018      	b.n	8003d02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a26      	ldr	r2, [pc, #152]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fe fe1a 	bl	8002914 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce4:	f7fe fe16 	bl	8002914 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e1a3      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf6:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d038      	beq.n	8003d80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d019      	beq.n	8003d4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d16:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1a:	4a15      	ldr	r2, [pc, #84]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d22:	f7fe fdf7 	bl	8002914 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d2a:	f7fe fdf3 	bl	8002914 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e180      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x23a>
 8003d48:	e01a      	b.n	8003d80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d56:	f7fe fddd 	bl	8002914 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5c:	e00a      	b.n	8003d74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5e:	f7fe fdd9 	bl	8002914 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d903      	bls.n	8003d74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e166      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
 8003d70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	4b92      	ldr	r3, [pc, #584]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ee      	bne.n	8003d5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80a4 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b8c      	ldr	r3, [pc, #560]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	4b89      	ldr	r3, [pc, #548]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a88      	ldr	r2, [pc, #544]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b86      	ldr	r3, [pc, #536]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db2:	2301      	movs	r3, #1
 8003db4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db6:	4b83      	ldr	r3, [pc, #524]	; (8003fc4 <HAL_RCC_OscConfig+0x4d4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d118      	bne.n	8003df4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003dc2:	4b80      	ldr	r3, [pc, #512]	; (8003fc4 <HAL_RCC_OscConfig+0x4d4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7f      	ldr	r2, [pc, #508]	; (8003fc4 <HAL_RCC_OscConfig+0x4d4>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dce:	f7fe fda1 	bl	8002914 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd6:	f7fe fd9d 	bl	8002914 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b64      	cmp	r3, #100	; 0x64
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e12a      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de8:	4b76      	ldr	r3, [pc, #472]	; (8003fc4 <HAL_RCC_OscConfig+0x4d4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCC_OscConfig+0x31a>
 8003dfc:	4b70      	ldr	r3, [pc, #448]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a6f      	ldr	r2, [pc, #444]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
 8003e08:	e02d      	b.n	8003e66 <HAL_RCC_OscConfig+0x376>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x33c>
 8003e12:	4b6b      	ldr	r3, [pc, #428]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4a6a      	ldr	r2, [pc, #424]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1e:	4b68      	ldr	r3, [pc, #416]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a67      	ldr	r2, [pc, #412]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e24:	f023 0304 	bic.w	r3, r3, #4
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	e01c      	b.n	8003e66 <HAL_RCC_OscConfig+0x376>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCC_OscConfig+0x35e>
 8003e34:	4b62      	ldr	r3, [pc, #392]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	4a61      	ldr	r2, [pc, #388]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e3a:	f043 0304 	orr.w	r3, r3, #4
 8003e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e40:	4b5f      	ldr	r3, [pc, #380]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	4a5e      	ldr	r2, [pc, #376]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4c:	e00b      	b.n	8003e66 <HAL_RCC_OscConfig+0x376>
 8003e4e:	4b5c      	ldr	r3, [pc, #368]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4a5b      	ldr	r2, [pc, #364]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5a:	4b59      	ldr	r3, [pc, #356]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a58      	ldr	r2, [pc, #352]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d015      	beq.n	8003e9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fe fd51 	bl	8002914 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fe fd4d 	bl	8002914 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0d8      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8c:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ee      	beq.n	8003e76 <HAL_RCC_OscConfig+0x386>
 8003e98:	e014      	b.n	8003ec4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9a:	f7fe fd3b 	bl	8002914 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7fe fd37 	bl	8002914 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e0c2      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb8:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ee      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eca:	4b3d      	ldr	r3, [pc, #244]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a3c      	ldr	r2, [pc, #240]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80ae 	beq.w	800403c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ee0:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d06d      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d14b      	bne.n	8003f8c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef4:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a31      	ldr	r2, [pc, #196]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe fd08 	bl	8002914 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fe fd04 	bl	8002914 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e091      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	4b29      	ldr	r3, [pc, #164]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	061b      	lsls	r3, r3, #24
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	071b      	lsls	r3, r3, #28
 8003f52:	491b      	ldr	r1, [pc, #108]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f58:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fe fcd6 	bl	8002914 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7fe fcd2 	bl	8002914 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e05f      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x47c>
 8003f8a:	e057      	b.n	800403c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fe fcbc 	bl	8002914 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fe fcb8 	bl	8002914 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e045      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4b0>
 8003fbe:	e03d      	b.n	800403c <HAL_RCC_OscConfig+0x54c>
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <HAL_RCC_OscConfig+0x558>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d030      	beq.n	8004038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d129      	bne.n	8004038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d122      	bne.n	8004038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ffe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004000:	4293      	cmp	r3, r2
 8004002:	d119      	bne.n	8004038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	3b01      	subs	r3, #1
 8004012:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d10f      	bne.n	8004038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d107      	bne.n	8004038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800

0800404c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0d0      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004064:	4b6a      	ldr	r3, [pc, #424]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d910      	bls.n	8004094 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b67      	ldr	r3, [pc, #412]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 020f 	bic.w	r2, r3, #15
 800407a:	4965      	ldr	r1, [pc, #404]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b63      	ldr	r3, [pc, #396]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0b8      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d020      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040ac:	4b59      	ldr	r3, [pc, #356]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	4a58      	ldr	r2, [pc, #352]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c4:	4b53      	ldr	r3, [pc, #332]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4a52      	ldr	r2, [pc, #328]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d0:	4b50      	ldr	r3, [pc, #320]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	494d      	ldr	r1, [pc, #308]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d040      	beq.n	8004170 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d107      	bne.n	8004106 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f6:	4b47      	ldr	r3, [pc, #284]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d115      	bne.n	800412e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e07f      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410e:	4b41      	ldr	r3, [pc, #260]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e073      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411e:	4b3d      	ldr	r3, [pc, #244]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e06b      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800412e:	4b39      	ldr	r3, [pc, #228]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f023 0203 	bic.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4936      	ldr	r1, [pc, #216]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 800413c:	4313      	orrs	r3, r2
 800413e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004140:	f7fe fbe8 	bl	8002914 <HAL_GetTick>
 8004144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004146:	e00a      	b.n	800415e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004148:	f7fe fbe4 	bl	8002914 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	; 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e053      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 020c 	and.w	r2, r3, #12
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	429a      	cmp	r2, r3
 800416e:	d1eb      	bne.n	8004148 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004170:	4b27      	ldr	r3, [pc, #156]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d210      	bcs.n	80041a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b24      	ldr	r3, [pc, #144]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 020f 	bic.w	r2, r3, #15
 8004186:	4922      	ldr	r1, [pc, #136]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b20      	ldr	r3, [pc, #128]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e032      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ac:	4b19      	ldr	r3, [pc, #100]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4916      	ldr	r1, [pc, #88]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	490e      	ldr	r1, [pc, #56]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041de:	f000 f821 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 80041e2:	4602      	mov	r2, r0
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	490a      	ldr	r1, [pc, #40]	; (8004218 <HAL_RCC_ClockConfig+0x1cc>)
 80041f0:	5ccb      	ldrb	r3, [r1, r3]
 80041f2:	fa22 f303 	lsr.w	r3, r2, r3
 80041f6:	4a09      	ldr	r2, [pc, #36]	; (800421c <HAL_RCC_ClockConfig+0x1d0>)
 80041f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041fa:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_RCC_ClockConfig+0x1d4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe fb44 	bl	800288c <HAL_InitTick>

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40023c00 	.word	0x40023c00
 8004214:	40023800 	.word	0x40023800
 8004218:	0802e130 	.word	0x0802e130
 800421c:	20000000 	.word	0x20000000
 8004220:	20000008 	.word	0x20000008

08004224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004228:	b090      	sub	sp, #64	; 0x40
 800422a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	637b      	str	r3, [r7, #52]	; 0x34
 8004230:	2300      	movs	r3, #0
 8004232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004234:	2300      	movs	r3, #0
 8004236:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800423c:	4b59      	ldr	r3, [pc, #356]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 030c 	and.w	r3, r3, #12
 8004244:	2b08      	cmp	r3, #8
 8004246:	d00d      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x40>
 8004248:	2b08      	cmp	r3, #8
 800424a:	f200 80a1 	bhi.w	8004390 <HAL_RCC_GetSysClockFreq+0x16c>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <HAL_RCC_GetSysClockFreq+0x34>
 8004252:	2b04      	cmp	r3, #4
 8004254:	d003      	beq.n	800425e <HAL_RCC_GetSysClockFreq+0x3a>
 8004256:	e09b      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004258:	4b53      	ldr	r3, [pc, #332]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800425a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800425c:	e09b      	b.n	8004396 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800425e:	4b53      	ldr	r3, [pc, #332]	; (80043ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004262:	e098      	b.n	8004396 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004264:	4b4f      	ldr	r3, [pc, #316]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800426e:	4b4d      	ldr	r3, [pc, #308]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d028      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427a:	4b4a      	ldr	r3, [pc, #296]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	099b      	lsrs	r3, r3, #6
 8004280:	2200      	movs	r2, #0
 8004282:	623b      	str	r3, [r7, #32]
 8004284:	627a      	str	r2, [r7, #36]	; 0x24
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800428c:	2100      	movs	r1, #0
 800428e:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004290:	fb03 f201 	mul.w	r2, r3, r1
 8004294:	2300      	movs	r3, #0
 8004296:	fb00 f303 	mul.w	r3, r0, r3
 800429a:	4413      	add	r3, r2
 800429c:	4a43      	ldr	r2, [pc, #268]	; (80043ac <HAL_RCC_GetSysClockFreq+0x188>)
 800429e:	fba0 1202 	umull	r1, r2, r0, r2
 80042a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a4:	460a      	mov	r2, r1
 80042a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80042a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042aa:	4413      	add	r3, r2
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b0:	2200      	movs	r2, #0
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	61fa      	str	r2, [r7, #28]
 80042b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042be:	f7fc f817 	bl	80002f0 <__aeabi_uldivmod>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4613      	mov	r3, r2
 80042c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ca:	e053      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042cc:	4b35      	ldr	r3, [pc, #212]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	099b      	lsrs	r3, r3, #6
 80042d2:	2200      	movs	r2, #0
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	617a      	str	r2, [r7, #20]
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042de:	f04f 0b00 	mov.w	fp, #0
 80042e2:	4652      	mov	r2, sl
 80042e4:	465b      	mov	r3, fp
 80042e6:	f04f 0000 	mov.w	r0, #0
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	0159      	lsls	r1, r3, #5
 80042f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f4:	0150      	lsls	r0, r2, #5
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	ebb2 080a 	subs.w	r8, r2, sl
 80042fe:	eb63 090b 	sbc.w	r9, r3, fp
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800430e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004312:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004316:	ebb2 0408 	subs.w	r4, r2, r8
 800431a:	eb63 0509 	sbc.w	r5, r3, r9
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	00eb      	lsls	r3, r5, #3
 8004328:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800432c:	00e2      	lsls	r2, r4, #3
 800432e:	4614      	mov	r4, r2
 8004330:	461d      	mov	r5, r3
 8004332:	eb14 030a 	adds.w	r3, r4, sl
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	eb45 030b 	adc.w	r3, r5, fp
 800433c:	607b      	str	r3, [r7, #4]
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	e9d7 4500 	ldrd	r4, r5, [r7]
 800434a:	4629      	mov	r1, r5
 800434c:	028b      	lsls	r3, r1, #10
 800434e:	4621      	mov	r1, r4
 8004350:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004354:	4621      	mov	r1, r4
 8004356:	028a      	lsls	r2, r1, #10
 8004358:	4610      	mov	r0, r2
 800435a:	4619      	mov	r1, r3
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435e:	2200      	movs	r2, #0
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	60fa      	str	r2, [r7, #12]
 8004364:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004368:	f7fb ffc2 	bl	80002f0 <__aeabi_uldivmod>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4613      	mov	r3, r2
 8004372:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	3301      	adds	r3, #1
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800438e:	e002      	b.n	8004396 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004392:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004398:	4618      	mov	r0, r3
 800439a:	3740      	adds	r7, #64	; 0x40
 800439c:	46bd      	mov	sp, r7
 800439e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	00f42400 	.word	0x00f42400
 80043ac:	0bebc200 	.word	0x0bebc200

080043b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d012      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043d8:	4b69      	ldr	r3, [pc, #420]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4a68      	ldr	r2, [pc, #416]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043e2:	6093      	str	r3, [r2, #8]
 80043e4:	4b66      	ldr	r3, [pc, #408]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ec:	4964      	ldr	r1, [pc, #400]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d017      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800440a:	4b5d      	ldr	r3, [pc, #372]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	4959      	ldr	r1, [pc, #356]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004428:	d101      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800442a:	2301      	movs	r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004436:	2301      	movs	r3, #1
 8004438:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d017      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004446:	4b4e      	ldr	r3, [pc, #312]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800444c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	494a      	ldr	r1, [pc, #296]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004464:	d101      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004472:	2301      	movs	r3, #1
 8004474:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004482:	2301      	movs	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 808b 	beq.w	80045aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004494:	4b3a      	ldr	r3, [pc, #232]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	4a39      	ldr	r2, [pc, #228]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449e:	6413      	str	r3, [r2, #64]	; 0x40
 80044a0:	4b37      	ldr	r3, [pc, #220]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044ac:	4b35      	ldr	r3, [pc, #212]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a34      	ldr	r2, [pc, #208]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b8:	f7fe fa2c 	bl	8002914 <HAL_GetTick>
 80044bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c0:	f7fe fa28 	bl	8002914 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b64      	cmp	r3, #100	; 0x64
 80044cc:	d901      	bls.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e38f      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044d2:	4b2c      	ldr	r3, [pc, #176]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044de:	4b28      	ldr	r3, [pc, #160]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d035      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d02e      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044fc:	4b20      	ldr	r3, [pc, #128]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004506:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	4a1d      	ldr	r2, [pc, #116]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004510:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004512:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a1a      	ldr	r2, [pc, #104]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800451e:	4a18      	ldr	r2, [pc, #96]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004524:	4b16      	ldr	r3, [pc, #88]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b01      	cmp	r3, #1
 800452e:	d114      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fe f9f0 	bl	8002914 <HAL_GetTick>
 8004534:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004536:	e00a      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004538:	f7fe f9ec 	bl	8002914 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	; 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e351      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0ee      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004566:	d111      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004576:	400b      	ands	r3, r1
 8004578:	4901      	ldr	r1, [pc, #4]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
 800457e:	e00b      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004580:	40023800 	.word	0x40023800
 8004584:	40007000 	.word	0x40007000
 8004588:	0ffffcff 	.word	0x0ffffcff
 800458c:	4bac      	ldr	r3, [pc, #688]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4aab      	ldr	r2, [pc, #684]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004592:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004596:	6093      	str	r3, [r2, #8]
 8004598:	4ba9      	ldr	r3, [pc, #676]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a4:	49a6      	ldr	r1, [pc, #664]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d010      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045b6:	4ba2      	ldr	r3, [pc, #648]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045bc:	4aa0      	ldr	r2, [pc, #640]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045c6:	4b9e      	ldr	r3, [pc, #632]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	499b      	ldr	r1, [pc, #620]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045e4:	4b96      	ldr	r3, [pc, #600]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045f2:	4993      	ldr	r1, [pc, #588]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004606:	4b8e      	ldr	r3, [pc, #568]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004614:	498a      	ldr	r1, [pc, #552]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004628:	4b85      	ldr	r3, [pc, #532]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004636:	4982      	ldr	r1, [pc, #520]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800464a:	4b7d      	ldr	r3, [pc, #500]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004650:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	4979      	ldr	r1, [pc, #484]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800466c:	4b74      	ldr	r3, [pc, #464]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f023 0203 	bic.w	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	4971      	ldr	r1, [pc, #452]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800468e:	4b6c      	ldr	r3, [pc, #432]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	f023 020c 	bic.w	r2, r3, #12
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469c:	4968      	ldr	r1, [pc, #416]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046b0:	4b63      	ldr	r3, [pc, #396]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046be:	4960      	ldr	r1, [pc, #384]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046d2:	4b5b      	ldr	r3, [pc, #364]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e0:	4957      	ldr	r1, [pc, #348]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046f4:	4b52      	ldr	r3, [pc, #328]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004702:	494f      	ldr	r1, [pc, #316]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004716:	4b4a      	ldr	r3, [pc, #296]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	4946      	ldr	r1, [pc, #280]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004738:	4b41      	ldr	r3, [pc, #260]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004746:	493e      	ldr	r1, [pc, #248]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800475a:	4b39      	ldr	r3, [pc, #228]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004760:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004768:	4935      	ldr	r1, [pc, #212]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800477c:	4b30      	ldr	r3, [pc, #192]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478a:	492d      	ldr	r1, [pc, #180]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d011      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800479e:	4b28      	ldr	r3, [pc, #160]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ac:	4924      	ldr	r1, [pc, #144]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047bc:	d101      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047be:	2301      	movs	r3, #1
 80047c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047ce:	2301      	movs	r3, #1
 80047d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047de:	4b18      	ldr	r3, [pc, #96]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ec:	4914      	ldr	r1, [pc, #80]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004800:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004810:	490b      	ldr	r1, [pc, #44]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00f      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004834:	4902      	ldr	r1, [pc, #8]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800483c:	e002      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800483e:	bf00      	nop
 8004840:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004850:	4b8a      	ldr	r3, [pc, #552]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004856:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	4986      	ldr	r1, [pc, #536]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004874:	4b81      	ldr	r3, [pc, #516]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800487a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004884:	497d      	ldr	r1, [pc, #500]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d006      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 80d6 	beq.w	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048a0:	4b76      	ldr	r3, [pc, #472]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a75      	ldr	r2, [pc, #468]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ac:	f7fe f832 	bl	8002914 <HAL_GetTick>
 80048b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048b4:	f7fe f82e 	bl	8002914 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b64      	cmp	r3, #100	; 0x64
 80048c0:	d901      	bls.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e195      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048c6:	4b6d      	ldr	r3, [pc, #436]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d021      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d11d      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048e6:	4b65      	ldr	r3, [pc, #404]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ec:	0c1b      	lsrs	r3, r3, #16
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048f4:	4b61      	ldr	r3, [pc, #388]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fa:	0e1b      	lsrs	r3, r3, #24
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	019a      	lsls	r2, r3, #6
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	041b      	lsls	r3, r3, #16
 800490c:	431a      	orrs	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	061b      	lsls	r3, r3, #24
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	071b      	lsls	r3, r3, #28
 800491a:	4958      	ldr	r1, [pc, #352]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d004      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004936:	d00a      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004940:	2b00      	cmp	r3, #0
 8004942:	d02e      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800494c:	d129      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800494e:	4b4b      	ldr	r3, [pc, #300]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800495c:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800495e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004962:	0f1b      	lsrs	r3, r3, #28
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	019a      	lsls	r2, r3, #6
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	061b      	lsls	r3, r3, #24
 800497c:	431a      	orrs	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	071b      	lsls	r3, r3, #28
 8004982:	493e      	ldr	r1, [pc, #248]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800498a:	4b3c      	ldr	r3, [pc, #240]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004990:	f023 021f 	bic.w	r2, r3, #31
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	3b01      	subs	r3, #1
 800499a:	4938      	ldr	r1, [pc, #224]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01d      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049ae:	4b33      	ldr	r3, [pc, #204]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b4:	0e1b      	lsrs	r3, r3, #24
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049bc:	4b2f      	ldr	r3, [pc, #188]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c2:	0f1b      	lsrs	r3, r3, #28
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	019a      	lsls	r2, r3, #6
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	431a      	orrs	r2, r3
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	061b      	lsls	r3, r3, #24
 80049dc:	431a      	orrs	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	071b      	lsls	r3, r3, #28
 80049e2:	4926      	ldr	r1, [pc, #152]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d011      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	019a      	lsls	r2, r3, #6
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	061b      	lsls	r3, r3, #24
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	071b      	lsls	r3, r3, #28
 8004a12:	491a      	ldr	r1, [pc, #104]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a1a:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a17      	ldr	r2, [pc, #92]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a26:	f7fd ff75 	bl	8002914 <HAL_GetTick>
 8004a2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a2e:	f7fd ff71 	bl	8002914 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b64      	cmp	r3, #100	; 0x64
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e0d8      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a40:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	f040 80ce 	bne.w	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a54:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a60:	f7fd ff58 	bl	8002914 <HAL_GetTick>
 8004a64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a66:	e00b      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a68:	f7fd ff54 	bl	8002914 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b64      	cmp	r3, #100	; 0x64
 8004a74:	d904      	bls.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e0bb      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a80:	4b5e      	ldr	r3, [pc, #376]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a8c:	d0ec      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d02e      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d12a      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ab6:	4b51      	ldr	r3, [pc, #324]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	0c1b      	lsrs	r3, r3, #16
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ac4:	4b4d      	ldr	r3, [pc, #308]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	0f1b      	lsrs	r3, r3, #28
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	019a      	lsls	r2, r3, #6
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	061b      	lsls	r3, r3, #24
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	071b      	lsls	r3, r3, #28
 8004aea:	4944      	ldr	r1, [pc, #272]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004af2:	4b42      	ldr	r3, [pc, #264]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	3b01      	subs	r3, #1
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	493d      	ldr	r1, [pc, #244]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d022      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b20:	d11d      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b22:	4b36      	ldr	r3, [pc, #216]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	0e1b      	lsrs	r3, r3, #24
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b30:	4b32      	ldr	r3, [pc, #200]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	0f1b      	lsrs	r3, r3, #28
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	019a      	lsls	r2, r3, #6
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	061b      	lsls	r3, r3, #24
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	071b      	lsls	r3, r3, #28
 8004b56:	4929      	ldr	r1, [pc, #164]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d028      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b6a:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	0e1b      	lsrs	r3, r3, #24
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b78:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	0c1b      	lsrs	r3, r3, #16
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	019a      	lsls	r2, r3, #6
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	431a      	orrs	r2, r3
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	071b      	lsls	r3, r3, #28
 8004b9e:	4917      	ldr	r1, [pc, #92]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	4911      	ldr	r1, [pc, #68]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a0e      	ldr	r2, [pc, #56]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc8:	f7fd fea4 	bl	8002914 <HAL_GetTick>
 8004bcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bd0:	f7fd fea0 	bl	8002914 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e007      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bee:	d1ef      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40023800 	.word	0x40023800

08004c00 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e01c      	b.n	8004c4c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	795b      	ldrb	r3, [r3, #5]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d105      	bne.n	8004c28 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fc fabc 	bl	80011a0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0204 	orr.w	r2, r2, #4
 8004c3c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e09d      	b.n	8004da2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d108      	bne.n	8004c80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c76:	d009      	beq.n	8004c8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	61da      	str	r2, [r3, #28]
 8004c7e:	e005      	b.n	8004c8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc faec 	bl	8001284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ccc:	d902      	bls.n	8004cd4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	e002      	b.n	8004cda <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cd8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ce2:	d007      	beq.n	8004cf4 <HAL_SPI_Init+0xa0>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cec:	d002      	beq.n	8004cf4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	ea42 0103 	orr.w	r1, r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	0c1b      	lsrs	r3, r3, #16
 8004d50:	f003 0204 	and.w	r2, r3, #4
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d70:	ea42 0103 	orr.w	r1, r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b088      	sub	sp, #32
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	603b      	str	r3, [r7, #0]
 8004db6:	4613      	mov	r3, r2
 8004db8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_SPI_Transmit+0x22>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e158      	b.n	800507e <HAL_SPI_Transmit+0x2d4>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dd4:	f7fd fd9e 	bl	8002914 <HAL_GetTick>
 8004dd8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d002      	beq.n	8004df0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004dea:	2302      	movs	r3, #2
 8004dec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dee:	e13d      	b.n	800506c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_SPI_Transmit+0x52>
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d102      	bne.n	8004e02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e00:	e134      	b.n	800506c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2203      	movs	r2, #3
 8004e06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	88fa      	ldrh	r2, [r7, #6]
 8004e1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	88fa      	ldrh	r2, [r7, #6]
 8004e20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4c:	d10f      	bne.n	8004e6e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	d007      	beq.n	8004e8c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e94:	d94b      	bls.n	8004f2e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_SPI_Transmit+0xfa>
 8004e9e:	8afb      	ldrh	r3, [r7, #22]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d13e      	bne.n	8004f22 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	881a      	ldrh	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	1c9a      	adds	r2, r3, #2
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ec8:	e02b      	b.n	8004f22 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d112      	bne.n	8004efe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	881a      	ldrh	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	1c9a      	adds	r2, r3, #2
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004efc:	e011      	b.n	8004f22 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004efe:	f7fd fd09 	bl	8002914 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d803      	bhi.n	8004f16 <HAL_SPI_Transmit+0x16c>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f14:	d102      	bne.n	8004f1c <HAL_SPI_Transmit+0x172>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d102      	bne.n	8004f22 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f20:	e0a4      	b.n	800506c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1ce      	bne.n	8004eca <HAL_SPI_Transmit+0x120>
 8004f2c:	e07c      	b.n	8005028 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <HAL_SPI_Transmit+0x192>
 8004f36:	8afb      	ldrh	r3, [r7, #22]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d170      	bne.n	800501e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d912      	bls.n	8004f6c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	881a      	ldrh	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	1c9a      	adds	r2, r3, #2
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b02      	subs	r3, #2
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f6a:	e058      	b.n	800501e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	7812      	ldrb	r2, [r2, #0]
 8004f78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f92:	e044      	b.n	800501e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d12b      	bne.n	8004ffa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d912      	bls.n	8004fd2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	881a      	ldrh	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	1c9a      	adds	r2, r3, #2
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b02      	subs	r3, #2
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fd0:	e025      	b.n	800501e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	330c      	adds	r3, #12
 8004fdc:	7812      	ldrb	r2, [r2, #0]
 8004fde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ff8:	e011      	b.n	800501e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ffa:	f7fd fc8b 	bl	8002914 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d803      	bhi.n	8005012 <HAL_SPI_Transmit+0x268>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d102      	bne.n	8005018 <HAL_SPI_Transmit+0x26e>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d102      	bne.n	800501e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800501c:	e026      	b.n	800506c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1b5      	bne.n	8004f94 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f949 	bl	80052c4 <SPI_EndRxTxTransaction>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005046:	2300      	movs	r3, #0
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e000      	b.n	800506c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800506a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800507c:	7ffb      	ldrb	r3, [r7, #31]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	4613      	mov	r3, r2
 8005096:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005098:	f7fd fc3c 	bl	8002914 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	4413      	add	r3, r2
 80050a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050a8:	f7fd fc34 	bl	8002914 <HAL_GetTick>
 80050ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050ae:	4b39      	ldr	r3, [pc, #228]	; (8005194 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	015b      	lsls	r3, r3, #5
 80050b4:	0d1b      	lsrs	r3, r3, #20
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	fb02 f303 	mul.w	r3, r2, r3
 80050bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050be:	e054      	b.n	800516a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c6:	d050      	beq.n	800516a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050c8:	f7fd fc24 	bl	8002914 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d902      	bls.n	80050de <SPI_WaitFlagStateUntilTimeout+0x56>
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d13d      	bne.n	800515a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050f6:	d111      	bne.n	800511c <SPI_WaitFlagStateUntilTimeout+0x94>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005100:	d004      	beq.n	800510c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800510a:	d107      	bne.n	800511c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800511a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005124:	d10f      	bne.n	8005146 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e017      	b.n	800518a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	3b01      	subs	r3, #1
 8005168:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4013      	ands	r3, r2
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	429a      	cmp	r2, r3
 8005178:	bf0c      	ite	eq
 800517a:	2301      	moveq	r3, #1
 800517c:	2300      	movne	r3, #0
 800517e:	b2db      	uxtb	r3, r3
 8005180:	461a      	mov	r2, r3
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	429a      	cmp	r2, r3
 8005186:	d19b      	bne.n	80050c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000000 	.word	0x20000000

08005198 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	; 0x28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80051aa:	f7fd fbb3 	bl	8002914 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	4413      	add	r3, r2
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80051ba:	f7fd fbab 	bl	8002914 <HAL_GetTick>
 80051be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80051c8:	4b3d      	ldr	r3, [pc, #244]	; (80052c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	00da      	lsls	r2, r3, #3
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	0d1b      	lsrs	r3, r3, #20
 80051d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051da:	fb02 f303 	mul.w	r3, r2, r3
 80051de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80051e0:	e060      	b.n	80052a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80051e8:	d107      	bne.n	80051fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d050      	beq.n	80052a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005202:	f7fd fb87 	bl	8002914 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520e:	429a      	cmp	r2, r3
 8005210:	d902      	bls.n	8005218 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	2b00      	cmp	r3, #0
 8005216:	d13d      	bne.n	8005294 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005226:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005230:	d111      	bne.n	8005256 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523a:	d004      	beq.n	8005246 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005244:	d107      	bne.n	8005256 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005254:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525e:	d10f      	bne.n	8005280 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800527e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e010      	b.n	80052b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	3b01      	subs	r3, #1
 80052a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4013      	ands	r3, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d196      	bne.n	80051e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3728      	adds	r7, #40	; 0x28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000000 	.word	0x20000000

080052c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7ff ff5b 	bl	8005198 <SPI_WaitFifoStateUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ec:	f043 0220 	orr.w	r2, r3, #32
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e046      	b.n	8005386 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052f8:	4b25      	ldr	r3, [pc, #148]	; (8005390 <SPI_EndRxTxTransaction+0xcc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a25      	ldr	r2, [pc, #148]	; (8005394 <SPI_EndRxTxTransaction+0xd0>)
 80052fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005302:	0d5b      	lsrs	r3, r3, #21
 8005304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005308:	fb02 f303 	mul.w	r3, r2, r3
 800530c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005316:	d112      	bne.n	800533e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2200      	movs	r2, #0
 8005320:	2180      	movs	r1, #128	; 0x80
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f7ff feb0 	bl	8005088 <SPI_WaitFlagStateUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d016      	beq.n	800535c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005332:	f043 0220 	orr.w	r2, r3, #32
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e023      	b.n	8005386 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	3b01      	subs	r3, #1
 8005348:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005354:	2b80      	cmp	r3, #128	; 0x80
 8005356:	d0f2      	beq.n	800533e <SPI_EndRxTxTransaction+0x7a>
 8005358:	e000      	b.n	800535c <SPI_EndRxTxTransaction+0x98>
        break;
 800535a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2200      	movs	r2, #0
 8005364:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7ff ff15 	bl	8005198 <SPI_WaitFifoStateUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005378:	f043 0220 	orr.w	r2, r3, #32
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e000      	b.n	8005386 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000000 	.word	0x20000000
 8005394:	165e9f81 	.word	0x165e9f81

08005398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e049      	b.n	800543e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fc f92e 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f000 faca 	bl	8005970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d001      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e054      	b.n	800550a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a26      	ldr	r2, [pc, #152]	; (8005518 <HAL_TIM_Base_Start_IT+0xd0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d022      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d01d      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a22      	ldr	r2, [pc, #136]	; (800551c <HAL_TIM_Base_Start_IT+0xd4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d018      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a21      	ldr	r2, [pc, #132]	; (8005520 <HAL_TIM_Base_Start_IT+0xd8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d013      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1f      	ldr	r2, [pc, #124]	; (8005524 <HAL_TIM_Base_Start_IT+0xdc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00e      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1e      	ldr	r2, [pc, #120]	; (8005528 <HAL_TIM_Base_Start_IT+0xe0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d009      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1c      	ldr	r2, [pc, #112]	; (800552c <HAL_TIM_Base_Start_IT+0xe4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1b      	ldr	r2, [pc, #108]	; (8005530 <HAL_TIM_Base_Start_IT+0xe8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d115      	bne.n	80054f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	4b19      	ldr	r3, [pc, #100]	; (8005534 <HAL_TIM_Base_Start_IT+0xec>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b06      	cmp	r3, #6
 80054d8:	d015      	beq.n	8005506 <HAL_TIM_Base_Start_IT+0xbe>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e0:	d011      	beq.n	8005506 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0201 	orr.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f2:	e008      	b.n	8005506 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e000      	b.n	8005508 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005506:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40010000 	.word	0x40010000
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800
 8005524:	40000c00 	.word	0x40000c00
 8005528:	40010400 	.word	0x40010400
 800552c:	40014000 	.word	0x40014000
 8005530:	40001800 	.word	0x40001800
 8005534:	00010007 	.word	0x00010007

08005538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b02      	cmp	r3, #2
 800554c:	d122      	bne.n	8005594 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b02      	cmp	r3, #2
 800555a:	d11b      	bne.n	8005594 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0202 	mvn.w	r2, #2
 8005564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f9da 	bl	8005934 <HAL_TIM_IC_CaptureCallback>
 8005580:	e005      	b.n	800558e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f9cc 	bl	8005920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f9dd 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d122      	bne.n	80055e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d11b      	bne.n	80055e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0204 	mvn.w	r2, #4
 80055b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f9b0 	bl	8005934 <HAL_TIM_IC_CaptureCallback>
 80055d4:	e005      	b.n	80055e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f9a2 	bl	8005920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f9b3 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d122      	bne.n	800563c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	2b08      	cmp	r3, #8
 8005602:	d11b      	bne.n	800563c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0208 	mvn.w	r2, #8
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2204      	movs	r2, #4
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f986 	bl	8005934 <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f978 	bl	8005920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f989 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	2b10      	cmp	r3, #16
 8005648:	d122      	bne.n	8005690 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b10      	cmp	r3, #16
 8005656:	d11b      	bne.n	8005690 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0210 	mvn.w	r2, #16
 8005660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2208      	movs	r2, #8
 8005666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f95c 	bl	8005934 <HAL_TIM_IC_CaptureCallback>
 800567c:	e005      	b.n	800568a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f94e 	bl	8005920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f95f 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b01      	cmp	r3, #1
 800569c:	d10e      	bne.n	80056bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d107      	bne.n	80056bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0201 	mvn.w	r2, #1
 80056b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f928 	bl	800590c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c6:	2b80      	cmp	r3, #128	; 0x80
 80056c8:	d10e      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d4:	2b80      	cmp	r3, #128	; 0x80
 80056d6:	d107      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fb16 	bl	8005d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f6:	d10e      	bne.n	8005716 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005702:	2b80      	cmp	r3, #128	; 0x80
 8005704:	d107      	bne.n	8005716 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800570e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fb09 	bl	8005d28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b40      	cmp	r3, #64	; 0x40
 8005722:	d10e      	bne.n	8005742 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d107      	bne.n	8005742 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800573a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f90d 	bl	800595c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b20      	cmp	r3, #32
 800574e:	d10e      	bne.n	800576e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b20      	cmp	r3, #32
 800575c:	d107      	bne.n	800576e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f06f 0220 	mvn.w	r2, #32
 8005766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fac9 	bl	8005d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_TIM_ConfigClockSource+0x1c>
 8005790:	2302      	movs	r3, #2
 8005792:	e0b4      	b.n	80058fe <HAL_TIM_ConfigClockSource+0x186>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	4b56      	ldr	r3, [pc, #344]	; (8005908 <HAL_TIM_ConfigClockSource+0x190>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057cc:	d03e      	beq.n	800584c <HAL_TIM_ConfigClockSource+0xd4>
 80057ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d2:	f200 8087 	bhi.w	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057da:	f000 8086 	beq.w	80058ea <HAL_TIM_ConfigClockSource+0x172>
 80057de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e2:	d87f      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057e4:	2b70      	cmp	r3, #112	; 0x70
 80057e6:	d01a      	beq.n	800581e <HAL_TIM_ConfigClockSource+0xa6>
 80057e8:	2b70      	cmp	r3, #112	; 0x70
 80057ea:	d87b      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057ec:	2b60      	cmp	r3, #96	; 0x60
 80057ee:	d050      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x11a>
 80057f0:	2b60      	cmp	r3, #96	; 0x60
 80057f2:	d877      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057f4:	2b50      	cmp	r3, #80	; 0x50
 80057f6:	d03c      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0xfa>
 80057f8:	2b50      	cmp	r3, #80	; 0x50
 80057fa:	d873      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057fc:	2b40      	cmp	r3, #64	; 0x40
 80057fe:	d058      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d86f      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005804:	2b30      	cmp	r3, #48	; 0x30
 8005806:	d064      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005808:	2b30      	cmp	r3, #48	; 0x30
 800580a:	d86b      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 800580c:	2b20      	cmp	r3, #32
 800580e:	d060      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005810:	2b20      	cmp	r3, #32
 8005812:	d867      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d05c      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005818:	2b10      	cmp	r3, #16
 800581a:	d05a      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x15a>
 800581c:	e062      	b.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800582e:	f000 f9b9 	bl	8005ba4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	609a      	str	r2, [r3, #8]
      break;
 800584a:	e04f      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800585c:	f000 f9a2 	bl	8005ba4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800586e:	609a      	str	r2, [r3, #8]
      break;
 8005870:	e03c      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800587e:	461a      	mov	r2, r3
 8005880:	f000 f916 	bl	8005ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2150      	movs	r1, #80	; 0x50
 800588a:	4618      	mov	r0, r3
 800588c:	f000 f96f 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005890:	e02c      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800589e:	461a      	mov	r2, r3
 80058a0:	f000 f935 	bl	8005b0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2160      	movs	r1, #96	; 0x60
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f95f 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 80058b0:	e01c      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058be:	461a      	mov	r2, r3
 80058c0:	f000 f8f6 	bl	8005ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2140      	movs	r1, #64	; 0x40
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f94f 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 80058d0:	e00c      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f000 f946 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 80058e2:	e003      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
      break;
 80058e8:	e000      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	fffeff88 	.word	0xfffeff88

0800590c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a40      	ldr	r2, [pc, #256]	; (8005a84 <TIM_Base_SetConfig+0x114>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598e:	d00f      	beq.n	80059b0 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a3d      	ldr	r2, [pc, #244]	; (8005a88 <TIM_Base_SetConfig+0x118>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00b      	beq.n	80059b0 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3c      	ldr	r2, [pc, #240]	; (8005a8c <TIM_Base_SetConfig+0x11c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d007      	beq.n	80059b0 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3b      	ldr	r2, [pc, #236]	; (8005a90 <TIM_Base_SetConfig+0x120>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_Base_SetConfig+0x40>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a3a      	ldr	r2, [pc, #232]	; (8005a94 <TIM_Base_SetConfig+0x124>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d108      	bne.n	80059c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a2f      	ldr	r2, [pc, #188]	; (8005a84 <TIM_Base_SetConfig+0x114>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d02b      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d0:	d027      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2c      	ldr	r2, [pc, #176]	; (8005a88 <TIM_Base_SetConfig+0x118>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d023      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2b      	ldr	r2, [pc, #172]	; (8005a8c <TIM_Base_SetConfig+0x11c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01f      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2a      	ldr	r2, [pc, #168]	; (8005a90 <TIM_Base_SetConfig+0x120>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01b      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a29      	ldr	r2, [pc, #164]	; (8005a94 <TIM_Base_SetConfig+0x124>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d017      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a28      	ldr	r2, [pc, #160]	; (8005a98 <TIM_Base_SetConfig+0x128>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a27      	ldr	r2, [pc, #156]	; (8005a9c <TIM_Base_SetConfig+0x12c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00f      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a26      	ldr	r2, [pc, #152]	; (8005aa0 <TIM_Base_SetConfig+0x130>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a25      	ldr	r2, [pc, #148]	; (8005aa4 <TIM_Base_SetConfig+0x134>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a24      	ldr	r2, [pc, #144]	; (8005aa8 <TIM_Base_SetConfig+0x138>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a23      	ldr	r2, [pc, #140]	; (8005aac <TIM_Base_SetConfig+0x13c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d108      	bne.n	8005a34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a0a      	ldr	r2, [pc, #40]	; (8005a84 <TIM_Base_SetConfig+0x114>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d003      	beq.n	8005a68 <TIM_Base_SetConfig+0xf8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <TIM_Base_SetConfig+0x124>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d103      	bne.n	8005a70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	615a      	str	r2, [r3, #20]
}
 8005a76:	bf00      	nop
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40010000 	.word	0x40010000
 8005a88:	40000400 	.word	0x40000400
 8005a8c:	40000800 	.word	0x40000800
 8005a90:	40000c00 	.word	0x40000c00
 8005a94:	40010400 	.word	0x40010400
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800
 8005aa4:	40001800 	.word	0x40001800
 8005aa8:	40001c00 	.word	0x40001c00
 8005aac:	40002000 	.word	0x40002000

08005ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f023 030a 	bic.w	r3, r3, #10
 8005aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b087      	sub	sp, #28
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	f023 0210 	bic.w	r2, r3, #16
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	031b      	lsls	r3, r3, #12
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f043 0307 	orr.w	r3, r3, #7
 8005b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	609a      	str	r2, [r3, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	021a      	lsls	r2, r3, #8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	609a      	str	r2, [r3, #8]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e06d      	b.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a30      	ldr	r2, [pc, #192]	; (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a2f      	ldr	r2, [pc, #188]	; (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d108      	bne.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a20      	ldr	r2, [pc, #128]	; (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d022      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6e:	d01d      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1d      	ldr	r2, [pc, #116]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d018      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1c      	ldr	r2, [pc, #112]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d013      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1a      	ldr	r2, [pc, #104]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00e      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d009      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a16      	ldr	r2, [pc, #88]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a15      	ldr	r2, [pc, #84]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d10c      	bne.n	8005cc6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40010400 	.word	0x40010400
 8005cec:	40000400 	.word	0x40000400
 8005cf0:	40000800 	.word	0x40000800
 8005cf4:	40000c00 	.word	0x40000c00
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40001800 	.word	0x40001800

08005d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <__cvt>:
 8005d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d3e:	ed2d 8b02 	vpush	{d8}
 8005d42:	eeb0 8b40 	vmov.f64	d8, d0
 8005d46:	b085      	sub	sp, #20
 8005d48:	4617      	mov	r7, r2
 8005d4a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005d4c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005d4e:	ee18 2a90 	vmov	r2, s17
 8005d52:	f025 0520 	bic.w	r5, r5, #32
 8005d56:	2a00      	cmp	r2, #0
 8005d58:	bfb6      	itet	lt
 8005d5a:	222d      	movlt	r2, #45	; 0x2d
 8005d5c:	2200      	movge	r2, #0
 8005d5e:	eeb1 8b40 	vneglt.f64	d8, d0
 8005d62:	2d46      	cmp	r5, #70	; 0x46
 8005d64:	460c      	mov	r4, r1
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	d004      	beq.n	8005d74 <__cvt+0x38>
 8005d6a:	2d45      	cmp	r5, #69	; 0x45
 8005d6c:	d100      	bne.n	8005d70 <__cvt+0x34>
 8005d6e:	3401      	adds	r4, #1
 8005d70:	2102      	movs	r1, #2
 8005d72:	e000      	b.n	8005d76 <__cvt+0x3a>
 8005d74:	2103      	movs	r1, #3
 8005d76:	ab03      	add	r3, sp, #12
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	ab02      	add	r3, sp, #8
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	4622      	mov	r2, r4
 8005d80:	4633      	mov	r3, r6
 8005d82:	eeb0 0b48 	vmov.f64	d0, d8
 8005d86:	f000 fe2f 	bl	80069e8 <_dtoa_r>
 8005d8a:	2d47      	cmp	r5, #71	; 0x47
 8005d8c:	d101      	bne.n	8005d92 <__cvt+0x56>
 8005d8e:	07fb      	lsls	r3, r7, #31
 8005d90:	d51a      	bpl.n	8005dc8 <__cvt+0x8c>
 8005d92:	2d46      	cmp	r5, #70	; 0x46
 8005d94:	eb00 0204 	add.w	r2, r0, r4
 8005d98:	d10c      	bne.n	8005db4 <__cvt+0x78>
 8005d9a:	7803      	ldrb	r3, [r0, #0]
 8005d9c:	2b30      	cmp	r3, #48	; 0x30
 8005d9e:	d107      	bne.n	8005db0 <__cvt+0x74>
 8005da0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da8:	bf1c      	itt	ne
 8005daa:	f1c4 0401 	rsbne	r4, r4, #1
 8005dae:	6034      	strne	r4, [r6, #0]
 8005db0:	6833      	ldr	r3, [r6, #0]
 8005db2:	441a      	add	r2, r3
 8005db4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dbc:	bf08      	it	eq
 8005dbe:	9203      	streq	r2, [sp, #12]
 8005dc0:	2130      	movs	r1, #48	; 0x30
 8005dc2:	9b03      	ldr	r3, [sp, #12]
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d307      	bcc.n	8005dd8 <__cvt+0x9c>
 8005dc8:	9b03      	ldr	r3, [sp, #12]
 8005dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dcc:	1a1b      	subs	r3, r3, r0
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	b005      	add	sp, #20
 8005dd2:	ecbd 8b02 	vpop	{d8}
 8005dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dd8:	1c5c      	adds	r4, r3, #1
 8005dda:	9403      	str	r4, [sp, #12]
 8005ddc:	7019      	strb	r1, [r3, #0]
 8005dde:	e7f0      	b.n	8005dc2 <__cvt+0x86>

08005de0 <__exponent>:
 8005de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005de2:	4603      	mov	r3, r0
 8005de4:	2900      	cmp	r1, #0
 8005de6:	bfb8      	it	lt
 8005de8:	4249      	neglt	r1, r1
 8005dea:	f803 2b02 	strb.w	r2, [r3], #2
 8005dee:	bfb4      	ite	lt
 8005df0:	222d      	movlt	r2, #45	; 0x2d
 8005df2:	222b      	movge	r2, #43	; 0x2b
 8005df4:	2909      	cmp	r1, #9
 8005df6:	7042      	strb	r2, [r0, #1]
 8005df8:	dd2a      	ble.n	8005e50 <__exponent+0x70>
 8005dfa:	f10d 0207 	add.w	r2, sp, #7
 8005dfe:	4617      	mov	r7, r2
 8005e00:	260a      	movs	r6, #10
 8005e02:	4694      	mov	ip, r2
 8005e04:	fb91 f5f6 	sdiv	r5, r1, r6
 8005e08:	fb06 1415 	mls	r4, r6, r5, r1
 8005e0c:	3430      	adds	r4, #48	; 0x30
 8005e0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005e12:	460c      	mov	r4, r1
 8005e14:	2c63      	cmp	r4, #99	; 0x63
 8005e16:	f102 32ff 	add.w	r2, r2, #4294967295
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	dcf1      	bgt.n	8005e02 <__exponent+0x22>
 8005e1e:	3130      	adds	r1, #48	; 0x30
 8005e20:	f1ac 0402 	sub.w	r4, ip, #2
 8005e24:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005e28:	1c41      	adds	r1, r0, #1
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	42ba      	cmp	r2, r7
 8005e2e:	d30a      	bcc.n	8005e46 <__exponent+0x66>
 8005e30:	f10d 0209 	add.w	r2, sp, #9
 8005e34:	eba2 020c 	sub.w	r2, r2, ip
 8005e38:	42bc      	cmp	r4, r7
 8005e3a:	bf88      	it	hi
 8005e3c:	2200      	movhi	r2, #0
 8005e3e:	4413      	add	r3, r2
 8005e40:	1a18      	subs	r0, r3, r0
 8005e42:	b003      	add	sp, #12
 8005e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e46:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005e4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005e4e:	e7ed      	b.n	8005e2c <__exponent+0x4c>
 8005e50:	2330      	movs	r3, #48	; 0x30
 8005e52:	3130      	adds	r1, #48	; 0x30
 8005e54:	7083      	strb	r3, [r0, #2]
 8005e56:	70c1      	strb	r1, [r0, #3]
 8005e58:	1d03      	adds	r3, r0, #4
 8005e5a:	e7f1      	b.n	8005e40 <__exponent+0x60>
 8005e5c:	0000      	movs	r0, r0
	...

08005e60 <_printf_float>:
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	b08b      	sub	sp, #44	; 0x2c
 8005e66:	460c      	mov	r4, r1
 8005e68:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005e6c:	4616      	mov	r6, r2
 8005e6e:	461f      	mov	r7, r3
 8005e70:	4605      	mov	r5, r0
 8005e72:	f000 fcbb 	bl	80067ec <_localeconv_r>
 8005e76:	f8d0 b000 	ldr.w	fp, [r0]
 8005e7a:	4658      	mov	r0, fp
 8005e7c:	f7fa fa30 	bl	80002e0 <strlen>
 8005e80:	2300      	movs	r3, #0
 8005e82:	9308      	str	r3, [sp, #32]
 8005e84:	f8d8 3000 	ldr.w	r3, [r8]
 8005e88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e8c:	6822      	ldr	r2, [r4, #0]
 8005e8e:	3307      	adds	r3, #7
 8005e90:	f023 0307 	bic.w	r3, r3, #7
 8005e94:	f103 0108 	add.w	r1, r3, #8
 8005e98:	f8c8 1000 	str.w	r1, [r8]
 8005e9c:	ed93 0b00 	vldr	d0, [r3]
 8005ea0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006100 <_printf_float+0x2a0>
 8005ea4:	eeb0 7bc0 	vabs.f64	d7, d0
 8005ea8:	eeb4 7b46 	vcmp.f64	d7, d6
 8005eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8005eb4:	4682      	mov	sl, r0
 8005eb6:	dd24      	ble.n	8005f02 <_printf_float+0xa2>
 8005eb8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec0:	d502      	bpl.n	8005ec8 <_printf_float+0x68>
 8005ec2:	232d      	movs	r3, #45	; 0x2d
 8005ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec8:	498f      	ldr	r1, [pc, #572]	; (8006108 <_printf_float+0x2a8>)
 8005eca:	4b90      	ldr	r3, [pc, #576]	; (800610c <_printf_float+0x2ac>)
 8005ecc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005ed0:	bf94      	ite	ls
 8005ed2:	4688      	movls	r8, r1
 8005ed4:	4698      	movhi	r8, r3
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	6123      	str	r3, [r4, #16]
 8005eda:	f022 0204 	bic.w	r2, r2, #4
 8005ede:	2300      	movs	r3, #0
 8005ee0:	6022      	str	r2, [r4, #0]
 8005ee2:	9304      	str	r3, [sp, #16]
 8005ee4:	9700      	str	r7, [sp, #0]
 8005ee6:	4633      	mov	r3, r6
 8005ee8:	aa09      	add	r2, sp, #36	; 0x24
 8005eea:	4621      	mov	r1, r4
 8005eec:	4628      	mov	r0, r5
 8005eee:	f000 f9d1 	bl	8006294 <_printf_common>
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	f040 808a 	bne.w	800600c <_printf_float+0x1ac>
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	b00b      	add	sp, #44	; 0x2c
 8005efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f02:	eeb4 0b40 	vcmp.f64	d0, d0
 8005f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0a:	d709      	bvc.n	8005f20 <_printf_float+0xc0>
 8005f0c:	ee10 3a90 	vmov	r3, s1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bfbc      	itt	lt
 8005f14:	232d      	movlt	r3, #45	; 0x2d
 8005f16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f1a:	497d      	ldr	r1, [pc, #500]	; (8006110 <_printf_float+0x2b0>)
 8005f1c:	4b7d      	ldr	r3, [pc, #500]	; (8006114 <_printf_float+0x2b4>)
 8005f1e:	e7d5      	b.n	8005ecc <_printf_float+0x6c>
 8005f20:	6863      	ldr	r3, [r4, #4]
 8005f22:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005f26:	9104      	str	r1, [sp, #16]
 8005f28:	1c59      	adds	r1, r3, #1
 8005f2a:	d13c      	bne.n	8005fa6 <_printf_float+0x146>
 8005f2c:	2306      	movs	r3, #6
 8005f2e:	6063      	str	r3, [r4, #4]
 8005f30:	2300      	movs	r3, #0
 8005f32:	9303      	str	r3, [sp, #12]
 8005f34:	ab08      	add	r3, sp, #32
 8005f36:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005f3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f3e:	ab07      	add	r3, sp, #28
 8005f40:	6861      	ldr	r1, [r4, #4]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	6022      	str	r2, [r4, #0]
 8005f46:	f10d 031b 	add.w	r3, sp, #27
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f7ff fef6 	bl	8005d3c <__cvt>
 8005f50:	9b04      	ldr	r3, [sp, #16]
 8005f52:	9907      	ldr	r1, [sp, #28]
 8005f54:	2b47      	cmp	r3, #71	; 0x47
 8005f56:	4680      	mov	r8, r0
 8005f58:	d108      	bne.n	8005f6c <_printf_float+0x10c>
 8005f5a:	1cc8      	adds	r0, r1, #3
 8005f5c:	db02      	blt.n	8005f64 <_printf_float+0x104>
 8005f5e:	6863      	ldr	r3, [r4, #4]
 8005f60:	4299      	cmp	r1, r3
 8005f62:	dd41      	ble.n	8005fe8 <_printf_float+0x188>
 8005f64:	f1a9 0902 	sub.w	r9, r9, #2
 8005f68:	fa5f f989 	uxtb.w	r9, r9
 8005f6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f70:	d820      	bhi.n	8005fb4 <_printf_float+0x154>
 8005f72:	3901      	subs	r1, #1
 8005f74:	464a      	mov	r2, r9
 8005f76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f7a:	9107      	str	r1, [sp, #28]
 8005f7c:	f7ff ff30 	bl	8005de0 <__exponent>
 8005f80:	9a08      	ldr	r2, [sp, #32]
 8005f82:	9004      	str	r0, [sp, #16]
 8005f84:	1813      	adds	r3, r2, r0
 8005f86:	2a01      	cmp	r2, #1
 8005f88:	6123      	str	r3, [r4, #16]
 8005f8a:	dc02      	bgt.n	8005f92 <_printf_float+0x132>
 8005f8c:	6822      	ldr	r2, [r4, #0]
 8005f8e:	07d2      	lsls	r2, r2, #31
 8005f90:	d501      	bpl.n	8005f96 <_printf_float+0x136>
 8005f92:	3301      	adds	r3, #1
 8005f94:	6123      	str	r3, [r4, #16]
 8005f96:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0a2      	beq.n	8005ee4 <_printf_float+0x84>
 8005f9e:	232d      	movs	r3, #45	; 0x2d
 8005fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa4:	e79e      	b.n	8005ee4 <_printf_float+0x84>
 8005fa6:	9904      	ldr	r1, [sp, #16]
 8005fa8:	2947      	cmp	r1, #71	; 0x47
 8005faa:	d1c1      	bne.n	8005f30 <_printf_float+0xd0>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1bf      	bne.n	8005f30 <_printf_float+0xd0>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e7bc      	b.n	8005f2e <_printf_float+0xce>
 8005fb4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005fb8:	d118      	bne.n	8005fec <_printf_float+0x18c>
 8005fba:	2900      	cmp	r1, #0
 8005fbc:	6863      	ldr	r3, [r4, #4]
 8005fbe:	dd0b      	ble.n	8005fd8 <_printf_float+0x178>
 8005fc0:	6121      	str	r1, [r4, #16]
 8005fc2:	b913      	cbnz	r3, 8005fca <_printf_float+0x16a>
 8005fc4:	6822      	ldr	r2, [r4, #0]
 8005fc6:	07d0      	lsls	r0, r2, #31
 8005fc8:	d502      	bpl.n	8005fd0 <_printf_float+0x170>
 8005fca:	3301      	adds	r3, #1
 8005fcc:	440b      	add	r3, r1
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fd4:	9304      	str	r3, [sp, #16]
 8005fd6:	e7de      	b.n	8005f96 <_printf_float+0x136>
 8005fd8:	b913      	cbnz	r3, 8005fe0 <_printf_float+0x180>
 8005fda:	6822      	ldr	r2, [r4, #0]
 8005fdc:	07d2      	lsls	r2, r2, #31
 8005fde:	d501      	bpl.n	8005fe4 <_printf_float+0x184>
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	e7f4      	b.n	8005fce <_printf_float+0x16e>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e7f2      	b.n	8005fce <_printf_float+0x16e>
 8005fe8:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005fec:	9b08      	ldr	r3, [sp, #32]
 8005fee:	4299      	cmp	r1, r3
 8005ff0:	db05      	blt.n	8005ffe <_printf_float+0x19e>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	6121      	str	r1, [r4, #16]
 8005ff6:	07d8      	lsls	r0, r3, #31
 8005ff8:	d5ea      	bpl.n	8005fd0 <_printf_float+0x170>
 8005ffa:	1c4b      	adds	r3, r1, #1
 8005ffc:	e7e7      	b.n	8005fce <_printf_float+0x16e>
 8005ffe:	2900      	cmp	r1, #0
 8006000:	bfd4      	ite	le
 8006002:	f1c1 0202 	rsble	r2, r1, #2
 8006006:	2201      	movgt	r2, #1
 8006008:	4413      	add	r3, r2
 800600a:	e7e0      	b.n	8005fce <_printf_float+0x16e>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	055a      	lsls	r2, r3, #21
 8006010:	d407      	bmi.n	8006022 <_printf_float+0x1c2>
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	4642      	mov	r2, r8
 8006016:	4631      	mov	r1, r6
 8006018:	4628      	mov	r0, r5
 800601a:	47b8      	blx	r7
 800601c:	3001      	adds	r0, #1
 800601e:	d12a      	bne.n	8006076 <_printf_float+0x216>
 8006020:	e76a      	b.n	8005ef8 <_printf_float+0x98>
 8006022:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006026:	f240 80e0 	bls.w	80061ea <_printf_float+0x38a>
 800602a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800602e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006036:	d133      	bne.n	80060a0 <_printf_float+0x240>
 8006038:	4a37      	ldr	r2, [pc, #220]	; (8006118 <_printf_float+0x2b8>)
 800603a:	2301      	movs	r3, #1
 800603c:	4631      	mov	r1, r6
 800603e:	4628      	mov	r0, r5
 8006040:	47b8      	blx	r7
 8006042:	3001      	adds	r0, #1
 8006044:	f43f af58 	beq.w	8005ef8 <_printf_float+0x98>
 8006048:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800604c:	429a      	cmp	r2, r3
 800604e:	db02      	blt.n	8006056 <_printf_float+0x1f6>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	07d8      	lsls	r0, r3, #31
 8006054:	d50f      	bpl.n	8006076 <_printf_float+0x216>
 8006056:	4653      	mov	r3, sl
 8006058:	465a      	mov	r2, fp
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	f43f af49 	beq.w	8005ef8 <_printf_float+0x98>
 8006066:	f04f 0800 	mov.w	r8, #0
 800606a:	f104 091a 	add.w	r9, r4, #26
 800606e:	9b08      	ldr	r3, [sp, #32]
 8006070:	3b01      	subs	r3, #1
 8006072:	4543      	cmp	r3, r8
 8006074:	dc09      	bgt.n	800608a <_printf_float+0x22a>
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	079b      	lsls	r3, r3, #30
 800607a:	f100 8106 	bmi.w	800628a <_printf_float+0x42a>
 800607e:	68e0      	ldr	r0, [r4, #12]
 8006080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006082:	4298      	cmp	r0, r3
 8006084:	bfb8      	it	lt
 8006086:	4618      	movlt	r0, r3
 8006088:	e738      	b.n	8005efc <_printf_float+0x9c>
 800608a:	2301      	movs	r3, #1
 800608c:	464a      	mov	r2, r9
 800608e:	4631      	mov	r1, r6
 8006090:	4628      	mov	r0, r5
 8006092:	47b8      	blx	r7
 8006094:	3001      	adds	r0, #1
 8006096:	f43f af2f 	beq.w	8005ef8 <_printf_float+0x98>
 800609a:	f108 0801 	add.w	r8, r8, #1
 800609e:	e7e6      	b.n	800606e <_printf_float+0x20e>
 80060a0:	9b07      	ldr	r3, [sp, #28]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	dc3a      	bgt.n	800611c <_printf_float+0x2bc>
 80060a6:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <_printf_float+0x2b8>)
 80060a8:	2301      	movs	r3, #1
 80060aa:	4631      	mov	r1, r6
 80060ac:	4628      	mov	r0, r5
 80060ae:	47b8      	blx	r7
 80060b0:	3001      	adds	r0, #1
 80060b2:	f43f af21 	beq.w	8005ef8 <_printf_float+0x98>
 80060b6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	d102      	bne.n	80060c4 <_printf_float+0x264>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	07d9      	lsls	r1, r3, #31
 80060c2:	d5d8      	bpl.n	8006076 <_printf_float+0x216>
 80060c4:	4653      	mov	r3, sl
 80060c6:	465a      	mov	r2, fp
 80060c8:	4631      	mov	r1, r6
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b8      	blx	r7
 80060ce:	3001      	adds	r0, #1
 80060d0:	f43f af12 	beq.w	8005ef8 <_printf_float+0x98>
 80060d4:	f04f 0900 	mov.w	r9, #0
 80060d8:	f104 0a1a 	add.w	sl, r4, #26
 80060dc:	9b07      	ldr	r3, [sp, #28]
 80060de:	425b      	negs	r3, r3
 80060e0:	454b      	cmp	r3, r9
 80060e2:	dc01      	bgt.n	80060e8 <_printf_float+0x288>
 80060e4:	9b08      	ldr	r3, [sp, #32]
 80060e6:	e795      	b.n	8006014 <_printf_float+0x1b4>
 80060e8:	2301      	movs	r3, #1
 80060ea:	4652      	mov	r2, sl
 80060ec:	4631      	mov	r1, r6
 80060ee:	4628      	mov	r0, r5
 80060f0:	47b8      	blx	r7
 80060f2:	3001      	adds	r0, #1
 80060f4:	f43f af00 	beq.w	8005ef8 <_printf_float+0x98>
 80060f8:	f109 0901 	add.w	r9, r9, #1
 80060fc:	e7ee      	b.n	80060dc <_printf_float+0x27c>
 80060fe:	bf00      	nop
 8006100:	ffffffff 	.word	0xffffffff
 8006104:	7fefffff 	.word	0x7fefffff
 8006108:	0802e380 	.word	0x0802e380
 800610c:	0802e384 	.word	0x0802e384
 8006110:	0802e388 	.word	0x0802e388
 8006114:	0802e38c 	.word	0x0802e38c
 8006118:	0802e390 	.word	0x0802e390
 800611c:	9a08      	ldr	r2, [sp, #32]
 800611e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006120:	429a      	cmp	r2, r3
 8006122:	bfa8      	it	ge
 8006124:	461a      	movge	r2, r3
 8006126:	2a00      	cmp	r2, #0
 8006128:	4691      	mov	r9, r2
 800612a:	dc38      	bgt.n	800619e <_printf_float+0x33e>
 800612c:	2300      	movs	r3, #0
 800612e:	9305      	str	r3, [sp, #20]
 8006130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006134:	f104 021a 	add.w	r2, r4, #26
 8006138:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800613a:	9905      	ldr	r1, [sp, #20]
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	eba3 0309 	sub.w	r3, r3, r9
 8006142:	428b      	cmp	r3, r1
 8006144:	dc33      	bgt.n	80061ae <_printf_float+0x34e>
 8006146:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800614a:	429a      	cmp	r2, r3
 800614c:	db3c      	blt.n	80061c8 <_printf_float+0x368>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	07da      	lsls	r2, r3, #31
 8006152:	d439      	bmi.n	80061c8 <_printf_float+0x368>
 8006154:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006158:	eba2 0903 	sub.w	r9, r2, r3
 800615c:	9b04      	ldr	r3, [sp, #16]
 800615e:	1ad2      	subs	r2, r2, r3
 8006160:	4591      	cmp	r9, r2
 8006162:	bfa8      	it	ge
 8006164:	4691      	movge	r9, r2
 8006166:	f1b9 0f00 	cmp.w	r9, #0
 800616a:	dc35      	bgt.n	80061d8 <_printf_float+0x378>
 800616c:	f04f 0800 	mov.w	r8, #0
 8006170:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006174:	f104 0a1a 	add.w	sl, r4, #26
 8006178:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800617c:	1a9b      	subs	r3, r3, r2
 800617e:	eba3 0309 	sub.w	r3, r3, r9
 8006182:	4543      	cmp	r3, r8
 8006184:	f77f af77 	ble.w	8006076 <_printf_float+0x216>
 8006188:	2301      	movs	r3, #1
 800618a:	4652      	mov	r2, sl
 800618c:	4631      	mov	r1, r6
 800618e:	4628      	mov	r0, r5
 8006190:	47b8      	blx	r7
 8006192:	3001      	adds	r0, #1
 8006194:	f43f aeb0 	beq.w	8005ef8 <_printf_float+0x98>
 8006198:	f108 0801 	add.w	r8, r8, #1
 800619c:	e7ec      	b.n	8006178 <_printf_float+0x318>
 800619e:	4613      	mov	r3, r2
 80061a0:	4631      	mov	r1, r6
 80061a2:	4642      	mov	r2, r8
 80061a4:	4628      	mov	r0, r5
 80061a6:	47b8      	blx	r7
 80061a8:	3001      	adds	r0, #1
 80061aa:	d1bf      	bne.n	800612c <_printf_float+0x2cc>
 80061ac:	e6a4      	b.n	8005ef8 <_printf_float+0x98>
 80061ae:	2301      	movs	r3, #1
 80061b0:	4631      	mov	r1, r6
 80061b2:	4628      	mov	r0, r5
 80061b4:	9204      	str	r2, [sp, #16]
 80061b6:	47b8      	blx	r7
 80061b8:	3001      	adds	r0, #1
 80061ba:	f43f ae9d 	beq.w	8005ef8 <_printf_float+0x98>
 80061be:	9b05      	ldr	r3, [sp, #20]
 80061c0:	9a04      	ldr	r2, [sp, #16]
 80061c2:	3301      	adds	r3, #1
 80061c4:	9305      	str	r3, [sp, #20]
 80061c6:	e7b7      	b.n	8006138 <_printf_float+0x2d8>
 80061c8:	4653      	mov	r3, sl
 80061ca:	465a      	mov	r2, fp
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	d1be      	bne.n	8006154 <_printf_float+0x2f4>
 80061d6:	e68f      	b.n	8005ef8 <_printf_float+0x98>
 80061d8:	9a04      	ldr	r2, [sp, #16]
 80061da:	464b      	mov	r3, r9
 80061dc:	4442      	add	r2, r8
 80061de:	4631      	mov	r1, r6
 80061e0:	4628      	mov	r0, r5
 80061e2:	47b8      	blx	r7
 80061e4:	3001      	adds	r0, #1
 80061e6:	d1c1      	bne.n	800616c <_printf_float+0x30c>
 80061e8:	e686      	b.n	8005ef8 <_printf_float+0x98>
 80061ea:	9a08      	ldr	r2, [sp, #32]
 80061ec:	2a01      	cmp	r2, #1
 80061ee:	dc01      	bgt.n	80061f4 <_printf_float+0x394>
 80061f0:	07db      	lsls	r3, r3, #31
 80061f2:	d537      	bpl.n	8006264 <_printf_float+0x404>
 80061f4:	2301      	movs	r3, #1
 80061f6:	4642      	mov	r2, r8
 80061f8:	4631      	mov	r1, r6
 80061fa:	4628      	mov	r0, r5
 80061fc:	47b8      	blx	r7
 80061fe:	3001      	adds	r0, #1
 8006200:	f43f ae7a 	beq.w	8005ef8 <_printf_float+0x98>
 8006204:	4653      	mov	r3, sl
 8006206:	465a      	mov	r2, fp
 8006208:	4631      	mov	r1, r6
 800620a:	4628      	mov	r0, r5
 800620c:	47b8      	blx	r7
 800620e:	3001      	adds	r0, #1
 8006210:	f43f ae72 	beq.w	8005ef8 <_printf_float+0x98>
 8006214:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006218:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800621c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006220:	9b08      	ldr	r3, [sp, #32]
 8006222:	d01a      	beq.n	800625a <_printf_float+0x3fa>
 8006224:	3b01      	subs	r3, #1
 8006226:	f108 0201 	add.w	r2, r8, #1
 800622a:	4631      	mov	r1, r6
 800622c:	4628      	mov	r0, r5
 800622e:	47b8      	blx	r7
 8006230:	3001      	adds	r0, #1
 8006232:	d10e      	bne.n	8006252 <_printf_float+0x3f2>
 8006234:	e660      	b.n	8005ef8 <_printf_float+0x98>
 8006236:	2301      	movs	r3, #1
 8006238:	464a      	mov	r2, r9
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	47b8      	blx	r7
 8006240:	3001      	adds	r0, #1
 8006242:	f43f ae59 	beq.w	8005ef8 <_printf_float+0x98>
 8006246:	f108 0801 	add.w	r8, r8, #1
 800624a:	9b08      	ldr	r3, [sp, #32]
 800624c:	3b01      	subs	r3, #1
 800624e:	4543      	cmp	r3, r8
 8006250:	dcf1      	bgt.n	8006236 <_printf_float+0x3d6>
 8006252:	9b04      	ldr	r3, [sp, #16]
 8006254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006258:	e6dd      	b.n	8006016 <_printf_float+0x1b6>
 800625a:	f04f 0800 	mov.w	r8, #0
 800625e:	f104 091a 	add.w	r9, r4, #26
 8006262:	e7f2      	b.n	800624a <_printf_float+0x3ea>
 8006264:	2301      	movs	r3, #1
 8006266:	4642      	mov	r2, r8
 8006268:	e7df      	b.n	800622a <_printf_float+0x3ca>
 800626a:	2301      	movs	r3, #1
 800626c:	464a      	mov	r2, r9
 800626e:	4631      	mov	r1, r6
 8006270:	4628      	mov	r0, r5
 8006272:	47b8      	blx	r7
 8006274:	3001      	adds	r0, #1
 8006276:	f43f ae3f 	beq.w	8005ef8 <_printf_float+0x98>
 800627a:	f108 0801 	add.w	r8, r8, #1
 800627e:	68e3      	ldr	r3, [r4, #12]
 8006280:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006282:	1a5b      	subs	r3, r3, r1
 8006284:	4543      	cmp	r3, r8
 8006286:	dcf0      	bgt.n	800626a <_printf_float+0x40a>
 8006288:	e6f9      	b.n	800607e <_printf_float+0x21e>
 800628a:	f04f 0800 	mov.w	r8, #0
 800628e:	f104 0919 	add.w	r9, r4, #25
 8006292:	e7f4      	b.n	800627e <_printf_float+0x41e>

08006294 <_printf_common>:
 8006294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006298:	4616      	mov	r6, r2
 800629a:	4699      	mov	r9, r3
 800629c:	688a      	ldr	r2, [r1, #8]
 800629e:	690b      	ldr	r3, [r1, #16]
 80062a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062a4:	4293      	cmp	r3, r2
 80062a6:	bfb8      	it	lt
 80062a8:	4613      	movlt	r3, r2
 80062aa:	6033      	str	r3, [r6, #0]
 80062ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062b0:	4607      	mov	r7, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	b10a      	cbz	r2, 80062ba <_printf_common+0x26>
 80062b6:	3301      	adds	r3, #1
 80062b8:	6033      	str	r3, [r6, #0]
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	0699      	lsls	r1, r3, #26
 80062be:	bf42      	ittt	mi
 80062c0:	6833      	ldrmi	r3, [r6, #0]
 80062c2:	3302      	addmi	r3, #2
 80062c4:	6033      	strmi	r3, [r6, #0]
 80062c6:	6825      	ldr	r5, [r4, #0]
 80062c8:	f015 0506 	ands.w	r5, r5, #6
 80062cc:	d106      	bne.n	80062dc <_printf_common+0x48>
 80062ce:	f104 0a19 	add.w	sl, r4, #25
 80062d2:	68e3      	ldr	r3, [r4, #12]
 80062d4:	6832      	ldr	r2, [r6, #0]
 80062d6:	1a9b      	subs	r3, r3, r2
 80062d8:	42ab      	cmp	r3, r5
 80062da:	dc26      	bgt.n	800632a <_printf_common+0x96>
 80062dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062e0:	1e13      	subs	r3, r2, #0
 80062e2:	6822      	ldr	r2, [r4, #0]
 80062e4:	bf18      	it	ne
 80062e6:	2301      	movne	r3, #1
 80062e8:	0692      	lsls	r2, r2, #26
 80062ea:	d42b      	bmi.n	8006344 <_printf_common+0xb0>
 80062ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062f0:	4649      	mov	r1, r9
 80062f2:	4638      	mov	r0, r7
 80062f4:	47c0      	blx	r8
 80062f6:	3001      	adds	r0, #1
 80062f8:	d01e      	beq.n	8006338 <_printf_common+0xa4>
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	6922      	ldr	r2, [r4, #16]
 80062fe:	f003 0306 	and.w	r3, r3, #6
 8006302:	2b04      	cmp	r3, #4
 8006304:	bf02      	ittt	eq
 8006306:	68e5      	ldreq	r5, [r4, #12]
 8006308:	6833      	ldreq	r3, [r6, #0]
 800630a:	1aed      	subeq	r5, r5, r3
 800630c:	68a3      	ldr	r3, [r4, #8]
 800630e:	bf0c      	ite	eq
 8006310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006314:	2500      	movne	r5, #0
 8006316:	4293      	cmp	r3, r2
 8006318:	bfc4      	itt	gt
 800631a:	1a9b      	subgt	r3, r3, r2
 800631c:	18ed      	addgt	r5, r5, r3
 800631e:	2600      	movs	r6, #0
 8006320:	341a      	adds	r4, #26
 8006322:	42b5      	cmp	r5, r6
 8006324:	d11a      	bne.n	800635c <_printf_common+0xc8>
 8006326:	2000      	movs	r0, #0
 8006328:	e008      	b.n	800633c <_printf_common+0xa8>
 800632a:	2301      	movs	r3, #1
 800632c:	4652      	mov	r2, sl
 800632e:	4649      	mov	r1, r9
 8006330:	4638      	mov	r0, r7
 8006332:	47c0      	blx	r8
 8006334:	3001      	adds	r0, #1
 8006336:	d103      	bne.n	8006340 <_printf_common+0xac>
 8006338:	f04f 30ff 	mov.w	r0, #4294967295
 800633c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006340:	3501      	adds	r5, #1
 8006342:	e7c6      	b.n	80062d2 <_printf_common+0x3e>
 8006344:	18e1      	adds	r1, r4, r3
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	2030      	movs	r0, #48	; 0x30
 800634a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800634e:	4422      	add	r2, r4
 8006350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006358:	3302      	adds	r3, #2
 800635a:	e7c7      	b.n	80062ec <_printf_common+0x58>
 800635c:	2301      	movs	r3, #1
 800635e:	4622      	mov	r2, r4
 8006360:	4649      	mov	r1, r9
 8006362:	4638      	mov	r0, r7
 8006364:	47c0      	blx	r8
 8006366:	3001      	adds	r0, #1
 8006368:	d0e6      	beq.n	8006338 <_printf_common+0xa4>
 800636a:	3601      	adds	r6, #1
 800636c:	e7d9      	b.n	8006322 <_printf_common+0x8e>
	...

08006370 <_printf_i>:
 8006370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006374:	7e0f      	ldrb	r7, [r1, #24]
 8006376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006378:	2f78      	cmp	r7, #120	; 0x78
 800637a:	4691      	mov	r9, r2
 800637c:	4680      	mov	r8, r0
 800637e:	460c      	mov	r4, r1
 8006380:	469a      	mov	sl, r3
 8006382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006386:	d807      	bhi.n	8006398 <_printf_i+0x28>
 8006388:	2f62      	cmp	r7, #98	; 0x62
 800638a:	d80a      	bhi.n	80063a2 <_printf_i+0x32>
 800638c:	2f00      	cmp	r7, #0
 800638e:	f000 80d4 	beq.w	800653a <_printf_i+0x1ca>
 8006392:	2f58      	cmp	r7, #88	; 0x58
 8006394:	f000 80c0 	beq.w	8006518 <_printf_i+0x1a8>
 8006398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800639c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063a0:	e03a      	b.n	8006418 <_printf_i+0xa8>
 80063a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063a6:	2b15      	cmp	r3, #21
 80063a8:	d8f6      	bhi.n	8006398 <_printf_i+0x28>
 80063aa:	a101      	add	r1, pc, #4	; (adr r1, 80063b0 <_printf_i+0x40>)
 80063ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063b0:	08006409 	.word	0x08006409
 80063b4:	0800641d 	.word	0x0800641d
 80063b8:	08006399 	.word	0x08006399
 80063bc:	08006399 	.word	0x08006399
 80063c0:	08006399 	.word	0x08006399
 80063c4:	08006399 	.word	0x08006399
 80063c8:	0800641d 	.word	0x0800641d
 80063cc:	08006399 	.word	0x08006399
 80063d0:	08006399 	.word	0x08006399
 80063d4:	08006399 	.word	0x08006399
 80063d8:	08006399 	.word	0x08006399
 80063dc:	08006521 	.word	0x08006521
 80063e0:	08006449 	.word	0x08006449
 80063e4:	080064db 	.word	0x080064db
 80063e8:	08006399 	.word	0x08006399
 80063ec:	08006399 	.word	0x08006399
 80063f0:	08006543 	.word	0x08006543
 80063f4:	08006399 	.word	0x08006399
 80063f8:	08006449 	.word	0x08006449
 80063fc:	08006399 	.word	0x08006399
 8006400:	08006399 	.word	0x08006399
 8006404:	080064e3 	.word	0x080064e3
 8006408:	682b      	ldr	r3, [r5, #0]
 800640a:	1d1a      	adds	r2, r3, #4
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	602a      	str	r2, [r5, #0]
 8006410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006418:	2301      	movs	r3, #1
 800641a:	e09f      	b.n	800655c <_printf_i+0x1ec>
 800641c:	6820      	ldr	r0, [r4, #0]
 800641e:	682b      	ldr	r3, [r5, #0]
 8006420:	0607      	lsls	r7, r0, #24
 8006422:	f103 0104 	add.w	r1, r3, #4
 8006426:	6029      	str	r1, [r5, #0]
 8006428:	d501      	bpl.n	800642e <_printf_i+0xbe>
 800642a:	681e      	ldr	r6, [r3, #0]
 800642c:	e003      	b.n	8006436 <_printf_i+0xc6>
 800642e:	0646      	lsls	r6, r0, #25
 8006430:	d5fb      	bpl.n	800642a <_printf_i+0xba>
 8006432:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006436:	2e00      	cmp	r6, #0
 8006438:	da03      	bge.n	8006442 <_printf_i+0xd2>
 800643a:	232d      	movs	r3, #45	; 0x2d
 800643c:	4276      	negs	r6, r6
 800643e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006442:	485a      	ldr	r0, [pc, #360]	; (80065ac <_printf_i+0x23c>)
 8006444:	230a      	movs	r3, #10
 8006446:	e012      	b.n	800646e <_printf_i+0xfe>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	6820      	ldr	r0, [r4, #0]
 800644c:	1d19      	adds	r1, r3, #4
 800644e:	6029      	str	r1, [r5, #0]
 8006450:	0605      	lsls	r5, r0, #24
 8006452:	d501      	bpl.n	8006458 <_printf_i+0xe8>
 8006454:	681e      	ldr	r6, [r3, #0]
 8006456:	e002      	b.n	800645e <_printf_i+0xee>
 8006458:	0641      	lsls	r1, r0, #25
 800645a:	d5fb      	bpl.n	8006454 <_printf_i+0xe4>
 800645c:	881e      	ldrh	r6, [r3, #0]
 800645e:	4853      	ldr	r0, [pc, #332]	; (80065ac <_printf_i+0x23c>)
 8006460:	2f6f      	cmp	r7, #111	; 0x6f
 8006462:	bf0c      	ite	eq
 8006464:	2308      	moveq	r3, #8
 8006466:	230a      	movne	r3, #10
 8006468:	2100      	movs	r1, #0
 800646a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800646e:	6865      	ldr	r5, [r4, #4]
 8006470:	60a5      	str	r5, [r4, #8]
 8006472:	2d00      	cmp	r5, #0
 8006474:	bfa2      	ittt	ge
 8006476:	6821      	ldrge	r1, [r4, #0]
 8006478:	f021 0104 	bicge.w	r1, r1, #4
 800647c:	6021      	strge	r1, [r4, #0]
 800647e:	b90e      	cbnz	r6, 8006484 <_printf_i+0x114>
 8006480:	2d00      	cmp	r5, #0
 8006482:	d04b      	beq.n	800651c <_printf_i+0x1ac>
 8006484:	4615      	mov	r5, r2
 8006486:	fbb6 f1f3 	udiv	r1, r6, r3
 800648a:	fb03 6711 	mls	r7, r3, r1, r6
 800648e:	5dc7      	ldrb	r7, [r0, r7]
 8006490:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006494:	4637      	mov	r7, r6
 8006496:	42bb      	cmp	r3, r7
 8006498:	460e      	mov	r6, r1
 800649a:	d9f4      	bls.n	8006486 <_printf_i+0x116>
 800649c:	2b08      	cmp	r3, #8
 800649e:	d10b      	bne.n	80064b8 <_printf_i+0x148>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	07de      	lsls	r6, r3, #31
 80064a4:	d508      	bpl.n	80064b8 <_printf_i+0x148>
 80064a6:	6923      	ldr	r3, [r4, #16]
 80064a8:	6861      	ldr	r1, [r4, #4]
 80064aa:	4299      	cmp	r1, r3
 80064ac:	bfde      	ittt	le
 80064ae:	2330      	movle	r3, #48	; 0x30
 80064b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064b8:	1b52      	subs	r2, r2, r5
 80064ba:	6122      	str	r2, [r4, #16]
 80064bc:	f8cd a000 	str.w	sl, [sp]
 80064c0:	464b      	mov	r3, r9
 80064c2:	aa03      	add	r2, sp, #12
 80064c4:	4621      	mov	r1, r4
 80064c6:	4640      	mov	r0, r8
 80064c8:	f7ff fee4 	bl	8006294 <_printf_common>
 80064cc:	3001      	adds	r0, #1
 80064ce:	d14a      	bne.n	8006566 <_printf_i+0x1f6>
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295
 80064d4:	b004      	add	sp, #16
 80064d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	f043 0320 	orr.w	r3, r3, #32
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	4833      	ldr	r0, [pc, #204]	; (80065b0 <_printf_i+0x240>)
 80064e4:	2778      	movs	r7, #120	; 0x78
 80064e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	6829      	ldr	r1, [r5, #0]
 80064ee:	061f      	lsls	r7, r3, #24
 80064f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80064f4:	d402      	bmi.n	80064fc <_printf_i+0x18c>
 80064f6:	065f      	lsls	r7, r3, #25
 80064f8:	bf48      	it	mi
 80064fa:	b2b6      	uxthmi	r6, r6
 80064fc:	07df      	lsls	r7, r3, #31
 80064fe:	bf48      	it	mi
 8006500:	f043 0320 	orrmi.w	r3, r3, #32
 8006504:	6029      	str	r1, [r5, #0]
 8006506:	bf48      	it	mi
 8006508:	6023      	strmi	r3, [r4, #0]
 800650a:	b91e      	cbnz	r6, 8006514 <_printf_i+0x1a4>
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	f023 0320 	bic.w	r3, r3, #32
 8006512:	6023      	str	r3, [r4, #0]
 8006514:	2310      	movs	r3, #16
 8006516:	e7a7      	b.n	8006468 <_printf_i+0xf8>
 8006518:	4824      	ldr	r0, [pc, #144]	; (80065ac <_printf_i+0x23c>)
 800651a:	e7e4      	b.n	80064e6 <_printf_i+0x176>
 800651c:	4615      	mov	r5, r2
 800651e:	e7bd      	b.n	800649c <_printf_i+0x12c>
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	6826      	ldr	r6, [r4, #0]
 8006524:	6961      	ldr	r1, [r4, #20]
 8006526:	1d18      	adds	r0, r3, #4
 8006528:	6028      	str	r0, [r5, #0]
 800652a:	0635      	lsls	r5, r6, #24
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	d501      	bpl.n	8006534 <_printf_i+0x1c4>
 8006530:	6019      	str	r1, [r3, #0]
 8006532:	e002      	b.n	800653a <_printf_i+0x1ca>
 8006534:	0670      	lsls	r0, r6, #25
 8006536:	d5fb      	bpl.n	8006530 <_printf_i+0x1c0>
 8006538:	8019      	strh	r1, [r3, #0]
 800653a:	2300      	movs	r3, #0
 800653c:	6123      	str	r3, [r4, #16]
 800653e:	4615      	mov	r5, r2
 8006540:	e7bc      	b.n	80064bc <_printf_i+0x14c>
 8006542:	682b      	ldr	r3, [r5, #0]
 8006544:	1d1a      	adds	r2, r3, #4
 8006546:	602a      	str	r2, [r5, #0]
 8006548:	681d      	ldr	r5, [r3, #0]
 800654a:	6862      	ldr	r2, [r4, #4]
 800654c:	2100      	movs	r1, #0
 800654e:	4628      	mov	r0, r5
 8006550:	f7f9 fe76 	bl	8000240 <memchr>
 8006554:	b108      	cbz	r0, 800655a <_printf_i+0x1ea>
 8006556:	1b40      	subs	r0, r0, r5
 8006558:	6060      	str	r0, [r4, #4]
 800655a:	6863      	ldr	r3, [r4, #4]
 800655c:	6123      	str	r3, [r4, #16]
 800655e:	2300      	movs	r3, #0
 8006560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006564:	e7aa      	b.n	80064bc <_printf_i+0x14c>
 8006566:	6923      	ldr	r3, [r4, #16]
 8006568:	462a      	mov	r2, r5
 800656a:	4649      	mov	r1, r9
 800656c:	4640      	mov	r0, r8
 800656e:	47d0      	blx	sl
 8006570:	3001      	adds	r0, #1
 8006572:	d0ad      	beq.n	80064d0 <_printf_i+0x160>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	079b      	lsls	r3, r3, #30
 8006578:	d413      	bmi.n	80065a2 <_printf_i+0x232>
 800657a:	68e0      	ldr	r0, [r4, #12]
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	4298      	cmp	r0, r3
 8006580:	bfb8      	it	lt
 8006582:	4618      	movlt	r0, r3
 8006584:	e7a6      	b.n	80064d4 <_printf_i+0x164>
 8006586:	2301      	movs	r3, #1
 8006588:	4632      	mov	r2, r6
 800658a:	4649      	mov	r1, r9
 800658c:	4640      	mov	r0, r8
 800658e:	47d0      	blx	sl
 8006590:	3001      	adds	r0, #1
 8006592:	d09d      	beq.n	80064d0 <_printf_i+0x160>
 8006594:	3501      	adds	r5, #1
 8006596:	68e3      	ldr	r3, [r4, #12]
 8006598:	9903      	ldr	r1, [sp, #12]
 800659a:	1a5b      	subs	r3, r3, r1
 800659c:	42ab      	cmp	r3, r5
 800659e:	dcf2      	bgt.n	8006586 <_printf_i+0x216>
 80065a0:	e7eb      	b.n	800657a <_printf_i+0x20a>
 80065a2:	2500      	movs	r5, #0
 80065a4:	f104 0619 	add.w	r6, r4, #25
 80065a8:	e7f5      	b.n	8006596 <_printf_i+0x226>
 80065aa:	bf00      	nop
 80065ac:	0802e392 	.word	0x0802e392
 80065b0:	0802e3a3 	.word	0x0802e3a3

080065b4 <std>:
 80065b4:	2300      	movs	r3, #0
 80065b6:	b510      	push	{r4, lr}
 80065b8:	4604      	mov	r4, r0
 80065ba:	e9c0 3300 	strd	r3, r3, [r0]
 80065be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065c2:	6083      	str	r3, [r0, #8]
 80065c4:	8181      	strh	r1, [r0, #12]
 80065c6:	6643      	str	r3, [r0, #100]	; 0x64
 80065c8:	81c2      	strh	r2, [r0, #14]
 80065ca:	6183      	str	r3, [r0, #24]
 80065cc:	4619      	mov	r1, r3
 80065ce:	2208      	movs	r2, #8
 80065d0:	305c      	adds	r0, #92	; 0x5c
 80065d2:	f000 f902 	bl	80067da <memset>
 80065d6:	4b05      	ldr	r3, [pc, #20]	; (80065ec <std+0x38>)
 80065d8:	6263      	str	r3, [r4, #36]	; 0x24
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <std+0x3c>)
 80065dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80065de:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <std+0x40>)
 80065e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065e2:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <std+0x44>)
 80065e4:	6224      	str	r4, [r4, #32]
 80065e6:	6323      	str	r3, [r4, #48]	; 0x30
 80065e8:	bd10      	pop	{r4, pc}
 80065ea:	bf00      	nop
 80065ec:	08006755 	.word	0x08006755
 80065f0:	08006777 	.word	0x08006777
 80065f4:	080067af 	.word	0x080067af
 80065f8:	080067d3 	.word	0x080067d3

080065fc <stdio_exit_handler>:
 80065fc:	4a02      	ldr	r2, [pc, #8]	; (8006608 <stdio_exit_handler+0xc>)
 80065fe:	4903      	ldr	r1, [pc, #12]	; (800660c <stdio_exit_handler+0x10>)
 8006600:	4803      	ldr	r0, [pc, #12]	; (8006610 <stdio_exit_handler+0x14>)
 8006602:	f000 b869 	b.w	80066d8 <_fwalk_sglue>
 8006606:	bf00      	nop
 8006608:	20000010 	.word	0x20000010
 800660c:	08008175 	.word	0x08008175
 8006610:	2000001c 	.word	0x2000001c

08006614 <cleanup_stdio>:
 8006614:	6841      	ldr	r1, [r0, #4]
 8006616:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <cleanup_stdio+0x34>)
 8006618:	4299      	cmp	r1, r3
 800661a:	b510      	push	{r4, lr}
 800661c:	4604      	mov	r4, r0
 800661e:	d001      	beq.n	8006624 <cleanup_stdio+0x10>
 8006620:	f001 fda8 	bl	8008174 <_fflush_r>
 8006624:	68a1      	ldr	r1, [r4, #8]
 8006626:	4b09      	ldr	r3, [pc, #36]	; (800664c <cleanup_stdio+0x38>)
 8006628:	4299      	cmp	r1, r3
 800662a:	d002      	beq.n	8006632 <cleanup_stdio+0x1e>
 800662c:	4620      	mov	r0, r4
 800662e:	f001 fda1 	bl	8008174 <_fflush_r>
 8006632:	68e1      	ldr	r1, [r4, #12]
 8006634:	4b06      	ldr	r3, [pc, #24]	; (8006650 <cleanup_stdio+0x3c>)
 8006636:	4299      	cmp	r1, r3
 8006638:	d004      	beq.n	8006644 <cleanup_stdio+0x30>
 800663a:	4620      	mov	r0, r4
 800663c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006640:	f001 bd98 	b.w	8008174 <_fflush_r>
 8006644:	bd10      	pop	{r4, pc}
 8006646:	bf00      	nop
 8006648:	20000334 	.word	0x20000334
 800664c:	2000039c 	.word	0x2000039c
 8006650:	20000404 	.word	0x20000404

08006654 <global_stdio_init.part.0>:
 8006654:	b510      	push	{r4, lr}
 8006656:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <global_stdio_init.part.0+0x30>)
 8006658:	4c0b      	ldr	r4, [pc, #44]	; (8006688 <global_stdio_init.part.0+0x34>)
 800665a:	4a0c      	ldr	r2, [pc, #48]	; (800668c <global_stdio_init.part.0+0x38>)
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	4620      	mov	r0, r4
 8006660:	2200      	movs	r2, #0
 8006662:	2104      	movs	r1, #4
 8006664:	f7ff ffa6 	bl	80065b4 <std>
 8006668:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800666c:	2201      	movs	r2, #1
 800666e:	2109      	movs	r1, #9
 8006670:	f7ff ffa0 	bl	80065b4 <std>
 8006674:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006678:	2202      	movs	r2, #2
 800667a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800667e:	2112      	movs	r1, #18
 8006680:	f7ff bf98 	b.w	80065b4 <std>
 8006684:	2000046c 	.word	0x2000046c
 8006688:	20000334 	.word	0x20000334
 800668c:	080065fd 	.word	0x080065fd

08006690 <__sfp_lock_acquire>:
 8006690:	4801      	ldr	r0, [pc, #4]	; (8006698 <__sfp_lock_acquire+0x8>)
 8006692:	f000 b91f 	b.w	80068d4 <__retarget_lock_acquire_recursive>
 8006696:	bf00      	nop
 8006698:	20000475 	.word	0x20000475

0800669c <__sfp_lock_release>:
 800669c:	4801      	ldr	r0, [pc, #4]	; (80066a4 <__sfp_lock_release+0x8>)
 800669e:	f000 b91a 	b.w	80068d6 <__retarget_lock_release_recursive>
 80066a2:	bf00      	nop
 80066a4:	20000475 	.word	0x20000475

080066a8 <__sinit>:
 80066a8:	b510      	push	{r4, lr}
 80066aa:	4604      	mov	r4, r0
 80066ac:	f7ff fff0 	bl	8006690 <__sfp_lock_acquire>
 80066b0:	6a23      	ldr	r3, [r4, #32]
 80066b2:	b11b      	cbz	r3, 80066bc <__sinit+0x14>
 80066b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066b8:	f7ff bff0 	b.w	800669c <__sfp_lock_release>
 80066bc:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <__sinit+0x28>)
 80066be:	6223      	str	r3, [r4, #32]
 80066c0:	4b04      	ldr	r3, [pc, #16]	; (80066d4 <__sinit+0x2c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f5      	bne.n	80066b4 <__sinit+0xc>
 80066c8:	f7ff ffc4 	bl	8006654 <global_stdio_init.part.0>
 80066cc:	e7f2      	b.n	80066b4 <__sinit+0xc>
 80066ce:	bf00      	nop
 80066d0:	08006615 	.word	0x08006615
 80066d4:	2000046c 	.word	0x2000046c

080066d8 <_fwalk_sglue>:
 80066d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066dc:	4607      	mov	r7, r0
 80066de:	4688      	mov	r8, r1
 80066e0:	4614      	mov	r4, r2
 80066e2:	2600      	movs	r6, #0
 80066e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066e8:	f1b9 0901 	subs.w	r9, r9, #1
 80066ec:	d505      	bpl.n	80066fa <_fwalk_sglue+0x22>
 80066ee:	6824      	ldr	r4, [r4, #0]
 80066f0:	2c00      	cmp	r4, #0
 80066f2:	d1f7      	bne.n	80066e4 <_fwalk_sglue+0xc>
 80066f4:	4630      	mov	r0, r6
 80066f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066fa:	89ab      	ldrh	r3, [r5, #12]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d907      	bls.n	8006710 <_fwalk_sglue+0x38>
 8006700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006704:	3301      	adds	r3, #1
 8006706:	d003      	beq.n	8006710 <_fwalk_sglue+0x38>
 8006708:	4629      	mov	r1, r5
 800670a:	4638      	mov	r0, r7
 800670c:	47c0      	blx	r8
 800670e:	4306      	orrs	r6, r0
 8006710:	3568      	adds	r5, #104	; 0x68
 8006712:	e7e9      	b.n	80066e8 <_fwalk_sglue+0x10>

08006714 <siprintf>:
 8006714:	b40e      	push	{r1, r2, r3}
 8006716:	b500      	push	{lr}
 8006718:	b09c      	sub	sp, #112	; 0x70
 800671a:	ab1d      	add	r3, sp, #116	; 0x74
 800671c:	9002      	str	r0, [sp, #8]
 800671e:	9006      	str	r0, [sp, #24]
 8006720:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006724:	4809      	ldr	r0, [pc, #36]	; (800674c <siprintf+0x38>)
 8006726:	9107      	str	r1, [sp, #28]
 8006728:	9104      	str	r1, [sp, #16]
 800672a:	4909      	ldr	r1, [pc, #36]	; (8006750 <siprintf+0x3c>)
 800672c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006730:	9105      	str	r1, [sp, #20]
 8006732:	6800      	ldr	r0, [r0, #0]
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	a902      	add	r1, sp, #8
 8006738:	f001 fb98 	bl	8007e6c <_svfiprintf_r>
 800673c:	9b02      	ldr	r3, [sp, #8]
 800673e:	2200      	movs	r2, #0
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	b01c      	add	sp, #112	; 0x70
 8006744:	f85d eb04 	ldr.w	lr, [sp], #4
 8006748:	b003      	add	sp, #12
 800674a:	4770      	bx	lr
 800674c:	20000068 	.word	0x20000068
 8006750:	ffff0208 	.word	0xffff0208

08006754 <__sread>:
 8006754:	b510      	push	{r4, lr}
 8006756:	460c      	mov	r4, r1
 8006758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800675c:	f000 f86c 	bl	8006838 <_read_r>
 8006760:	2800      	cmp	r0, #0
 8006762:	bfab      	itete	ge
 8006764:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006766:	89a3      	ldrhlt	r3, [r4, #12]
 8006768:	181b      	addge	r3, r3, r0
 800676a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800676e:	bfac      	ite	ge
 8006770:	6563      	strge	r3, [r4, #84]	; 0x54
 8006772:	81a3      	strhlt	r3, [r4, #12]
 8006774:	bd10      	pop	{r4, pc}

08006776 <__swrite>:
 8006776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800677a:	461f      	mov	r7, r3
 800677c:	898b      	ldrh	r3, [r1, #12]
 800677e:	05db      	lsls	r3, r3, #23
 8006780:	4605      	mov	r5, r0
 8006782:	460c      	mov	r4, r1
 8006784:	4616      	mov	r6, r2
 8006786:	d505      	bpl.n	8006794 <__swrite+0x1e>
 8006788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800678c:	2302      	movs	r3, #2
 800678e:	2200      	movs	r2, #0
 8006790:	f000 f840 	bl	8006814 <_lseek_r>
 8006794:	89a3      	ldrh	r3, [r4, #12]
 8006796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800679a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800679e:	81a3      	strh	r3, [r4, #12]
 80067a0:	4632      	mov	r2, r6
 80067a2:	463b      	mov	r3, r7
 80067a4:	4628      	mov	r0, r5
 80067a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067aa:	f000 b857 	b.w	800685c <_write_r>

080067ae <__sseek>:
 80067ae:	b510      	push	{r4, lr}
 80067b0:	460c      	mov	r4, r1
 80067b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b6:	f000 f82d 	bl	8006814 <_lseek_r>
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	89a3      	ldrh	r3, [r4, #12]
 80067be:	bf15      	itete	ne
 80067c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80067c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067ca:	81a3      	strheq	r3, [r4, #12]
 80067cc:	bf18      	it	ne
 80067ce:	81a3      	strhne	r3, [r4, #12]
 80067d0:	bd10      	pop	{r4, pc}

080067d2 <__sclose>:
 80067d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d6:	f000 b80d 	b.w	80067f4 <_close_r>

080067da <memset>:
 80067da:	4402      	add	r2, r0
 80067dc:	4603      	mov	r3, r0
 80067de:	4293      	cmp	r3, r2
 80067e0:	d100      	bne.n	80067e4 <memset+0xa>
 80067e2:	4770      	bx	lr
 80067e4:	f803 1b01 	strb.w	r1, [r3], #1
 80067e8:	e7f9      	b.n	80067de <memset+0x4>
	...

080067ec <_localeconv_r>:
 80067ec:	4800      	ldr	r0, [pc, #0]	; (80067f0 <_localeconv_r+0x4>)
 80067ee:	4770      	bx	lr
 80067f0:	2000015c 	.word	0x2000015c

080067f4 <_close_r>:
 80067f4:	b538      	push	{r3, r4, r5, lr}
 80067f6:	4d06      	ldr	r5, [pc, #24]	; (8006810 <_close_r+0x1c>)
 80067f8:	2300      	movs	r3, #0
 80067fa:	4604      	mov	r4, r0
 80067fc:	4608      	mov	r0, r1
 80067fe:	602b      	str	r3, [r5, #0]
 8006800:	f7fa fe3d 	bl	800147e <_close>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d102      	bne.n	800680e <_close_r+0x1a>
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	b103      	cbz	r3, 800680e <_close_r+0x1a>
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	bd38      	pop	{r3, r4, r5, pc}
 8006810:	20000470 	.word	0x20000470

08006814 <_lseek_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4d07      	ldr	r5, [pc, #28]	; (8006834 <_lseek_r+0x20>)
 8006818:	4604      	mov	r4, r0
 800681a:	4608      	mov	r0, r1
 800681c:	4611      	mov	r1, r2
 800681e:	2200      	movs	r2, #0
 8006820:	602a      	str	r2, [r5, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	f7fa fe52 	bl	80014cc <_lseek>
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	d102      	bne.n	8006832 <_lseek_r+0x1e>
 800682c:	682b      	ldr	r3, [r5, #0]
 800682e:	b103      	cbz	r3, 8006832 <_lseek_r+0x1e>
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	bd38      	pop	{r3, r4, r5, pc}
 8006834:	20000470 	.word	0x20000470

08006838 <_read_r>:
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	4d07      	ldr	r5, [pc, #28]	; (8006858 <_read_r+0x20>)
 800683c:	4604      	mov	r4, r0
 800683e:	4608      	mov	r0, r1
 8006840:	4611      	mov	r1, r2
 8006842:	2200      	movs	r2, #0
 8006844:	602a      	str	r2, [r5, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	f7fa fde0 	bl	800140c <_read>
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	d102      	bne.n	8006856 <_read_r+0x1e>
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	b103      	cbz	r3, 8006856 <_read_r+0x1e>
 8006854:	6023      	str	r3, [r4, #0]
 8006856:	bd38      	pop	{r3, r4, r5, pc}
 8006858:	20000470 	.word	0x20000470

0800685c <_write_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4d07      	ldr	r5, [pc, #28]	; (800687c <_write_r+0x20>)
 8006860:	4604      	mov	r4, r0
 8006862:	4608      	mov	r0, r1
 8006864:	4611      	mov	r1, r2
 8006866:	2200      	movs	r2, #0
 8006868:	602a      	str	r2, [r5, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	f7fa fdeb 	bl	8001446 <_write>
 8006870:	1c43      	adds	r3, r0, #1
 8006872:	d102      	bne.n	800687a <_write_r+0x1e>
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	b103      	cbz	r3, 800687a <_write_r+0x1e>
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	bd38      	pop	{r3, r4, r5, pc}
 800687c:	20000470 	.word	0x20000470

08006880 <__errno>:
 8006880:	4b01      	ldr	r3, [pc, #4]	; (8006888 <__errno+0x8>)
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	20000068 	.word	0x20000068

0800688c <__libc_init_array>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	4d0d      	ldr	r5, [pc, #52]	; (80068c4 <__libc_init_array+0x38>)
 8006890:	4c0d      	ldr	r4, [pc, #52]	; (80068c8 <__libc_init_array+0x3c>)
 8006892:	1b64      	subs	r4, r4, r5
 8006894:	10a4      	asrs	r4, r4, #2
 8006896:	2600      	movs	r6, #0
 8006898:	42a6      	cmp	r6, r4
 800689a:	d109      	bne.n	80068b0 <__libc_init_array+0x24>
 800689c:	4d0b      	ldr	r5, [pc, #44]	; (80068cc <__libc_init_array+0x40>)
 800689e:	4c0c      	ldr	r4, [pc, #48]	; (80068d0 <__libc_init_array+0x44>)
 80068a0:	f002 f80c 	bl	80088bc <_init>
 80068a4:	1b64      	subs	r4, r4, r5
 80068a6:	10a4      	asrs	r4, r4, #2
 80068a8:	2600      	movs	r6, #0
 80068aa:	42a6      	cmp	r6, r4
 80068ac:	d105      	bne.n	80068ba <__libc_init_array+0x2e>
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b4:	4798      	blx	r3
 80068b6:	3601      	adds	r6, #1
 80068b8:	e7ee      	b.n	8006898 <__libc_init_array+0xc>
 80068ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80068be:	4798      	blx	r3
 80068c0:	3601      	adds	r6, #1
 80068c2:	e7f2      	b.n	80068aa <__libc_init_array+0x1e>
 80068c4:	0802e6fc 	.word	0x0802e6fc
 80068c8:	0802e6fc 	.word	0x0802e6fc
 80068cc:	0802e6fc 	.word	0x0802e6fc
 80068d0:	0802e700 	.word	0x0802e700

080068d4 <__retarget_lock_acquire_recursive>:
 80068d4:	4770      	bx	lr

080068d6 <__retarget_lock_release_recursive>:
 80068d6:	4770      	bx	lr

080068d8 <quorem>:
 80068d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	6903      	ldr	r3, [r0, #16]
 80068de:	690c      	ldr	r4, [r1, #16]
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	4607      	mov	r7, r0
 80068e4:	db7e      	blt.n	80069e4 <quorem+0x10c>
 80068e6:	3c01      	subs	r4, #1
 80068e8:	f101 0814 	add.w	r8, r1, #20
 80068ec:	f100 0514 	add.w	r5, r0, #20
 80068f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068fe:	3301      	adds	r3, #1
 8006900:	429a      	cmp	r2, r3
 8006902:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006906:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800690a:	fbb2 f6f3 	udiv	r6, r2, r3
 800690e:	d331      	bcc.n	8006974 <quorem+0x9c>
 8006910:	f04f 0e00 	mov.w	lr, #0
 8006914:	4640      	mov	r0, r8
 8006916:	46ac      	mov	ip, r5
 8006918:	46f2      	mov	sl, lr
 800691a:	f850 2b04 	ldr.w	r2, [r0], #4
 800691e:	b293      	uxth	r3, r2
 8006920:	fb06 e303 	mla	r3, r6, r3, lr
 8006924:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006928:	0c1a      	lsrs	r2, r3, #16
 800692a:	b29b      	uxth	r3, r3
 800692c:	ebaa 0303 	sub.w	r3, sl, r3
 8006930:	f8dc a000 	ldr.w	sl, [ip]
 8006934:	fa13 f38a 	uxtah	r3, r3, sl
 8006938:	fb06 220e 	mla	r2, r6, lr, r2
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	9b00      	ldr	r3, [sp, #0]
 8006940:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006944:	b292      	uxth	r2, r2
 8006946:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800694a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800694e:	f8bd 3000 	ldrh.w	r3, [sp]
 8006952:	4581      	cmp	r9, r0
 8006954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006958:	f84c 3b04 	str.w	r3, [ip], #4
 800695c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006960:	d2db      	bcs.n	800691a <quorem+0x42>
 8006962:	f855 300b 	ldr.w	r3, [r5, fp]
 8006966:	b92b      	cbnz	r3, 8006974 <quorem+0x9c>
 8006968:	9b01      	ldr	r3, [sp, #4]
 800696a:	3b04      	subs	r3, #4
 800696c:	429d      	cmp	r5, r3
 800696e:	461a      	mov	r2, r3
 8006970:	d32c      	bcc.n	80069cc <quorem+0xf4>
 8006972:	613c      	str	r4, [r7, #16]
 8006974:	4638      	mov	r0, r7
 8006976:	f001 f91f 	bl	8007bb8 <__mcmp>
 800697a:	2800      	cmp	r0, #0
 800697c:	db22      	blt.n	80069c4 <quorem+0xec>
 800697e:	3601      	adds	r6, #1
 8006980:	4629      	mov	r1, r5
 8006982:	2000      	movs	r0, #0
 8006984:	f858 2b04 	ldr.w	r2, [r8], #4
 8006988:	f8d1 c000 	ldr.w	ip, [r1]
 800698c:	b293      	uxth	r3, r2
 800698e:	1ac3      	subs	r3, r0, r3
 8006990:	0c12      	lsrs	r2, r2, #16
 8006992:	fa13 f38c 	uxtah	r3, r3, ip
 8006996:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800699a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800699e:	b29b      	uxth	r3, r3
 80069a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069a4:	45c1      	cmp	r9, r8
 80069a6:	f841 3b04 	str.w	r3, [r1], #4
 80069aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069ae:	d2e9      	bcs.n	8006984 <quorem+0xac>
 80069b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069b8:	b922      	cbnz	r2, 80069c4 <quorem+0xec>
 80069ba:	3b04      	subs	r3, #4
 80069bc:	429d      	cmp	r5, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	d30a      	bcc.n	80069d8 <quorem+0x100>
 80069c2:	613c      	str	r4, [r7, #16]
 80069c4:	4630      	mov	r0, r6
 80069c6:	b003      	add	sp, #12
 80069c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	3b04      	subs	r3, #4
 80069d0:	2a00      	cmp	r2, #0
 80069d2:	d1ce      	bne.n	8006972 <quorem+0x9a>
 80069d4:	3c01      	subs	r4, #1
 80069d6:	e7c9      	b.n	800696c <quorem+0x94>
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	3b04      	subs	r3, #4
 80069dc:	2a00      	cmp	r2, #0
 80069de:	d1f0      	bne.n	80069c2 <quorem+0xea>
 80069e0:	3c01      	subs	r4, #1
 80069e2:	e7eb      	b.n	80069bc <quorem+0xe4>
 80069e4:	2000      	movs	r0, #0
 80069e6:	e7ee      	b.n	80069c6 <quorem+0xee>

080069e8 <_dtoa_r>:
 80069e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	ed2d 8b02 	vpush	{d8}
 80069f0:	69c5      	ldr	r5, [r0, #28]
 80069f2:	b091      	sub	sp, #68	; 0x44
 80069f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80069f8:	ec59 8b10 	vmov	r8, r9, d0
 80069fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80069fe:	9106      	str	r1, [sp, #24]
 8006a00:	4606      	mov	r6, r0
 8006a02:	9208      	str	r2, [sp, #32]
 8006a04:	930c      	str	r3, [sp, #48]	; 0x30
 8006a06:	b975      	cbnz	r5, 8006a26 <_dtoa_r+0x3e>
 8006a08:	2010      	movs	r0, #16
 8006a0a:	f000 fda5 	bl	8007558 <malloc>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	61f0      	str	r0, [r6, #28]
 8006a12:	b920      	cbnz	r0, 8006a1e <_dtoa_r+0x36>
 8006a14:	4ba6      	ldr	r3, [pc, #664]	; (8006cb0 <_dtoa_r+0x2c8>)
 8006a16:	21ef      	movs	r1, #239	; 0xef
 8006a18:	48a6      	ldr	r0, [pc, #664]	; (8006cb4 <_dtoa_r+0x2cc>)
 8006a1a:	f001 fc0b 	bl	8008234 <__assert_func>
 8006a1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a22:	6005      	str	r5, [r0, #0]
 8006a24:	60c5      	str	r5, [r0, #12]
 8006a26:	69f3      	ldr	r3, [r6, #28]
 8006a28:	6819      	ldr	r1, [r3, #0]
 8006a2a:	b151      	cbz	r1, 8006a42 <_dtoa_r+0x5a>
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	604a      	str	r2, [r1, #4]
 8006a30:	2301      	movs	r3, #1
 8006a32:	4093      	lsls	r3, r2
 8006a34:	608b      	str	r3, [r1, #8]
 8006a36:	4630      	mov	r0, r6
 8006a38:	f000 fe82 	bl	8007740 <_Bfree>
 8006a3c:	69f3      	ldr	r3, [r6, #28]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	f1b9 0300 	subs.w	r3, r9, #0
 8006a46:	bfbb      	ittet	lt
 8006a48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a4c:	9303      	strlt	r3, [sp, #12]
 8006a4e:	2300      	movge	r3, #0
 8006a50:	2201      	movlt	r2, #1
 8006a52:	bfac      	ite	ge
 8006a54:	6023      	strge	r3, [r4, #0]
 8006a56:	6022      	strlt	r2, [r4, #0]
 8006a58:	4b97      	ldr	r3, [pc, #604]	; (8006cb8 <_dtoa_r+0x2d0>)
 8006a5a:	9c03      	ldr	r4, [sp, #12]
 8006a5c:	43a3      	bics	r3, r4
 8006a5e:	d11c      	bne.n	8006a9a <_dtoa_r+0xb2>
 8006a60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a62:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006a6c:	ea53 0308 	orrs.w	r3, r3, r8
 8006a70:	f000 84fb 	beq.w	800746a <_dtoa_r+0xa82>
 8006a74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a76:	b963      	cbnz	r3, 8006a92 <_dtoa_r+0xaa>
 8006a78:	4b90      	ldr	r3, [pc, #576]	; (8006cbc <_dtoa_r+0x2d4>)
 8006a7a:	e020      	b.n	8006abe <_dtoa_r+0xd6>
 8006a7c:	4b90      	ldr	r3, [pc, #576]	; (8006cc0 <_dtoa_r+0x2d8>)
 8006a7e:	9301      	str	r3, [sp, #4]
 8006a80:	3308      	adds	r3, #8
 8006a82:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	9801      	ldr	r0, [sp, #4]
 8006a88:	b011      	add	sp, #68	; 0x44
 8006a8a:	ecbd 8b02 	vpop	{d8}
 8006a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a92:	4b8a      	ldr	r3, [pc, #552]	; (8006cbc <_dtoa_r+0x2d4>)
 8006a94:	9301      	str	r3, [sp, #4]
 8006a96:	3303      	adds	r3, #3
 8006a98:	e7f3      	b.n	8006a82 <_dtoa_r+0x9a>
 8006a9a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006a9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa6:	d10c      	bne.n	8006ac2 <_dtoa_r+0xda>
 8006aa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aaa:	2301      	movs	r3, #1
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 84d7 	beq.w	8007464 <_dtoa_r+0xa7c>
 8006ab6:	4b83      	ldr	r3, [pc, #524]	; (8006cc4 <_dtoa_r+0x2dc>)
 8006ab8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	3b01      	subs	r3, #1
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	e7e1      	b.n	8006a86 <_dtoa_r+0x9e>
 8006ac2:	aa0e      	add	r2, sp, #56	; 0x38
 8006ac4:	a90f      	add	r1, sp, #60	; 0x3c
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	eeb0 0b48 	vmov.f64	d0, d8
 8006acc:	f001 f91a 	bl	8007d04 <__d2b>
 8006ad0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006ad4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d046      	beq.n	8006b6a <_dtoa_r+0x182>
 8006adc:	eeb0 7b48 	vmov.f64	d7, d8
 8006ae0:	ee18 1a90 	vmov	r1, s17
 8006ae4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006ae8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8006aec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006af0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006af4:	2000      	movs	r0, #0
 8006af6:	ee07 1a90 	vmov	s15, r1
 8006afa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8006afe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8006c98 <_dtoa_r+0x2b0>
 8006b02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006b06:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8006ca0 <_dtoa_r+0x2b8>
 8006b0a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006b0e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8006ca8 <_dtoa_r+0x2c0>
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006b1a:	eeb0 7b46 	vmov.f64	d7, d6
 8006b1e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006b22:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006b26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b2e:	ee16 ba90 	vmov	fp, s13
 8006b32:	9009      	str	r0, [sp, #36]	; 0x24
 8006b34:	d508      	bpl.n	8006b48 <_dtoa_r+0x160>
 8006b36:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006b3a:	eeb4 6b47 	vcmp.f64	d6, d7
 8006b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b42:	bf18      	it	ne
 8006b44:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006b48:	f1bb 0f16 	cmp.w	fp, #22
 8006b4c:	d82b      	bhi.n	8006ba6 <_dtoa_r+0x1be>
 8006b4e:	495e      	ldr	r1, [pc, #376]	; (8006cc8 <_dtoa_r+0x2e0>)
 8006b50:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006b54:	ed91 7b00 	vldr	d7, [r1]
 8006b58:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b60:	d501      	bpl.n	8006b66 <_dtoa_r+0x17e>
 8006b62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b66:	2100      	movs	r1, #0
 8006b68:	e01e      	b.n	8006ba8 <_dtoa_r+0x1c0>
 8006b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8006b72:	2920      	cmp	r1, #32
 8006b74:	bfc1      	itttt	gt
 8006b76:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8006b7a:	408c      	lslgt	r4, r1
 8006b7c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8006b80:	fa28 f101 	lsrgt.w	r1, r8, r1
 8006b84:	bfd6      	itet	le
 8006b86:	f1c1 0120 	rsble	r1, r1, #32
 8006b8a:	4321      	orrgt	r1, r4
 8006b8c:	fa08 f101 	lslle.w	r1, r8, r1
 8006b90:	ee07 1a90 	vmov	s15, r1
 8006b94:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	ee17 1a90 	vmov	r1, s15
 8006b9e:	2001      	movs	r0, #1
 8006ba0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006ba4:	e7a7      	b.n	8006af6 <_dtoa_r+0x10e>
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	1ad2      	subs	r2, r2, r3
 8006baa:	1e53      	subs	r3, r2, #1
 8006bac:	9305      	str	r3, [sp, #20]
 8006bae:	bf45      	ittet	mi
 8006bb0:	f1c2 0301 	rsbmi	r3, r2, #1
 8006bb4:	9304      	strmi	r3, [sp, #16]
 8006bb6:	2300      	movpl	r3, #0
 8006bb8:	2300      	movmi	r3, #0
 8006bba:	bf4c      	ite	mi
 8006bbc:	9305      	strmi	r3, [sp, #20]
 8006bbe:	9304      	strpl	r3, [sp, #16]
 8006bc0:	f1bb 0f00 	cmp.w	fp, #0
 8006bc4:	910b      	str	r1, [sp, #44]	; 0x2c
 8006bc6:	db18      	blt.n	8006bfa <_dtoa_r+0x212>
 8006bc8:	9b05      	ldr	r3, [sp, #20]
 8006bca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006bce:	445b      	add	r3, fp
 8006bd0:	9305      	str	r3, [sp, #20]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	9a06      	ldr	r2, [sp, #24]
 8006bd6:	2a09      	cmp	r2, #9
 8006bd8:	d848      	bhi.n	8006c6c <_dtoa_r+0x284>
 8006bda:	2a05      	cmp	r2, #5
 8006bdc:	bfc4      	itt	gt
 8006bde:	3a04      	subgt	r2, #4
 8006be0:	9206      	strgt	r2, [sp, #24]
 8006be2:	9a06      	ldr	r2, [sp, #24]
 8006be4:	f1a2 0202 	sub.w	r2, r2, #2
 8006be8:	bfcc      	ite	gt
 8006bea:	2400      	movgt	r4, #0
 8006bec:	2401      	movle	r4, #1
 8006bee:	2a03      	cmp	r2, #3
 8006bf0:	d847      	bhi.n	8006c82 <_dtoa_r+0x29a>
 8006bf2:	e8df f002 	tbb	[pc, r2]
 8006bf6:	2d0b      	.short	0x2d0b
 8006bf8:	392b      	.short	0x392b
 8006bfa:	9b04      	ldr	r3, [sp, #16]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	eba3 030b 	sub.w	r3, r3, fp
 8006c02:	9304      	str	r3, [sp, #16]
 8006c04:	920a      	str	r2, [sp, #40]	; 0x28
 8006c06:	f1cb 0300 	rsb	r3, fp, #0
 8006c0a:	e7e3      	b.n	8006bd4 <_dtoa_r+0x1ec>
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	9207      	str	r2, [sp, #28]
 8006c10:	9a08      	ldr	r2, [sp, #32]
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	dc38      	bgt.n	8006c88 <_dtoa_r+0x2a0>
 8006c16:	f04f 0a01 	mov.w	sl, #1
 8006c1a:	46d1      	mov	r9, sl
 8006c1c:	4652      	mov	r2, sl
 8006c1e:	f8cd a020 	str.w	sl, [sp, #32]
 8006c22:	69f7      	ldr	r7, [r6, #28]
 8006c24:	2100      	movs	r1, #0
 8006c26:	2004      	movs	r0, #4
 8006c28:	f100 0c14 	add.w	ip, r0, #20
 8006c2c:	4594      	cmp	ip, r2
 8006c2e:	d930      	bls.n	8006c92 <_dtoa_r+0x2aa>
 8006c30:	6079      	str	r1, [r7, #4]
 8006c32:	4630      	mov	r0, r6
 8006c34:	930d      	str	r3, [sp, #52]	; 0x34
 8006c36:	f000 fd43 	bl	80076c0 <_Balloc>
 8006c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c3c:	9001      	str	r0, [sp, #4]
 8006c3e:	4602      	mov	r2, r0
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d145      	bne.n	8006cd0 <_dtoa_r+0x2e8>
 8006c44:	4b21      	ldr	r3, [pc, #132]	; (8006ccc <_dtoa_r+0x2e4>)
 8006c46:	f240 11af 	movw	r1, #431	; 0x1af
 8006c4a:	e6e5      	b.n	8006a18 <_dtoa_r+0x30>
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	e7de      	b.n	8006c0e <_dtoa_r+0x226>
 8006c50:	2200      	movs	r2, #0
 8006c52:	9207      	str	r2, [sp, #28]
 8006c54:	9a08      	ldr	r2, [sp, #32]
 8006c56:	eb0b 0a02 	add.w	sl, fp, r2
 8006c5a:	f10a 0901 	add.w	r9, sl, #1
 8006c5e:	464a      	mov	r2, r9
 8006c60:	2a01      	cmp	r2, #1
 8006c62:	bfb8      	it	lt
 8006c64:	2201      	movlt	r2, #1
 8006c66:	e7dc      	b.n	8006c22 <_dtoa_r+0x23a>
 8006c68:	2201      	movs	r2, #1
 8006c6a:	e7f2      	b.n	8006c52 <_dtoa_r+0x26a>
 8006c6c:	2401      	movs	r4, #1
 8006c6e:	2200      	movs	r2, #0
 8006c70:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006c74:	f04f 3aff 	mov.w	sl, #4294967295
 8006c78:	2100      	movs	r1, #0
 8006c7a:	46d1      	mov	r9, sl
 8006c7c:	2212      	movs	r2, #18
 8006c7e:	9108      	str	r1, [sp, #32]
 8006c80:	e7cf      	b.n	8006c22 <_dtoa_r+0x23a>
 8006c82:	2201      	movs	r2, #1
 8006c84:	9207      	str	r2, [sp, #28]
 8006c86:	e7f5      	b.n	8006c74 <_dtoa_r+0x28c>
 8006c88:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006c8c:	46d1      	mov	r9, sl
 8006c8e:	4652      	mov	r2, sl
 8006c90:	e7c7      	b.n	8006c22 <_dtoa_r+0x23a>
 8006c92:	3101      	adds	r1, #1
 8006c94:	0040      	lsls	r0, r0, #1
 8006c96:	e7c7      	b.n	8006c28 <_dtoa_r+0x240>
 8006c98:	636f4361 	.word	0x636f4361
 8006c9c:	3fd287a7 	.word	0x3fd287a7
 8006ca0:	8b60c8b3 	.word	0x8b60c8b3
 8006ca4:	3fc68a28 	.word	0x3fc68a28
 8006ca8:	509f79fb 	.word	0x509f79fb
 8006cac:	3fd34413 	.word	0x3fd34413
 8006cb0:	0802e3c1 	.word	0x0802e3c1
 8006cb4:	0802e3d8 	.word	0x0802e3d8
 8006cb8:	7ff00000 	.word	0x7ff00000
 8006cbc:	0802e3bd 	.word	0x0802e3bd
 8006cc0:	0802e3b4 	.word	0x0802e3b4
 8006cc4:	0802e391 	.word	0x0802e391
 8006cc8:	0802e4c8 	.word	0x0802e4c8
 8006ccc:	0802e430 	.word	0x0802e430
 8006cd0:	69f2      	ldr	r2, [r6, #28]
 8006cd2:	9901      	ldr	r1, [sp, #4]
 8006cd4:	6011      	str	r1, [r2, #0]
 8006cd6:	f1b9 0f0e 	cmp.w	r9, #14
 8006cda:	d86c      	bhi.n	8006db6 <_dtoa_r+0x3ce>
 8006cdc:	2c00      	cmp	r4, #0
 8006cde:	d06a      	beq.n	8006db6 <_dtoa_r+0x3ce>
 8006ce0:	f1bb 0f00 	cmp.w	fp, #0
 8006ce4:	f340 80a0 	ble.w	8006e28 <_dtoa_r+0x440>
 8006ce8:	4ac1      	ldr	r2, [pc, #772]	; (8006ff0 <_dtoa_r+0x608>)
 8006cea:	f00b 010f 	and.w	r1, fp, #15
 8006cee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006cf2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006cf6:	ed92 7b00 	vldr	d7, [r2]
 8006cfa:	ea4f 122b 	mov.w	r2, fp, asr #4
 8006cfe:	f000 8087 	beq.w	8006e10 <_dtoa_r+0x428>
 8006d02:	49bc      	ldr	r1, [pc, #752]	; (8006ff4 <_dtoa_r+0x60c>)
 8006d04:	ed91 6b08 	vldr	d6, [r1, #32]
 8006d08:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006d0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006d10:	f002 020f 	and.w	r2, r2, #15
 8006d14:	2103      	movs	r1, #3
 8006d16:	48b7      	ldr	r0, [pc, #732]	; (8006ff4 <_dtoa_r+0x60c>)
 8006d18:	2a00      	cmp	r2, #0
 8006d1a:	d17b      	bne.n	8006e14 <_dtoa_r+0x42c>
 8006d1c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006d20:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006d24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d2e:	2a00      	cmp	r2, #0
 8006d30:	f000 80a0 	beq.w	8006e74 <_dtoa_r+0x48c>
 8006d34:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006d38:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d40:	f140 8098 	bpl.w	8006e74 <_dtoa_r+0x48c>
 8006d44:	f1b9 0f00 	cmp.w	r9, #0
 8006d48:	f000 8094 	beq.w	8006e74 <_dtoa_r+0x48c>
 8006d4c:	f1ba 0f00 	cmp.w	sl, #0
 8006d50:	dd2f      	ble.n	8006db2 <_dtoa_r+0x3ca>
 8006d52:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006d56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d5a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006d5e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006d62:	3101      	adds	r1, #1
 8006d64:	4654      	mov	r4, sl
 8006d66:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006d6a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006d6e:	ee07 1a90 	vmov	s15, r1
 8006d72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d76:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006d7a:	ee15 7a90 	vmov	r7, s11
 8006d7e:	ec51 0b15 	vmov	r0, r1, d5
 8006d82:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8006d86:	2c00      	cmp	r4, #0
 8006d88:	d177      	bne.n	8006e7a <_dtoa_r+0x492>
 8006d8a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006d8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d92:	ec41 0b17 	vmov	d7, r0, r1
 8006d96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d9e:	f300 826a 	bgt.w	8007276 <_dtoa_r+0x88e>
 8006da2:	eeb1 7b47 	vneg.f64	d7, d7
 8006da6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dae:	f100 8260 	bmi.w	8007272 <_dtoa_r+0x88a>
 8006db2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006db6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006db8:	2a00      	cmp	r2, #0
 8006dba:	f2c0 811d 	blt.w	8006ff8 <_dtoa_r+0x610>
 8006dbe:	f1bb 0f0e 	cmp.w	fp, #14
 8006dc2:	f300 8119 	bgt.w	8006ff8 <_dtoa_r+0x610>
 8006dc6:	4b8a      	ldr	r3, [pc, #552]	; (8006ff0 <_dtoa_r+0x608>)
 8006dc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006dcc:	ed93 6b00 	vldr	d6, [r3]
 8006dd0:	9b08      	ldr	r3, [sp, #32]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f280 80b7 	bge.w	8006f46 <_dtoa_r+0x55e>
 8006dd8:	f1b9 0f00 	cmp.w	r9, #0
 8006ddc:	f300 80b3 	bgt.w	8006f46 <_dtoa_r+0x55e>
 8006de0:	f040 8246 	bne.w	8007270 <_dtoa_r+0x888>
 8006de4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006de8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006dec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006df0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df8:	464c      	mov	r4, r9
 8006dfa:	464f      	mov	r7, r9
 8006dfc:	f280 821c 	bge.w	8007238 <_dtoa_r+0x850>
 8006e00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006e04:	2331      	movs	r3, #49	; 0x31
 8006e06:	f808 3b01 	strb.w	r3, [r8], #1
 8006e0a:	f10b 0b01 	add.w	fp, fp, #1
 8006e0e:	e218      	b.n	8007242 <_dtoa_r+0x85a>
 8006e10:	2102      	movs	r1, #2
 8006e12:	e780      	b.n	8006d16 <_dtoa_r+0x32e>
 8006e14:	07d4      	lsls	r4, r2, #31
 8006e16:	d504      	bpl.n	8006e22 <_dtoa_r+0x43a>
 8006e18:	ed90 6b00 	vldr	d6, [r0]
 8006e1c:	3101      	adds	r1, #1
 8006e1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e22:	1052      	asrs	r2, r2, #1
 8006e24:	3008      	adds	r0, #8
 8006e26:	e777      	b.n	8006d18 <_dtoa_r+0x330>
 8006e28:	d022      	beq.n	8006e70 <_dtoa_r+0x488>
 8006e2a:	f1cb 0200 	rsb	r2, fp, #0
 8006e2e:	4970      	ldr	r1, [pc, #448]	; (8006ff0 <_dtoa_r+0x608>)
 8006e30:	f002 000f 	and.w	r0, r2, #15
 8006e34:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006e38:	ed91 7b00 	vldr	d7, [r1]
 8006e3c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006e40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006e44:	486b      	ldr	r0, [pc, #428]	; (8006ff4 <_dtoa_r+0x60c>)
 8006e46:	1112      	asrs	r2, r2, #4
 8006e48:	2400      	movs	r4, #0
 8006e4a:	2102      	movs	r1, #2
 8006e4c:	b92a      	cbnz	r2, 8006e5a <_dtoa_r+0x472>
 8006e4e:	2c00      	cmp	r4, #0
 8006e50:	f43f af6a 	beq.w	8006d28 <_dtoa_r+0x340>
 8006e54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006e58:	e766      	b.n	8006d28 <_dtoa_r+0x340>
 8006e5a:	07d7      	lsls	r7, r2, #31
 8006e5c:	d505      	bpl.n	8006e6a <_dtoa_r+0x482>
 8006e5e:	ed90 6b00 	vldr	d6, [r0]
 8006e62:	3101      	adds	r1, #1
 8006e64:	2401      	movs	r4, #1
 8006e66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e6a:	1052      	asrs	r2, r2, #1
 8006e6c:	3008      	adds	r0, #8
 8006e6e:	e7ed      	b.n	8006e4c <_dtoa_r+0x464>
 8006e70:	2102      	movs	r1, #2
 8006e72:	e759      	b.n	8006d28 <_dtoa_r+0x340>
 8006e74:	465a      	mov	r2, fp
 8006e76:	464c      	mov	r4, r9
 8006e78:	e775      	b.n	8006d66 <_dtoa_r+0x37e>
 8006e7a:	ec41 0b17 	vmov	d7, r0, r1
 8006e7e:	495c      	ldr	r1, [pc, #368]	; (8006ff0 <_dtoa_r+0x608>)
 8006e80:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8006e84:	ed11 4b02 	vldr	d4, [r1, #-8]
 8006e88:	9901      	ldr	r1, [sp, #4]
 8006e8a:	440c      	add	r4, r1
 8006e8c:	9907      	ldr	r1, [sp, #28]
 8006e8e:	b351      	cbz	r1, 8006ee6 <_dtoa_r+0x4fe>
 8006e90:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006e94:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006e98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006e9c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006ea0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006ea4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006ea8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006eac:	ee14 1a90 	vmov	r1, s9
 8006eb0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006eb4:	3130      	adds	r1, #48	; 0x30
 8006eb6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006eba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec2:	f808 1b01 	strb.w	r1, [r8], #1
 8006ec6:	d439      	bmi.n	8006f3c <_dtoa_r+0x554>
 8006ec8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006ecc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed4:	d472      	bmi.n	8006fbc <_dtoa_r+0x5d4>
 8006ed6:	45a0      	cmp	r8, r4
 8006ed8:	f43f af6b 	beq.w	8006db2 <_dtoa_r+0x3ca>
 8006edc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006ee0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006ee4:	e7e0      	b.n	8006ea8 <_dtoa_r+0x4c0>
 8006ee6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006eea:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006eee:	4620      	mov	r0, r4
 8006ef0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006ef4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006ef8:	ee14 1a90 	vmov	r1, s9
 8006efc:	3130      	adds	r1, #48	; 0x30
 8006efe:	f808 1b01 	strb.w	r1, [r8], #1
 8006f02:	45a0      	cmp	r8, r4
 8006f04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006f08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006f0c:	d118      	bne.n	8006f40 <_dtoa_r+0x558>
 8006f0e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006f12:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006f16:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1e:	dc4d      	bgt.n	8006fbc <_dtoa_r+0x5d4>
 8006f20:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006f24:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2c:	f57f af41 	bpl.w	8006db2 <_dtoa_r+0x3ca>
 8006f30:	4680      	mov	r8, r0
 8006f32:	3801      	subs	r0, #1
 8006f34:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006f38:	2b30      	cmp	r3, #48	; 0x30
 8006f3a:	d0f9      	beq.n	8006f30 <_dtoa_r+0x548>
 8006f3c:	4693      	mov	fp, r2
 8006f3e:	e02a      	b.n	8006f96 <_dtoa_r+0x5ae>
 8006f40:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006f44:	e7d6      	b.n	8006ef4 <_dtoa_r+0x50c>
 8006f46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f4a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006f4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006f52:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006f56:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006f5a:	ee15 3a10 	vmov	r3, s10
 8006f5e:	3330      	adds	r3, #48	; 0x30
 8006f60:	f808 3b01 	strb.w	r3, [r8], #1
 8006f64:	9b01      	ldr	r3, [sp, #4]
 8006f66:	eba8 0303 	sub.w	r3, r8, r3
 8006f6a:	4599      	cmp	r9, r3
 8006f6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006f70:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006f74:	d133      	bne.n	8006fde <_dtoa_r+0x5f6>
 8006f76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006f7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f82:	dc1a      	bgt.n	8006fba <_dtoa_r+0x5d2>
 8006f84:	eeb4 7b46 	vcmp.f64	d7, d6
 8006f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8c:	d103      	bne.n	8006f96 <_dtoa_r+0x5ae>
 8006f8e:	ee15 3a10 	vmov	r3, s10
 8006f92:	07d9      	lsls	r1, r3, #31
 8006f94:	d411      	bmi.n	8006fba <_dtoa_r+0x5d2>
 8006f96:	4629      	mov	r1, r5
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f000 fbd1 	bl	8007740 <_Bfree>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fa2:	f888 3000 	strb.w	r3, [r8]
 8006fa6:	f10b 0301 	add.w	r3, fp, #1
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f43f ad69 	beq.w	8006a86 <_dtoa_r+0x9e>
 8006fb4:	f8c3 8000 	str.w	r8, [r3]
 8006fb8:	e565      	b.n	8006a86 <_dtoa_r+0x9e>
 8006fba:	465a      	mov	r2, fp
 8006fbc:	4643      	mov	r3, r8
 8006fbe:	4698      	mov	r8, r3
 8006fc0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8006fc4:	2939      	cmp	r1, #57	; 0x39
 8006fc6:	d106      	bne.n	8006fd6 <_dtoa_r+0x5ee>
 8006fc8:	9901      	ldr	r1, [sp, #4]
 8006fca:	4299      	cmp	r1, r3
 8006fcc:	d1f7      	bne.n	8006fbe <_dtoa_r+0x5d6>
 8006fce:	9801      	ldr	r0, [sp, #4]
 8006fd0:	2130      	movs	r1, #48	; 0x30
 8006fd2:	3201      	adds	r2, #1
 8006fd4:	7001      	strb	r1, [r0, #0]
 8006fd6:	7819      	ldrb	r1, [r3, #0]
 8006fd8:	3101      	adds	r1, #1
 8006fda:	7019      	strb	r1, [r3, #0]
 8006fdc:	e7ae      	b.n	8006f3c <_dtoa_r+0x554>
 8006fde:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006fe2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fea:	d1b2      	bne.n	8006f52 <_dtoa_r+0x56a>
 8006fec:	e7d3      	b.n	8006f96 <_dtoa_r+0x5ae>
 8006fee:	bf00      	nop
 8006ff0:	0802e4c8 	.word	0x0802e4c8
 8006ff4:	0802e4a0 	.word	0x0802e4a0
 8006ff8:	9907      	ldr	r1, [sp, #28]
 8006ffa:	2900      	cmp	r1, #0
 8006ffc:	f000 80d0 	beq.w	80071a0 <_dtoa_r+0x7b8>
 8007000:	9906      	ldr	r1, [sp, #24]
 8007002:	2901      	cmp	r1, #1
 8007004:	f300 80b4 	bgt.w	8007170 <_dtoa_r+0x788>
 8007008:	9909      	ldr	r1, [sp, #36]	; 0x24
 800700a:	2900      	cmp	r1, #0
 800700c:	f000 80ac 	beq.w	8007168 <_dtoa_r+0x780>
 8007010:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007014:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007018:	461c      	mov	r4, r3
 800701a:	9309      	str	r3, [sp, #36]	; 0x24
 800701c:	9b04      	ldr	r3, [sp, #16]
 800701e:	4413      	add	r3, r2
 8007020:	9304      	str	r3, [sp, #16]
 8007022:	9b05      	ldr	r3, [sp, #20]
 8007024:	2101      	movs	r1, #1
 8007026:	4413      	add	r3, r2
 8007028:	4630      	mov	r0, r6
 800702a:	9305      	str	r3, [sp, #20]
 800702c:	f000 fc3e 	bl	80078ac <__i2b>
 8007030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007032:	4607      	mov	r7, r0
 8007034:	f1b8 0f00 	cmp.w	r8, #0
 8007038:	d00d      	beq.n	8007056 <_dtoa_r+0x66e>
 800703a:	9a05      	ldr	r2, [sp, #20]
 800703c:	2a00      	cmp	r2, #0
 800703e:	dd0a      	ble.n	8007056 <_dtoa_r+0x66e>
 8007040:	4542      	cmp	r2, r8
 8007042:	9904      	ldr	r1, [sp, #16]
 8007044:	bfa8      	it	ge
 8007046:	4642      	movge	r2, r8
 8007048:	1a89      	subs	r1, r1, r2
 800704a:	9104      	str	r1, [sp, #16]
 800704c:	9905      	ldr	r1, [sp, #20]
 800704e:	eba8 0802 	sub.w	r8, r8, r2
 8007052:	1a8a      	subs	r2, r1, r2
 8007054:	9205      	str	r2, [sp, #20]
 8007056:	b303      	cbz	r3, 800709a <_dtoa_r+0x6b2>
 8007058:	9a07      	ldr	r2, [sp, #28]
 800705a:	2a00      	cmp	r2, #0
 800705c:	f000 80a5 	beq.w	80071aa <_dtoa_r+0x7c2>
 8007060:	2c00      	cmp	r4, #0
 8007062:	dd13      	ble.n	800708c <_dtoa_r+0x6a4>
 8007064:	4639      	mov	r1, r7
 8007066:	4622      	mov	r2, r4
 8007068:	4630      	mov	r0, r6
 800706a:	930d      	str	r3, [sp, #52]	; 0x34
 800706c:	f000 fcde 	bl	8007a2c <__pow5mult>
 8007070:	462a      	mov	r2, r5
 8007072:	4601      	mov	r1, r0
 8007074:	4607      	mov	r7, r0
 8007076:	4630      	mov	r0, r6
 8007078:	f000 fc2e 	bl	80078d8 <__multiply>
 800707c:	4629      	mov	r1, r5
 800707e:	9009      	str	r0, [sp, #36]	; 0x24
 8007080:	4630      	mov	r0, r6
 8007082:	f000 fb5d 	bl	8007740 <_Bfree>
 8007086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800708a:	4615      	mov	r5, r2
 800708c:	1b1a      	subs	r2, r3, r4
 800708e:	d004      	beq.n	800709a <_dtoa_r+0x6b2>
 8007090:	4629      	mov	r1, r5
 8007092:	4630      	mov	r0, r6
 8007094:	f000 fcca 	bl	8007a2c <__pow5mult>
 8007098:	4605      	mov	r5, r0
 800709a:	2101      	movs	r1, #1
 800709c:	4630      	mov	r0, r6
 800709e:	f000 fc05 	bl	80078ac <__i2b>
 80070a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	4604      	mov	r4, r0
 80070a8:	f340 8081 	ble.w	80071ae <_dtoa_r+0x7c6>
 80070ac:	461a      	mov	r2, r3
 80070ae:	4601      	mov	r1, r0
 80070b0:	4630      	mov	r0, r6
 80070b2:	f000 fcbb 	bl	8007a2c <__pow5mult>
 80070b6:	9b06      	ldr	r3, [sp, #24]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	4604      	mov	r4, r0
 80070bc:	dd7a      	ble.n	80071b4 <_dtoa_r+0x7cc>
 80070be:	2300      	movs	r3, #0
 80070c0:	9309      	str	r3, [sp, #36]	; 0x24
 80070c2:	6922      	ldr	r2, [r4, #16]
 80070c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80070c8:	6910      	ldr	r0, [r2, #16]
 80070ca:	f000 fba1 	bl	8007810 <__hi0bits>
 80070ce:	f1c0 0020 	rsb	r0, r0, #32
 80070d2:	9b05      	ldr	r3, [sp, #20]
 80070d4:	4418      	add	r0, r3
 80070d6:	f010 001f 	ands.w	r0, r0, #31
 80070da:	f000 8093 	beq.w	8007204 <_dtoa_r+0x81c>
 80070de:	f1c0 0220 	rsb	r2, r0, #32
 80070e2:	2a04      	cmp	r2, #4
 80070e4:	f340 8085 	ble.w	80071f2 <_dtoa_r+0x80a>
 80070e8:	9b04      	ldr	r3, [sp, #16]
 80070ea:	f1c0 001c 	rsb	r0, r0, #28
 80070ee:	4403      	add	r3, r0
 80070f0:	9304      	str	r3, [sp, #16]
 80070f2:	9b05      	ldr	r3, [sp, #20]
 80070f4:	4480      	add	r8, r0
 80070f6:	4403      	add	r3, r0
 80070f8:	9305      	str	r3, [sp, #20]
 80070fa:	9b04      	ldr	r3, [sp, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	dd05      	ble.n	800710c <_dtoa_r+0x724>
 8007100:	4629      	mov	r1, r5
 8007102:	461a      	mov	r2, r3
 8007104:	4630      	mov	r0, r6
 8007106:	f000 fceb 	bl	8007ae0 <__lshift>
 800710a:	4605      	mov	r5, r0
 800710c:	9b05      	ldr	r3, [sp, #20]
 800710e:	2b00      	cmp	r3, #0
 8007110:	dd05      	ble.n	800711e <_dtoa_r+0x736>
 8007112:	4621      	mov	r1, r4
 8007114:	461a      	mov	r2, r3
 8007116:	4630      	mov	r0, r6
 8007118:	f000 fce2 	bl	8007ae0 <__lshift>
 800711c:	4604      	mov	r4, r0
 800711e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d071      	beq.n	8007208 <_dtoa_r+0x820>
 8007124:	4621      	mov	r1, r4
 8007126:	4628      	mov	r0, r5
 8007128:	f000 fd46 	bl	8007bb8 <__mcmp>
 800712c:	2800      	cmp	r0, #0
 800712e:	da6b      	bge.n	8007208 <_dtoa_r+0x820>
 8007130:	2300      	movs	r3, #0
 8007132:	4629      	mov	r1, r5
 8007134:	220a      	movs	r2, #10
 8007136:	4630      	mov	r0, r6
 8007138:	f000 fb24 	bl	8007784 <__multadd>
 800713c:	9b07      	ldr	r3, [sp, #28]
 800713e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007142:	4605      	mov	r5, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 8197 	beq.w	8007478 <_dtoa_r+0xa90>
 800714a:	4639      	mov	r1, r7
 800714c:	2300      	movs	r3, #0
 800714e:	220a      	movs	r2, #10
 8007150:	4630      	mov	r0, r6
 8007152:	f000 fb17 	bl	8007784 <__multadd>
 8007156:	f1ba 0f00 	cmp.w	sl, #0
 800715a:	4607      	mov	r7, r0
 800715c:	f300 8093 	bgt.w	8007286 <_dtoa_r+0x89e>
 8007160:	9b06      	ldr	r3, [sp, #24]
 8007162:	2b02      	cmp	r3, #2
 8007164:	dc57      	bgt.n	8007216 <_dtoa_r+0x82e>
 8007166:	e08e      	b.n	8007286 <_dtoa_r+0x89e>
 8007168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800716a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800716e:	e751      	b.n	8007014 <_dtoa_r+0x62c>
 8007170:	f109 34ff 	add.w	r4, r9, #4294967295
 8007174:	42a3      	cmp	r3, r4
 8007176:	bfbf      	itttt	lt
 8007178:	1ae2      	sublt	r2, r4, r3
 800717a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800717c:	189b      	addlt	r3, r3, r2
 800717e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007180:	bfae      	itee	ge
 8007182:	1b1c      	subge	r4, r3, r4
 8007184:	4623      	movlt	r3, r4
 8007186:	2400      	movlt	r4, #0
 8007188:	f1b9 0f00 	cmp.w	r9, #0
 800718c:	bfb5      	itete	lt
 800718e:	9a04      	ldrlt	r2, [sp, #16]
 8007190:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007194:	eba2 0809 	sublt.w	r8, r2, r9
 8007198:	464a      	movge	r2, r9
 800719a:	bfb8      	it	lt
 800719c:	2200      	movlt	r2, #0
 800719e:	e73c      	b.n	800701a <_dtoa_r+0x632>
 80071a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80071a4:	9f07      	ldr	r7, [sp, #28]
 80071a6:	461c      	mov	r4, r3
 80071a8:	e744      	b.n	8007034 <_dtoa_r+0x64c>
 80071aa:	461a      	mov	r2, r3
 80071ac:	e770      	b.n	8007090 <_dtoa_r+0x6a8>
 80071ae:	9b06      	ldr	r3, [sp, #24]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	dc18      	bgt.n	80071e6 <_dtoa_r+0x7fe>
 80071b4:	9b02      	ldr	r3, [sp, #8]
 80071b6:	b9b3      	cbnz	r3, 80071e6 <_dtoa_r+0x7fe>
 80071b8:	9b03      	ldr	r3, [sp, #12]
 80071ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80071be:	b9a2      	cbnz	r2, 80071ea <_dtoa_r+0x802>
 80071c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80071c4:	0d12      	lsrs	r2, r2, #20
 80071c6:	0512      	lsls	r2, r2, #20
 80071c8:	b18a      	cbz	r2, 80071ee <_dtoa_r+0x806>
 80071ca:	9b04      	ldr	r3, [sp, #16]
 80071cc:	3301      	adds	r3, #1
 80071ce:	9304      	str	r3, [sp, #16]
 80071d0:	9b05      	ldr	r3, [sp, #20]
 80071d2:	3301      	adds	r3, #1
 80071d4:	9305      	str	r3, [sp, #20]
 80071d6:	2301      	movs	r3, #1
 80071d8:	9309      	str	r3, [sp, #36]	; 0x24
 80071da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f47f af70 	bne.w	80070c2 <_dtoa_r+0x6da>
 80071e2:	2001      	movs	r0, #1
 80071e4:	e775      	b.n	80070d2 <_dtoa_r+0x6ea>
 80071e6:	2300      	movs	r3, #0
 80071e8:	e7f6      	b.n	80071d8 <_dtoa_r+0x7f0>
 80071ea:	9b02      	ldr	r3, [sp, #8]
 80071ec:	e7f4      	b.n	80071d8 <_dtoa_r+0x7f0>
 80071ee:	9209      	str	r2, [sp, #36]	; 0x24
 80071f0:	e7f3      	b.n	80071da <_dtoa_r+0x7f2>
 80071f2:	d082      	beq.n	80070fa <_dtoa_r+0x712>
 80071f4:	9b04      	ldr	r3, [sp, #16]
 80071f6:	321c      	adds	r2, #28
 80071f8:	4413      	add	r3, r2
 80071fa:	9304      	str	r3, [sp, #16]
 80071fc:	9b05      	ldr	r3, [sp, #20]
 80071fe:	4490      	add	r8, r2
 8007200:	4413      	add	r3, r2
 8007202:	e779      	b.n	80070f8 <_dtoa_r+0x710>
 8007204:	4602      	mov	r2, r0
 8007206:	e7f5      	b.n	80071f4 <_dtoa_r+0x80c>
 8007208:	f1b9 0f00 	cmp.w	r9, #0
 800720c:	dc36      	bgt.n	800727c <_dtoa_r+0x894>
 800720e:	9b06      	ldr	r3, [sp, #24]
 8007210:	2b02      	cmp	r3, #2
 8007212:	dd33      	ble.n	800727c <_dtoa_r+0x894>
 8007214:	46ca      	mov	sl, r9
 8007216:	f1ba 0f00 	cmp.w	sl, #0
 800721a:	d10d      	bne.n	8007238 <_dtoa_r+0x850>
 800721c:	4621      	mov	r1, r4
 800721e:	4653      	mov	r3, sl
 8007220:	2205      	movs	r2, #5
 8007222:	4630      	mov	r0, r6
 8007224:	f000 faae 	bl	8007784 <__multadd>
 8007228:	4601      	mov	r1, r0
 800722a:	4604      	mov	r4, r0
 800722c:	4628      	mov	r0, r5
 800722e:	f000 fcc3 	bl	8007bb8 <__mcmp>
 8007232:	2800      	cmp	r0, #0
 8007234:	f73f ade4 	bgt.w	8006e00 <_dtoa_r+0x418>
 8007238:	9b08      	ldr	r3, [sp, #32]
 800723a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800723e:	ea6f 0b03 	mvn.w	fp, r3
 8007242:	f04f 0900 	mov.w	r9, #0
 8007246:	4621      	mov	r1, r4
 8007248:	4630      	mov	r0, r6
 800724a:	f000 fa79 	bl	8007740 <_Bfree>
 800724e:	2f00      	cmp	r7, #0
 8007250:	f43f aea1 	beq.w	8006f96 <_dtoa_r+0x5ae>
 8007254:	f1b9 0f00 	cmp.w	r9, #0
 8007258:	d005      	beq.n	8007266 <_dtoa_r+0x87e>
 800725a:	45b9      	cmp	r9, r7
 800725c:	d003      	beq.n	8007266 <_dtoa_r+0x87e>
 800725e:	4649      	mov	r1, r9
 8007260:	4630      	mov	r0, r6
 8007262:	f000 fa6d 	bl	8007740 <_Bfree>
 8007266:	4639      	mov	r1, r7
 8007268:	4630      	mov	r0, r6
 800726a:	f000 fa69 	bl	8007740 <_Bfree>
 800726e:	e692      	b.n	8006f96 <_dtoa_r+0x5ae>
 8007270:	2400      	movs	r4, #0
 8007272:	4627      	mov	r7, r4
 8007274:	e7e0      	b.n	8007238 <_dtoa_r+0x850>
 8007276:	4693      	mov	fp, r2
 8007278:	4627      	mov	r7, r4
 800727a:	e5c1      	b.n	8006e00 <_dtoa_r+0x418>
 800727c:	9b07      	ldr	r3, [sp, #28]
 800727e:	46ca      	mov	sl, r9
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 8100 	beq.w	8007486 <_dtoa_r+0xa9e>
 8007286:	f1b8 0f00 	cmp.w	r8, #0
 800728a:	dd05      	ble.n	8007298 <_dtoa_r+0x8b0>
 800728c:	4639      	mov	r1, r7
 800728e:	4642      	mov	r2, r8
 8007290:	4630      	mov	r0, r6
 8007292:	f000 fc25 	bl	8007ae0 <__lshift>
 8007296:	4607      	mov	r7, r0
 8007298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800729a:	2b00      	cmp	r3, #0
 800729c:	d05d      	beq.n	800735a <_dtoa_r+0x972>
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	4630      	mov	r0, r6
 80072a2:	f000 fa0d 	bl	80076c0 <_Balloc>
 80072a6:	4680      	mov	r8, r0
 80072a8:	b928      	cbnz	r0, 80072b6 <_dtoa_r+0x8ce>
 80072aa:	4b82      	ldr	r3, [pc, #520]	; (80074b4 <_dtoa_r+0xacc>)
 80072ac:	4602      	mov	r2, r0
 80072ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80072b2:	f7ff bbb1 	b.w	8006a18 <_dtoa_r+0x30>
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	3202      	adds	r2, #2
 80072ba:	0092      	lsls	r2, r2, #2
 80072bc:	f107 010c 	add.w	r1, r7, #12
 80072c0:	300c      	adds	r0, #12
 80072c2:	f000 ffa9 	bl	8008218 <memcpy>
 80072c6:	2201      	movs	r2, #1
 80072c8:	4641      	mov	r1, r8
 80072ca:	4630      	mov	r0, r6
 80072cc:	f000 fc08 	bl	8007ae0 <__lshift>
 80072d0:	9b01      	ldr	r3, [sp, #4]
 80072d2:	3301      	adds	r3, #1
 80072d4:	9304      	str	r3, [sp, #16]
 80072d6:	9b01      	ldr	r3, [sp, #4]
 80072d8:	4453      	add	r3, sl
 80072da:	9308      	str	r3, [sp, #32]
 80072dc:	9b02      	ldr	r3, [sp, #8]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	46b9      	mov	r9, r7
 80072e4:	9307      	str	r3, [sp, #28]
 80072e6:	4607      	mov	r7, r0
 80072e8:	9b04      	ldr	r3, [sp, #16]
 80072ea:	4621      	mov	r1, r4
 80072ec:	3b01      	subs	r3, #1
 80072ee:	4628      	mov	r0, r5
 80072f0:	9302      	str	r3, [sp, #8]
 80072f2:	f7ff faf1 	bl	80068d8 <quorem>
 80072f6:	4603      	mov	r3, r0
 80072f8:	3330      	adds	r3, #48	; 0x30
 80072fa:	9005      	str	r0, [sp, #20]
 80072fc:	4649      	mov	r1, r9
 80072fe:	4628      	mov	r0, r5
 8007300:	9309      	str	r3, [sp, #36]	; 0x24
 8007302:	f000 fc59 	bl	8007bb8 <__mcmp>
 8007306:	463a      	mov	r2, r7
 8007308:	4682      	mov	sl, r0
 800730a:	4621      	mov	r1, r4
 800730c:	4630      	mov	r0, r6
 800730e:	f000 fc6f 	bl	8007bf0 <__mdiff>
 8007312:	68c2      	ldr	r2, [r0, #12]
 8007314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007316:	4680      	mov	r8, r0
 8007318:	bb0a      	cbnz	r2, 800735e <_dtoa_r+0x976>
 800731a:	4601      	mov	r1, r0
 800731c:	4628      	mov	r0, r5
 800731e:	f000 fc4b 	bl	8007bb8 <__mcmp>
 8007322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007324:	4602      	mov	r2, r0
 8007326:	4641      	mov	r1, r8
 8007328:	4630      	mov	r0, r6
 800732a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800732e:	f000 fa07 	bl	8007740 <_Bfree>
 8007332:	9b06      	ldr	r3, [sp, #24]
 8007334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007336:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800733a:	ea43 0102 	orr.w	r1, r3, r2
 800733e:	9b07      	ldr	r3, [sp, #28]
 8007340:	4319      	orrs	r1, r3
 8007342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007344:	d10d      	bne.n	8007362 <_dtoa_r+0x97a>
 8007346:	2b39      	cmp	r3, #57	; 0x39
 8007348:	d029      	beq.n	800739e <_dtoa_r+0x9b6>
 800734a:	f1ba 0f00 	cmp.w	sl, #0
 800734e:	dd01      	ble.n	8007354 <_dtoa_r+0x96c>
 8007350:	9b05      	ldr	r3, [sp, #20]
 8007352:	3331      	adds	r3, #49	; 0x31
 8007354:	9a02      	ldr	r2, [sp, #8]
 8007356:	7013      	strb	r3, [r2, #0]
 8007358:	e775      	b.n	8007246 <_dtoa_r+0x85e>
 800735a:	4638      	mov	r0, r7
 800735c:	e7b8      	b.n	80072d0 <_dtoa_r+0x8e8>
 800735e:	2201      	movs	r2, #1
 8007360:	e7e1      	b.n	8007326 <_dtoa_r+0x93e>
 8007362:	f1ba 0f00 	cmp.w	sl, #0
 8007366:	db06      	blt.n	8007376 <_dtoa_r+0x98e>
 8007368:	9906      	ldr	r1, [sp, #24]
 800736a:	ea41 0a0a 	orr.w	sl, r1, sl
 800736e:	9907      	ldr	r1, [sp, #28]
 8007370:	ea5a 0a01 	orrs.w	sl, sl, r1
 8007374:	d120      	bne.n	80073b8 <_dtoa_r+0x9d0>
 8007376:	2a00      	cmp	r2, #0
 8007378:	ddec      	ble.n	8007354 <_dtoa_r+0x96c>
 800737a:	4629      	mov	r1, r5
 800737c:	2201      	movs	r2, #1
 800737e:	4630      	mov	r0, r6
 8007380:	9304      	str	r3, [sp, #16]
 8007382:	f000 fbad 	bl	8007ae0 <__lshift>
 8007386:	4621      	mov	r1, r4
 8007388:	4605      	mov	r5, r0
 800738a:	f000 fc15 	bl	8007bb8 <__mcmp>
 800738e:	2800      	cmp	r0, #0
 8007390:	9b04      	ldr	r3, [sp, #16]
 8007392:	dc02      	bgt.n	800739a <_dtoa_r+0x9b2>
 8007394:	d1de      	bne.n	8007354 <_dtoa_r+0x96c>
 8007396:	07da      	lsls	r2, r3, #31
 8007398:	d5dc      	bpl.n	8007354 <_dtoa_r+0x96c>
 800739a:	2b39      	cmp	r3, #57	; 0x39
 800739c:	d1d8      	bne.n	8007350 <_dtoa_r+0x968>
 800739e:	9a02      	ldr	r2, [sp, #8]
 80073a0:	2339      	movs	r3, #57	; 0x39
 80073a2:	7013      	strb	r3, [r2, #0]
 80073a4:	4643      	mov	r3, r8
 80073a6:	4698      	mov	r8, r3
 80073a8:	3b01      	subs	r3, #1
 80073aa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80073ae:	2a39      	cmp	r2, #57	; 0x39
 80073b0:	d051      	beq.n	8007456 <_dtoa_r+0xa6e>
 80073b2:	3201      	adds	r2, #1
 80073b4:	701a      	strb	r2, [r3, #0]
 80073b6:	e746      	b.n	8007246 <_dtoa_r+0x85e>
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	dd03      	ble.n	80073c4 <_dtoa_r+0x9dc>
 80073bc:	2b39      	cmp	r3, #57	; 0x39
 80073be:	d0ee      	beq.n	800739e <_dtoa_r+0x9b6>
 80073c0:	3301      	adds	r3, #1
 80073c2:	e7c7      	b.n	8007354 <_dtoa_r+0x96c>
 80073c4:	9a04      	ldr	r2, [sp, #16]
 80073c6:	9908      	ldr	r1, [sp, #32]
 80073c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80073cc:	428a      	cmp	r2, r1
 80073ce:	d02b      	beq.n	8007428 <_dtoa_r+0xa40>
 80073d0:	4629      	mov	r1, r5
 80073d2:	2300      	movs	r3, #0
 80073d4:	220a      	movs	r2, #10
 80073d6:	4630      	mov	r0, r6
 80073d8:	f000 f9d4 	bl	8007784 <__multadd>
 80073dc:	45b9      	cmp	r9, r7
 80073de:	4605      	mov	r5, r0
 80073e0:	f04f 0300 	mov.w	r3, #0
 80073e4:	f04f 020a 	mov.w	r2, #10
 80073e8:	4649      	mov	r1, r9
 80073ea:	4630      	mov	r0, r6
 80073ec:	d107      	bne.n	80073fe <_dtoa_r+0xa16>
 80073ee:	f000 f9c9 	bl	8007784 <__multadd>
 80073f2:	4681      	mov	r9, r0
 80073f4:	4607      	mov	r7, r0
 80073f6:	9b04      	ldr	r3, [sp, #16]
 80073f8:	3301      	adds	r3, #1
 80073fa:	9304      	str	r3, [sp, #16]
 80073fc:	e774      	b.n	80072e8 <_dtoa_r+0x900>
 80073fe:	f000 f9c1 	bl	8007784 <__multadd>
 8007402:	4639      	mov	r1, r7
 8007404:	4681      	mov	r9, r0
 8007406:	2300      	movs	r3, #0
 8007408:	220a      	movs	r2, #10
 800740a:	4630      	mov	r0, r6
 800740c:	f000 f9ba 	bl	8007784 <__multadd>
 8007410:	4607      	mov	r7, r0
 8007412:	e7f0      	b.n	80073f6 <_dtoa_r+0xa0e>
 8007414:	f1ba 0f00 	cmp.w	sl, #0
 8007418:	9a01      	ldr	r2, [sp, #4]
 800741a:	bfcc      	ite	gt
 800741c:	46d0      	movgt	r8, sl
 800741e:	f04f 0801 	movle.w	r8, #1
 8007422:	4490      	add	r8, r2
 8007424:	f04f 0900 	mov.w	r9, #0
 8007428:	4629      	mov	r1, r5
 800742a:	2201      	movs	r2, #1
 800742c:	4630      	mov	r0, r6
 800742e:	9302      	str	r3, [sp, #8]
 8007430:	f000 fb56 	bl	8007ae0 <__lshift>
 8007434:	4621      	mov	r1, r4
 8007436:	4605      	mov	r5, r0
 8007438:	f000 fbbe 	bl	8007bb8 <__mcmp>
 800743c:	2800      	cmp	r0, #0
 800743e:	dcb1      	bgt.n	80073a4 <_dtoa_r+0x9bc>
 8007440:	d102      	bne.n	8007448 <_dtoa_r+0xa60>
 8007442:	9b02      	ldr	r3, [sp, #8]
 8007444:	07db      	lsls	r3, r3, #31
 8007446:	d4ad      	bmi.n	80073a4 <_dtoa_r+0x9bc>
 8007448:	4643      	mov	r3, r8
 800744a:	4698      	mov	r8, r3
 800744c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007450:	2a30      	cmp	r2, #48	; 0x30
 8007452:	d0fa      	beq.n	800744a <_dtoa_r+0xa62>
 8007454:	e6f7      	b.n	8007246 <_dtoa_r+0x85e>
 8007456:	9a01      	ldr	r2, [sp, #4]
 8007458:	429a      	cmp	r2, r3
 800745a:	d1a4      	bne.n	80073a6 <_dtoa_r+0x9be>
 800745c:	f10b 0b01 	add.w	fp, fp, #1
 8007460:	2331      	movs	r3, #49	; 0x31
 8007462:	e778      	b.n	8007356 <_dtoa_r+0x96e>
 8007464:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <_dtoa_r+0xad0>)
 8007466:	f7ff bb2a 	b.w	8006abe <_dtoa_r+0xd6>
 800746a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800746c:	2b00      	cmp	r3, #0
 800746e:	f47f ab05 	bne.w	8006a7c <_dtoa_r+0x94>
 8007472:	4b12      	ldr	r3, [pc, #72]	; (80074bc <_dtoa_r+0xad4>)
 8007474:	f7ff bb23 	b.w	8006abe <_dtoa_r+0xd6>
 8007478:	f1ba 0f00 	cmp.w	sl, #0
 800747c:	dc03      	bgt.n	8007486 <_dtoa_r+0xa9e>
 800747e:	9b06      	ldr	r3, [sp, #24]
 8007480:	2b02      	cmp	r3, #2
 8007482:	f73f aec8 	bgt.w	8007216 <_dtoa_r+0x82e>
 8007486:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800748a:	4621      	mov	r1, r4
 800748c:	4628      	mov	r0, r5
 800748e:	f7ff fa23 	bl	80068d8 <quorem>
 8007492:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007496:	f808 3b01 	strb.w	r3, [r8], #1
 800749a:	9a01      	ldr	r2, [sp, #4]
 800749c:	eba8 0202 	sub.w	r2, r8, r2
 80074a0:	4592      	cmp	sl, r2
 80074a2:	ddb7      	ble.n	8007414 <_dtoa_r+0xa2c>
 80074a4:	4629      	mov	r1, r5
 80074a6:	2300      	movs	r3, #0
 80074a8:	220a      	movs	r2, #10
 80074aa:	4630      	mov	r0, r6
 80074ac:	f000 f96a 	bl	8007784 <__multadd>
 80074b0:	4605      	mov	r5, r0
 80074b2:	e7ea      	b.n	800748a <_dtoa_r+0xaa2>
 80074b4:	0802e430 	.word	0x0802e430
 80074b8:	0802e390 	.word	0x0802e390
 80074bc:	0802e3b4 	.word	0x0802e3b4

080074c0 <_free_r>:
 80074c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074c2:	2900      	cmp	r1, #0
 80074c4:	d044      	beq.n	8007550 <_free_r+0x90>
 80074c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074ca:	9001      	str	r0, [sp, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f1a1 0404 	sub.w	r4, r1, #4
 80074d2:	bfb8      	it	lt
 80074d4:	18e4      	addlt	r4, r4, r3
 80074d6:	f000 f8e7 	bl	80076a8 <__malloc_lock>
 80074da:	4a1e      	ldr	r2, [pc, #120]	; (8007554 <_free_r+0x94>)
 80074dc:	9801      	ldr	r0, [sp, #4]
 80074de:	6813      	ldr	r3, [r2, #0]
 80074e0:	b933      	cbnz	r3, 80074f0 <_free_r+0x30>
 80074e2:	6063      	str	r3, [r4, #4]
 80074e4:	6014      	str	r4, [r2, #0]
 80074e6:	b003      	add	sp, #12
 80074e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074ec:	f000 b8e2 	b.w	80076b4 <__malloc_unlock>
 80074f0:	42a3      	cmp	r3, r4
 80074f2:	d908      	bls.n	8007506 <_free_r+0x46>
 80074f4:	6825      	ldr	r5, [r4, #0]
 80074f6:	1961      	adds	r1, r4, r5
 80074f8:	428b      	cmp	r3, r1
 80074fa:	bf01      	itttt	eq
 80074fc:	6819      	ldreq	r1, [r3, #0]
 80074fe:	685b      	ldreq	r3, [r3, #4]
 8007500:	1949      	addeq	r1, r1, r5
 8007502:	6021      	streq	r1, [r4, #0]
 8007504:	e7ed      	b.n	80074e2 <_free_r+0x22>
 8007506:	461a      	mov	r2, r3
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	b10b      	cbz	r3, 8007510 <_free_r+0x50>
 800750c:	42a3      	cmp	r3, r4
 800750e:	d9fa      	bls.n	8007506 <_free_r+0x46>
 8007510:	6811      	ldr	r1, [r2, #0]
 8007512:	1855      	adds	r5, r2, r1
 8007514:	42a5      	cmp	r5, r4
 8007516:	d10b      	bne.n	8007530 <_free_r+0x70>
 8007518:	6824      	ldr	r4, [r4, #0]
 800751a:	4421      	add	r1, r4
 800751c:	1854      	adds	r4, r2, r1
 800751e:	42a3      	cmp	r3, r4
 8007520:	6011      	str	r1, [r2, #0]
 8007522:	d1e0      	bne.n	80074e6 <_free_r+0x26>
 8007524:	681c      	ldr	r4, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	6053      	str	r3, [r2, #4]
 800752a:	440c      	add	r4, r1
 800752c:	6014      	str	r4, [r2, #0]
 800752e:	e7da      	b.n	80074e6 <_free_r+0x26>
 8007530:	d902      	bls.n	8007538 <_free_r+0x78>
 8007532:	230c      	movs	r3, #12
 8007534:	6003      	str	r3, [r0, #0]
 8007536:	e7d6      	b.n	80074e6 <_free_r+0x26>
 8007538:	6825      	ldr	r5, [r4, #0]
 800753a:	1961      	adds	r1, r4, r5
 800753c:	428b      	cmp	r3, r1
 800753e:	bf04      	itt	eq
 8007540:	6819      	ldreq	r1, [r3, #0]
 8007542:	685b      	ldreq	r3, [r3, #4]
 8007544:	6063      	str	r3, [r4, #4]
 8007546:	bf04      	itt	eq
 8007548:	1949      	addeq	r1, r1, r5
 800754a:	6021      	streq	r1, [r4, #0]
 800754c:	6054      	str	r4, [r2, #4]
 800754e:	e7ca      	b.n	80074e6 <_free_r+0x26>
 8007550:	b003      	add	sp, #12
 8007552:	bd30      	pop	{r4, r5, pc}
 8007554:	20000478 	.word	0x20000478

08007558 <malloc>:
 8007558:	4b02      	ldr	r3, [pc, #8]	; (8007564 <malloc+0xc>)
 800755a:	4601      	mov	r1, r0
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	f000 b823 	b.w	80075a8 <_malloc_r>
 8007562:	bf00      	nop
 8007564:	20000068 	.word	0x20000068

08007568 <sbrk_aligned>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	4e0e      	ldr	r6, [pc, #56]	; (80075a4 <sbrk_aligned+0x3c>)
 800756c:	460c      	mov	r4, r1
 800756e:	6831      	ldr	r1, [r6, #0]
 8007570:	4605      	mov	r5, r0
 8007572:	b911      	cbnz	r1, 800757a <sbrk_aligned+0x12>
 8007574:	f000 fe40 	bl	80081f8 <_sbrk_r>
 8007578:	6030      	str	r0, [r6, #0]
 800757a:	4621      	mov	r1, r4
 800757c:	4628      	mov	r0, r5
 800757e:	f000 fe3b 	bl	80081f8 <_sbrk_r>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d00a      	beq.n	800759c <sbrk_aligned+0x34>
 8007586:	1cc4      	adds	r4, r0, #3
 8007588:	f024 0403 	bic.w	r4, r4, #3
 800758c:	42a0      	cmp	r0, r4
 800758e:	d007      	beq.n	80075a0 <sbrk_aligned+0x38>
 8007590:	1a21      	subs	r1, r4, r0
 8007592:	4628      	mov	r0, r5
 8007594:	f000 fe30 	bl	80081f8 <_sbrk_r>
 8007598:	3001      	adds	r0, #1
 800759a:	d101      	bne.n	80075a0 <sbrk_aligned+0x38>
 800759c:	f04f 34ff 	mov.w	r4, #4294967295
 80075a0:	4620      	mov	r0, r4
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	2000047c 	.word	0x2000047c

080075a8 <_malloc_r>:
 80075a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075ac:	1ccd      	adds	r5, r1, #3
 80075ae:	f025 0503 	bic.w	r5, r5, #3
 80075b2:	3508      	adds	r5, #8
 80075b4:	2d0c      	cmp	r5, #12
 80075b6:	bf38      	it	cc
 80075b8:	250c      	movcc	r5, #12
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	4607      	mov	r7, r0
 80075be:	db01      	blt.n	80075c4 <_malloc_r+0x1c>
 80075c0:	42a9      	cmp	r1, r5
 80075c2:	d905      	bls.n	80075d0 <_malloc_r+0x28>
 80075c4:	230c      	movs	r3, #12
 80075c6:	603b      	str	r3, [r7, #0]
 80075c8:	2600      	movs	r6, #0
 80075ca:	4630      	mov	r0, r6
 80075cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076a4 <_malloc_r+0xfc>
 80075d4:	f000 f868 	bl	80076a8 <__malloc_lock>
 80075d8:	f8d8 3000 	ldr.w	r3, [r8]
 80075dc:	461c      	mov	r4, r3
 80075de:	bb5c      	cbnz	r4, 8007638 <_malloc_r+0x90>
 80075e0:	4629      	mov	r1, r5
 80075e2:	4638      	mov	r0, r7
 80075e4:	f7ff ffc0 	bl	8007568 <sbrk_aligned>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	4604      	mov	r4, r0
 80075ec:	d155      	bne.n	800769a <_malloc_r+0xf2>
 80075ee:	f8d8 4000 	ldr.w	r4, [r8]
 80075f2:	4626      	mov	r6, r4
 80075f4:	2e00      	cmp	r6, #0
 80075f6:	d145      	bne.n	8007684 <_malloc_r+0xdc>
 80075f8:	2c00      	cmp	r4, #0
 80075fa:	d048      	beq.n	800768e <_malloc_r+0xe6>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	4631      	mov	r1, r6
 8007600:	4638      	mov	r0, r7
 8007602:	eb04 0903 	add.w	r9, r4, r3
 8007606:	f000 fdf7 	bl	80081f8 <_sbrk_r>
 800760a:	4581      	cmp	r9, r0
 800760c:	d13f      	bne.n	800768e <_malloc_r+0xe6>
 800760e:	6821      	ldr	r1, [r4, #0]
 8007610:	1a6d      	subs	r5, r5, r1
 8007612:	4629      	mov	r1, r5
 8007614:	4638      	mov	r0, r7
 8007616:	f7ff ffa7 	bl	8007568 <sbrk_aligned>
 800761a:	3001      	adds	r0, #1
 800761c:	d037      	beq.n	800768e <_malloc_r+0xe6>
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	442b      	add	r3, r5
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	f8d8 3000 	ldr.w	r3, [r8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d038      	beq.n	800769e <_malloc_r+0xf6>
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	42a2      	cmp	r2, r4
 8007630:	d12b      	bne.n	800768a <_malloc_r+0xe2>
 8007632:	2200      	movs	r2, #0
 8007634:	605a      	str	r2, [r3, #4]
 8007636:	e00f      	b.n	8007658 <_malloc_r+0xb0>
 8007638:	6822      	ldr	r2, [r4, #0]
 800763a:	1b52      	subs	r2, r2, r5
 800763c:	d41f      	bmi.n	800767e <_malloc_r+0xd6>
 800763e:	2a0b      	cmp	r2, #11
 8007640:	d917      	bls.n	8007672 <_malloc_r+0xca>
 8007642:	1961      	adds	r1, r4, r5
 8007644:	42a3      	cmp	r3, r4
 8007646:	6025      	str	r5, [r4, #0]
 8007648:	bf18      	it	ne
 800764a:	6059      	strne	r1, [r3, #4]
 800764c:	6863      	ldr	r3, [r4, #4]
 800764e:	bf08      	it	eq
 8007650:	f8c8 1000 	streq.w	r1, [r8]
 8007654:	5162      	str	r2, [r4, r5]
 8007656:	604b      	str	r3, [r1, #4]
 8007658:	4638      	mov	r0, r7
 800765a:	f104 060b 	add.w	r6, r4, #11
 800765e:	f000 f829 	bl	80076b4 <__malloc_unlock>
 8007662:	f026 0607 	bic.w	r6, r6, #7
 8007666:	1d23      	adds	r3, r4, #4
 8007668:	1af2      	subs	r2, r6, r3
 800766a:	d0ae      	beq.n	80075ca <_malloc_r+0x22>
 800766c:	1b9b      	subs	r3, r3, r6
 800766e:	50a3      	str	r3, [r4, r2]
 8007670:	e7ab      	b.n	80075ca <_malloc_r+0x22>
 8007672:	42a3      	cmp	r3, r4
 8007674:	6862      	ldr	r2, [r4, #4]
 8007676:	d1dd      	bne.n	8007634 <_malloc_r+0x8c>
 8007678:	f8c8 2000 	str.w	r2, [r8]
 800767c:	e7ec      	b.n	8007658 <_malloc_r+0xb0>
 800767e:	4623      	mov	r3, r4
 8007680:	6864      	ldr	r4, [r4, #4]
 8007682:	e7ac      	b.n	80075de <_malloc_r+0x36>
 8007684:	4634      	mov	r4, r6
 8007686:	6876      	ldr	r6, [r6, #4]
 8007688:	e7b4      	b.n	80075f4 <_malloc_r+0x4c>
 800768a:	4613      	mov	r3, r2
 800768c:	e7cc      	b.n	8007628 <_malloc_r+0x80>
 800768e:	230c      	movs	r3, #12
 8007690:	603b      	str	r3, [r7, #0]
 8007692:	4638      	mov	r0, r7
 8007694:	f000 f80e 	bl	80076b4 <__malloc_unlock>
 8007698:	e797      	b.n	80075ca <_malloc_r+0x22>
 800769a:	6025      	str	r5, [r4, #0]
 800769c:	e7dc      	b.n	8007658 <_malloc_r+0xb0>
 800769e:	605b      	str	r3, [r3, #4]
 80076a0:	deff      	udf	#255	; 0xff
 80076a2:	bf00      	nop
 80076a4:	20000478 	.word	0x20000478

080076a8 <__malloc_lock>:
 80076a8:	4801      	ldr	r0, [pc, #4]	; (80076b0 <__malloc_lock+0x8>)
 80076aa:	f7ff b913 	b.w	80068d4 <__retarget_lock_acquire_recursive>
 80076ae:	bf00      	nop
 80076b0:	20000474 	.word	0x20000474

080076b4 <__malloc_unlock>:
 80076b4:	4801      	ldr	r0, [pc, #4]	; (80076bc <__malloc_unlock+0x8>)
 80076b6:	f7ff b90e 	b.w	80068d6 <__retarget_lock_release_recursive>
 80076ba:	bf00      	nop
 80076bc:	20000474 	.word	0x20000474

080076c0 <_Balloc>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	69c6      	ldr	r6, [r0, #28]
 80076c4:	4604      	mov	r4, r0
 80076c6:	460d      	mov	r5, r1
 80076c8:	b976      	cbnz	r6, 80076e8 <_Balloc+0x28>
 80076ca:	2010      	movs	r0, #16
 80076cc:	f7ff ff44 	bl	8007558 <malloc>
 80076d0:	4602      	mov	r2, r0
 80076d2:	61e0      	str	r0, [r4, #28]
 80076d4:	b920      	cbnz	r0, 80076e0 <_Balloc+0x20>
 80076d6:	4b18      	ldr	r3, [pc, #96]	; (8007738 <_Balloc+0x78>)
 80076d8:	4818      	ldr	r0, [pc, #96]	; (800773c <_Balloc+0x7c>)
 80076da:	216b      	movs	r1, #107	; 0x6b
 80076dc:	f000 fdaa 	bl	8008234 <__assert_func>
 80076e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076e4:	6006      	str	r6, [r0, #0]
 80076e6:	60c6      	str	r6, [r0, #12]
 80076e8:	69e6      	ldr	r6, [r4, #28]
 80076ea:	68f3      	ldr	r3, [r6, #12]
 80076ec:	b183      	cbz	r3, 8007710 <_Balloc+0x50>
 80076ee:	69e3      	ldr	r3, [r4, #28]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076f6:	b9b8      	cbnz	r0, 8007728 <_Balloc+0x68>
 80076f8:	2101      	movs	r1, #1
 80076fa:	fa01 f605 	lsl.w	r6, r1, r5
 80076fe:	1d72      	adds	r2, r6, #5
 8007700:	0092      	lsls	r2, r2, #2
 8007702:	4620      	mov	r0, r4
 8007704:	f000 fdb4 	bl	8008270 <_calloc_r>
 8007708:	b160      	cbz	r0, 8007724 <_Balloc+0x64>
 800770a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800770e:	e00e      	b.n	800772e <_Balloc+0x6e>
 8007710:	2221      	movs	r2, #33	; 0x21
 8007712:	2104      	movs	r1, #4
 8007714:	4620      	mov	r0, r4
 8007716:	f000 fdab 	bl	8008270 <_calloc_r>
 800771a:	69e3      	ldr	r3, [r4, #28]
 800771c:	60f0      	str	r0, [r6, #12]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e4      	bne.n	80076ee <_Balloc+0x2e>
 8007724:	2000      	movs	r0, #0
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	6802      	ldr	r2, [r0, #0]
 800772a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800772e:	2300      	movs	r3, #0
 8007730:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007734:	e7f7      	b.n	8007726 <_Balloc+0x66>
 8007736:	bf00      	nop
 8007738:	0802e3c1 	.word	0x0802e3c1
 800773c:	0802e441 	.word	0x0802e441

08007740 <_Bfree>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	69c6      	ldr	r6, [r0, #28]
 8007744:	4605      	mov	r5, r0
 8007746:	460c      	mov	r4, r1
 8007748:	b976      	cbnz	r6, 8007768 <_Bfree+0x28>
 800774a:	2010      	movs	r0, #16
 800774c:	f7ff ff04 	bl	8007558 <malloc>
 8007750:	4602      	mov	r2, r0
 8007752:	61e8      	str	r0, [r5, #28]
 8007754:	b920      	cbnz	r0, 8007760 <_Bfree+0x20>
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <_Bfree+0x3c>)
 8007758:	4809      	ldr	r0, [pc, #36]	; (8007780 <_Bfree+0x40>)
 800775a:	218f      	movs	r1, #143	; 0x8f
 800775c:	f000 fd6a 	bl	8008234 <__assert_func>
 8007760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007764:	6006      	str	r6, [r0, #0]
 8007766:	60c6      	str	r6, [r0, #12]
 8007768:	b13c      	cbz	r4, 800777a <_Bfree+0x3a>
 800776a:	69eb      	ldr	r3, [r5, #28]
 800776c:	6862      	ldr	r2, [r4, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007774:	6021      	str	r1, [r4, #0]
 8007776:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	0802e3c1 	.word	0x0802e3c1
 8007780:	0802e441 	.word	0x0802e441

08007784 <__multadd>:
 8007784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007788:	690d      	ldr	r5, [r1, #16]
 800778a:	4607      	mov	r7, r0
 800778c:	460c      	mov	r4, r1
 800778e:	461e      	mov	r6, r3
 8007790:	f101 0c14 	add.w	ip, r1, #20
 8007794:	2000      	movs	r0, #0
 8007796:	f8dc 3000 	ldr.w	r3, [ip]
 800779a:	b299      	uxth	r1, r3
 800779c:	fb02 6101 	mla	r1, r2, r1, r6
 80077a0:	0c1e      	lsrs	r6, r3, #16
 80077a2:	0c0b      	lsrs	r3, r1, #16
 80077a4:	fb02 3306 	mla	r3, r2, r6, r3
 80077a8:	b289      	uxth	r1, r1
 80077aa:	3001      	adds	r0, #1
 80077ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077b0:	4285      	cmp	r5, r0
 80077b2:	f84c 1b04 	str.w	r1, [ip], #4
 80077b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077ba:	dcec      	bgt.n	8007796 <__multadd+0x12>
 80077bc:	b30e      	cbz	r6, 8007802 <__multadd+0x7e>
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	dc19      	bgt.n	80077f8 <__multadd+0x74>
 80077c4:	6861      	ldr	r1, [r4, #4]
 80077c6:	4638      	mov	r0, r7
 80077c8:	3101      	adds	r1, #1
 80077ca:	f7ff ff79 	bl	80076c0 <_Balloc>
 80077ce:	4680      	mov	r8, r0
 80077d0:	b928      	cbnz	r0, 80077de <__multadd+0x5a>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4b0c      	ldr	r3, [pc, #48]	; (8007808 <__multadd+0x84>)
 80077d6:	480d      	ldr	r0, [pc, #52]	; (800780c <__multadd+0x88>)
 80077d8:	21ba      	movs	r1, #186	; 0xba
 80077da:	f000 fd2b 	bl	8008234 <__assert_func>
 80077de:	6922      	ldr	r2, [r4, #16]
 80077e0:	3202      	adds	r2, #2
 80077e2:	f104 010c 	add.w	r1, r4, #12
 80077e6:	0092      	lsls	r2, r2, #2
 80077e8:	300c      	adds	r0, #12
 80077ea:	f000 fd15 	bl	8008218 <memcpy>
 80077ee:	4621      	mov	r1, r4
 80077f0:	4638      	mov	r0, r7
 80077f2:	f7ff ffa5 	bl	8007740 <_Bfree>
 80077f6:	4644      	mov	r4, r8
 80077f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077fc:	3501      	adds	r5, #1
 80077fe:	615e      	str	r6, [r3, #20]
 8007800:	6125      	str	r5, [r4, #16]
 8007802:	4620      	mov	r0, r4
 8007804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007808:	0802e430 	.word	0x0802e430
 800780c:	0802e441 	.word	0x0802e441

08007810 <__hi0bits>:
 8007810:	0c03      	lsrs	r3, r0, #16
 8007812:	041b      	lsls	r3, r3, #16
 8007814:	b9d3      	cbnz	r3, 800784c <__hi0bits+0x3c>
 8007816:	0400      	lsls	r0, r0, #16
 8007818:	2310      	movs	r3, #16
 800781a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800781e:	bf04      	itt	eq
 8007820:	0200      	lsleq	r0, r0, #8
 8007822:	3308      	addeq	r3, #8
 8007824:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007828:	bf04      	itt	eq
 800782a:	0100      	lsleq	r0, r0, #4
 800782c:	3304      	addeq	r3, #4
 800782e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007832:	bf04      	itt	eq
 8007834:	0080      	lsleq	r0, r0, #2
 8007836:	3302      	addeq	r3, #2
 8007838:	2800      	cmp	r0, #0
 800783a:	db05      	blt.n	8007848 <__hi0bits+0x38>
 800783c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007840:	f103 0301 	add.w	r3, r3, #1
 8007844:	bf08      	it	eq
 8007846:	2320      	moveq	r3, #32
 8007848:	4618      	mov	r0, r3
 800784a:	4770      	bx	lr
 800784c:	2300      	movs	r3, #0
 800784e:	e7e4      	b.n	800781a <__hi0bits+0xa>

08007850 <__lo0bits>:
 8007850:	6803      	ldr	r3, [r0, #0]
 8007852:	f013 0207 	ands.w	r2, r3, #7
 8007856:	d00c      	beq.n	8007872 <__lo0bits+0x22>
 8007858:	07d9      	lsls	r1, r3, #31
 800785a:	d422      	bmi.n	80078a2 <__lo0bits+0x52>
 800785c:	079a      	lsls	r2, r3, #30
 800785e:	bf49      	itett	mi
 8007860:	085b      	lsrmi	r3, r3, #1
 8007862:	089b      	lsrpl	r3, r3, #2
 8007864:	6003      	strmi	r3, [r0, #0]
 8007866:	2201      	movmi	r2, #1
 8007868:	bf5c      	itt	pl
 800786a:	6003      	strpl	r3, [r0, #0]
 800786c:	2202      	movpl	r2, #2
 800786e:	4610      	mov	r0, r2
 8007870:	4770      	bx	lr
 8007872:	b299      	uxth	r1, r3
 8007874:	b909      	cbnz	r1, 800787a <__lo0bits+0x2a>
 8007876:	0c1b      	lsrs	r3, r3, #16
 8007878:	2210      	movs	r2, #16
 800787a:	b2d9      	uxtb	r1, r3
 800787c:	b909      	cbnz	r1, 8007882 <__lo0bits+0x32>
 800787e:	3208      	adds	r2, #8
 8007880:	0a1b      	lsrs	r3, r3, #8
 8007882:	0719      	lsls	r1, r3, #28
 8007884:	bf04      	itt	eq
 8007886:	091b      	lsreq	r3, r3, #4
 8007888:	3204      	addeq	r2, #4
 800788a:	0799      	lsls	r1, r3, #30
 800788c:	bf04      	itt	eq
 800788e:	089b      	lsreq	r3, r3, #2
 8007890:	3202      	addeq	r2, #2
 8007892:	07d9      	lsls	r1, r3, #31
 8007894:	d403      	bmi.n	800789e <__lo0bits+0x4e>
 8007896:	085b      	lsrs	r3, r3, #1
 8007898:	f102 0201 	add.w	r2, r2, #1
 800789c:	d003      	beq.n	80078a6 <__lo0bits+0x56>
 800789e:	6003      	str	r3, [r0, #0]
 80078a0:	e7e5      	b.n	800786e <__lo0bits+0x1e>
 80078a2:	2200      	movs	r2, #0
 80078a4:	e7e3      	b.n	800786e <__lo0bits+0x1e>
 80078a6:	2220      	movs	r2, #32
 80078a8:	e7e1      	b.n	800786e <__lo0bits+0x1e>
	...

080078ac <__i2b>:
 80078ac:	b510      	push	{r4, lr}
 80078ae:	460c      	mov	r4, r1
 80078b0:	2101      	movs	r1, #1
 80078b2:	f7ff ff05 	bl	80076c0 <_Balloc>
 80078b6:	4602      	mov	r2, r0
 80078b8:	b928      	cbnz	r0, 80078c6 <__i2b+0x1a>
 80078ba:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <__i2b+0x24>)
 80078bc:	4805      	ldr	r0, [pc, #20]	; (80078d4 <__i2b+0x28>)
 80078be:	f240 1145 	movw	r1, #325	; 0x145
 80078c2:	f000 fcb7 	bl	8008234 <__assert_func>
 80078c6:	2301      	movs	r3, #1
 80078c8:	6144      	str	r4, [r0, #20]
 80078ca:	6103      	str	r3, [r0, #16]
 80078cc:	bd10      	pop	{r4, pc}
 80078ce:	bf00      	nop
 80078d0:	0802e430 	.word	0x0802e430
 80078d4:	0802e441 	.word	0x0802e441

080078d8 <__multiply>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	4691      	mov	r9, r2
 80078de:	690a      	ldr	r2, [r1, #16]
 80078e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	bfb8      	it	lt
 80078e8:	460b      	movlt	r3, r1
 80078ea:	460c      	mov	r4, r1
 80078ec:	bfbc      	itt	lt
 80078ee:	464c      	movlt	r4, r9
 80078f0:	4699      	movlt	r9, r3
 80078f2:	6927      	ldr	r7, [r4, #16]
 80078f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80078f8:	68a3      	ldr	r3, [r4, #8]
 80078fa:	6861      	ldr	r1, [r4, #4]
 80078fc:	eb07 060a 	add.w	r6, r7, sl
 8007900:	42b3      	cmp	r3, r6
 8007902:	b085      	sub	sp, #20
 8007904:	bfb8      	it	lt
 8007906:	3101      	addlt	r1, #1
 8007908:	f7ff feda 	bl	80076c0 <_Balloc>
 800790c:	b930      	cbnz	r0, 800791c <__multiply+0x44>
 800790e:	4602      	mov	r2, r0
 8007910:	4b44      	ldr	r3, [pc, #272]	; (8007a24 <__multiply+0x14c>)
 8007912:	4845      	ldr	r0, [pc, #276]	; (8007a28 <__multiply+0x150>)
 8007914:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007918:	f000 fc8c 	bl	8008234 <__assert_func>
 800791c:	f100 0514 	add.w	r5, r0, #20
 8007920:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007924:	462b      	mov	r3, r5
 8007926:	2200      	movs	r2, #0
 8007928:	4543      	cmp	r3, r8
 800792a:	d321      	bcc.n	8007970 <__multiply+0x98>
 800792c:	f104 0314 	add.w	r3, r4, #20
 8007930:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007934:	f109 0314 	add.w	r3, r9, #20
 8007938:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800793c:	9202      	str	r2, [sp, #8]
 800793e:	1b3a      	subs	r2, r7, r4
 8007940:	3a15      	subs	r2, #21
 8007942:	f022 0203 	bic.w	r2, r2, #3
 8007946:	3204      	adds	r2, #4
 8007948:	f104 0115 	add.w	r1, r4, #21
 800794c:	428f      	cmp	r7, r1
 800794e:	bf38      	it	cc
 8007950:	2204      	movcc	r2, #4
 8007952:	9201      	str	r2, [sp, #4]
 8007954:	9a02      	ldr	r2, [sp, #8]
 8007956:	9303      	str	r3, [sp, #12]
 8007958:	429a      	cmp	r2, r3
 800795a:	d80c      	bhi.n	8007976 <__multiply+0x9e>
 800795c:	2e00      	cmp	r6, #0
 800795e:	dd03      	ble.n	8007968 <__multiply+0x90>
 8007960:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007964:	2b00      	cmp	r3, #0
 8007966:	d05b      	beq.n	8007a20 <__multiply+0x148>
 8007968:	6106      	str	r6, [r0, #16]
 800796a:	b005      	add	sp, #20
 800796c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007970:	f843 2b04 	str.w	r2, [r3], #4
 8007974:	e7d8      	b.n	8007928 <__multiply+0x50>
 8007976:	f8b3 a000 	ldrh.w	sl, [r3]
 800797a:	f1ba 0f00 	cmp.w	sl, #0
 800797e:	d024      	beq.n	80079ca <__multiply+0xf2>
 8007980:	f104 0e14 	add.w	lr, r4, #20
 8007984:	46a9      	mov	r9, r5
 8007986:	f04f 0c00 	mov.w	ip, #0
 800798a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800798e:	f8d9 1000 	ldr.w	r1, [r9]
 8007992:	fa1f fb82 	uxth.w	fp, r2
 8007996:	b289      	uxth	r1, r1
 8007998:	fb0a 110b 	mla	r1, sl, fp, r1
 800799c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80079a0:	f8d9 2000 	ldr.w	r2, [r9]
 80079a4:	4461      	add	r1, ip
 80079a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80079ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80079b2:	b289      	uxth	r1, r1
 80079b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80079b8:	4577      	cmp	r7, lr
 80079ba:	f849 1b04 	str.w	r1, [r9], #4
 80079be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079c2:	d8e2      	bhi.n	800798a <__multiply+0xb2>
 80079c4:	9a01      	ldr	r2, [sp, #4]
 80079c6:	f845 c002 	str.w	ip, [r5, r2]
 80079ca:	9a03      	ldr	r2, [sp, #12]
 80079cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80079d0:	3304      	adds	r3, #4
 80079d2:	f1b9 0f00 	cmp.w	r9, #0
 80079d6:	d021      	beq.n	8007a1c <__multiply+0x144>
 80079d8:	6829      	ldr	r1, [r5, #0]
 80079da:	f104 0c14 	add.w	ip, r4, #20
 80079de:	46ae      	mov	lr, r5
 80079e0:	f04f 0a00 	mov.w	sl, #0
 80079e4:	f8bc b000 	ldrh.w	fp, [ip]
 80079e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80079ec:	fb09 220b 	mla	r2, r9, fp, r2
 80079f0:	4452      	add	r2, sl
 80079f2:	b289      	uxth	r1, r1
 80079f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80079f8:	f84e 1b04 	str.w	r1, [lr], #4
 80079fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007a00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a04:	f8be 1000 	ldrh.w	r1, [lr]
 8007a08:	fb09 110a 	mla	r1, r9, sl, r1
 8007a0c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007a10:	4567      	cmp	r7, ip
 8007a12:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a16:	d8e5      	bhi.n	80079e4 <__multiply+0x10c>
 8007a18:	9a01      	ldr	r2, [sp, #4]
 8007a1a:	50a9      	str	r1, [r5, r2]
 8007a1c:	3504      	adds	r5, #4
 8007a1e:	e799      	b.n	8007954 <__multiply+0x7c>
 8007a20:	3e01      	subs	r6, #1
 8007a22:	e79b      	b.n	800795c <__multiply+0x84>
 8007a24:	0802e430 	.word	0x0802e430
 8007a28:	0802e441 	.word	0x0802e441

08007a2c <__pow5mult>:
 8007a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a30:	4615      	mov	r5, r2
 8007a32:	f012 0203 	ands.w	r2, r2, #3
 8007a36:	4606      	mov	r6, r0
 8007a38:	460f      	mov	r7, r1
 8007a3a:	d007      	beq.n	8007a4c <__pow5mult+0x20>
 8007a3c:	4c25      	ldr	r4, [pc, #148]	; (8007ad4 <__pow5mult+0xa8>)
 8007a3e:	3a01      	subs	r2, #1
 8007a40:	2300      	movs	r3, #0
 8007a42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a46:	f7ff fe9d 	bl	8007784 <__multadd>
 8007a4a:	4607      	mov	r7, r0
 8007a4c:	10ad      	asrs	r5, r5, #2
 8007a4e:	d03d      	beq.n	8007acc <__pow5mult+0xa0>
 8007a50:	69f4      	ldr	r4, [r6, #28]
 8007a52:	b97c      	cbnz	r4, 8007a74 <__pow5mult+0x48>
 8007a54:	2010      	movs	r0, #16
 8007a56:	f7ff fd7f 	bl	8007558 <malloc>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	61f0      	str	r0, [r6, #28]
 8007a5e:	b928      	cbnz	r0, 8007a6c <__pow5mult+0x40>
 8007a60:	4b1d      	ldr	r3, [pc, #116]	; (8007ad8 <__pow5mult+0xac>)
 8007a62:	481e      	ldr	r0, [pc, #120]	; (8007adc <__pow5mult+0xb0>)
 8007a64:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007a68:	f000 fbe4 	bl	8008234 <__assert_func>
 8007a6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a70:	6004      	str	r4, [r0, #0]
 8007a72:	60c4      	str	r4, [r0, #12]
 8007a74:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007a78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a7c:	b94c      	cbnz	r4, 8007a92 <__pow5mult+0x66>
 8007a7e:	f240 2171 	movw	r1, #625	; 0x271
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7ff ff12 	bl	80078ac <__i2b>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a8e:	4604      	mov	r4, r0
 8007a90:	6003      	str	r3, [r0, #0]
 8007a92:	f04f 0900 	mov.w	r9, #0
 8007a96:	07eb      	lsls	r3, r5, #31
 8007a98:	d50a      	bpl.n	8007ab0 <__pow5mult+0x84>
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f7ff ff1a 	bl	80078d8 <__multiply>
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	4680      	mov	r8, r0
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7ff fe49 	bl	8007740 <_Bfree>
 8007aae:	4647      	mov	r7, r8
 8007ab0:	106d      	asrs	r5, r5, #1
 8007ab2:	d00b      	beq.n	8007acc <__pow5mult+0xa0>
 8007ab4:	6820      	ldr	r0, [r4, #0]
 8007ab6:	b938      	cbnz	r0, 8007ac8 <__pow5mult+0x9c>
 8007ab8:	4622      	mov	r2, r4
 8007aba:	4621      	mov	r1, r4
 8007abc:	4630      	mov	r0, r6
 8007abe:	f7ff ff0b 	bl	80078d8 <__multiply>
 8007ac2:	6020      	str	r0, [r4, #0]
 8007ac4:	f8c0 9000 	str.w	r9, [r0]
 8007ac8:	4604      	mov	r4, r0
 8007aca:	e7e4      	b.n	8007a96 <__pow5mult+0x6a>
 8007acc:	4638      	mov	r0, r7
 8007ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad2:	bf00      	nop
 8007ad4:	0802e590 	.word	0x0802e590
 8007ad8:	0802e3c1 	.word	0x0802e3c1
 8007adc:	0802e441 	.word	0x0802e441

08007ae0 <__lshift>:
 8007ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	6849      	ldr	r1, [r1, #4]
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007aee:	68a3      	ldr	r3, [r4, #8]
 8007af0:	4607      	mov	r7, r0
 8007af2:	4691      	mov	r9, r2
 8007af4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007af8:	f108 0601 	add.w	r6, r8, #1
 8007afc:	42b3      	cmp	r3, r6
 8007afe:	db0b      	blt.n	8007b18 <__lshift+0x38>
 8007b00:	4638      	mov	r0, r7
 8007b02:	f7ff fddd 	bl	80076c0 <_Balloc>
 8007b06:	4605      	mov	r5, r0
 8007b08:	b948      	cbnz	r0, 8007b1e <__lshift+0x3e>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	4b28      	ldr	r3, [pc, #160]	; (8007bb0 <__lshift+0xd0>)
 8007b0e:	4829      	ldr	r0, [pc, #164]	; (8007bb4 <__lshift+0xd4>)
 8007b10:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007b14:	f000 fb8e 	bl	8008234 <__assert_func>
 8007b18:	3101      	adds	r1, #1
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	e7ee      	b.n	8007afc <__lshift+0x1c>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f100 0114 	add.w	r1, r0, #20
 8007b24:	f100 0210 	add.w	r2, r0, #16
 8007b28:	4618      	mov	r0, r3
 8007b2a:	4553      	cmp	r3, sl
 8007b2c:	db33      	blt.n	8007b96 <__lshift+0xb6>
 8007b2e:	6920      	ldr	r0, [r4, #16]
 8007b30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b34:	f104 0314 	add.w	r3, r4, #20
 8007b38:	f019 091f 	ands.w	r9, r9, #31
 8007b3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b44:	d02b      	beq.n	8007b9e <__lshift+0xbe>
 8007b46:	f1c9 0e20 	rsb	lr, r9, #32
 8007b4a:	468a      	mov	sl, r1
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	6818      	ldr	r0, [r3, #0]
 8007b50:	fa00 f009 	lsl.w	r0, r0, r9
 8007b54:	4310      	orrs	r0, r2
 8007b56:	f84a 0b04 	str.w	r0, [sl], #4
 8007b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b5e:	459c      	cmp	ip, r3
 8007b60:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b64:	d8f3      	bhi.n	8007b4e <__lshift+0x6e>
 8007b66:	ebac 0304 	sub.w	r3, ip, r4
 8007b6a:	3b15      	subs	r3, #21
 8007b6c:	f023 0303 	bic.w	r3, r3, #3
 8007b70:	3304      	adds	r3, #4
 8007b72:	f104 0015 	add.w	r0, r4, #21
 8007b76:	4584      	cmp	ip, r0
 8007b78:	bf38      	it	cc
 8007b7a:	2304      	movcc	r3, #4
 8007b7c:	50ca      	str	r2, [r1, r3]
 8007b7e:	b10a      	cbz	r2, 8007b84 <__lshift+0xa4>
 8007b80:	f108 0602 	add.w	r6, r8, #2
 8007b84:	3e01      	subs	r6, #1
 8007b86:	4638      	mov	r0, r7
 8007b88:	612e      	str	r6, [r5, #16]
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	f7ff fdd8 	bl	8007740 <_Bfree>
 8007b90:	4628      	mov	r0, r5
 8007b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b96:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	e7c5      	b.n	8007b2a <__lshift+0x4a>
 8007b9e:	3904      	subs	r1, #4
 8007ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ba4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ba8:	459c      	cmp	ip, r3
 8007baa:	d8f9      	bhi.n	8007ba0 <__lshift+0xc0>
 8007bac:	e7ea      	b.n	8007b84 <__lshift+0xa4>
 8007bae:	bf00      	nop
 8007bb0:	0802e430 	.word	0x0802e430
 8007bb4:	0802e441 	.word	0x0802e441

08007bb8 <__mcmp>:
 8007bb8:	b530      	push	{r4, r5, lr}
 8007bba:	6902      	ldr	r2, [r0, #16]
 8007bbc:	690c      	ldr	r4, [r1, #16]
 8007bbe:	1b12      	subs	r2, r2, r4
 8007bc0:	d10e      	bne.n	8007be0 <__mcmp+0x28>
 8007bc2:	f100 0314 	add.w	r3, r0, #20
 8007bc6:	3114      	adds	r1, #20
 8007bc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007bcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007bd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007bd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007bd8:	42a5      	cmp	r5, r4
 8007bda:	d003      	beq.n	8007be4 <__mcmp+0x2c>
 8007bdc:	d305      	bcc.n	8007bea <__mcmp+0x32>
 8007bde:	2201      	movs	r2, #1
 8007be0:	4610      	mov	r0, r2
 8007be2:	bd30      	pop	{r4, r5, pc}
 8007be4:	4283      	cmp	r3, r0
 8007be6:	d3f3      	bcc.n	8007bd0 <__mcmp+0x18>
 8007be8:	e7fa      	b.n	8007be0 <__mcmp+0x28>
 8007bea:	f04f 32ff 	mov.w	r2, #4294967295
 8007bee:	e7f7      	b.n	8007be0 <__mcmp+0x28>

08007bf0 <__mdiff>:
 8007bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	4690      	mov	r8, r2
 8007bfe:	f7ff ffdb 	bl	8007bb8 <__mcmp>
 8007c02:	1e05      	subs	r5, r0, #0
 8007c04:	d110      	bne.n	8007c28 <__mdiff+0x38>
 8007c06:	4629      	mov	r1, r5
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f7ff fd59 	bl	80076c0 <_Balloc>
 8007c0e:	b930      	cbnz	r0, 8007c1e <__mdiff+0x2e>
 8007c10:	4b3a      	ldr	r3, [pc, #232]	; (8007cfc <__mdiff+0x10c>)
 8007c12:	4602      	mov	r2, r0
 8007c14:	f240 2137 	movw	r1, #567	; 0x237
 8007c18:	4839      	ldr	r0, [pc, #228]	; (8007d00 <__mdiff+0x110>)
 8007c1a:	f000 fb0b 	bl	8008234 <__assert_func>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c28:	bfa4      	itt	ge
 8007c2a:	4643      	movge	r3, r8
 8007c2c:	46a0      	movge	r8, r4
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007c34:	bfa6      	itte	ge
 8007c36:	461c      	movge	r4, r3
 8007c38:	2500      	movge	r5, #0
 8007c3a:	2501      	movlt	r5, #1
 8007c3c:	f7ff fd40 	bl	80076c0 <_Balloc>
 8007c40:	b920      	cbnz	r0, 8007c4c <__mdiff+0x5c>
 8007c42:	4b2e      	ldr	r3, [pc, #184]	; (8007cfc <__mdiff+0x10c>)
 8007c44:	4602      	mov	r2, r0
 8007c46:	f240 2145 	movw	r1, #581	; 0x245
 8007c4a:	e7e5      	b.n	8007c18 <__mdiff+0x28>
 8007c4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c50:	6926      	ldr	r6, [r4, #16]
 8007c52:	60c5      	str	r5, [r0, #12]
 8007c54:	f104 0914 	add.w	r9, r4, #20
 8007c58:	f108 0514 	add.w	r5, r8, #20
 8007c5c:	f100 0e14 	add.w	lr, r0, #20
 8007c60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007c64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c68:	f108 0210 	add.w	r2, r8, #16
 8007c6c:	46f2      	mov	sl, lr
 8007c6e:	2100      	movs	r1, #0
 8007c70:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007c78:	fa11 f88b 	uxtah	r8, r1, fp
 8007c7c:	b299      	uxth	r1, r3
 8007c7e:	0c1b      	lsrs	r3, r3, #16
 8007c80:	eba8 0801 	sub.w	r8, r8, r1
 8007c84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007c88:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007c8c:	fa1f f888 	uxth.w	r8, r8
 8007c90:	1419      	asrs	r1, r3, #16
 8007c92:	454e      	cmp	r6, r9
 8007c94:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007c98:	f84a 3b04 	str.w	r3, [sl], #4
 8007c9c:	d8e8      	bhi.n	8007c70 <__mdiff+0x80>
 8007c9e:	1b33      	subs	r3, r6, r4
 8007ca0:	3b15      	subs	r3, #21
 8007ca2:	f023 0303 	bic.w	r3, r3, #3
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	3415      	adds	r4, #21
 8007caa:	42a6      	cmp	r6, r4
 8007cac:	bf38      	it	cc
 8007cae:	2304      	movcc	r3, #4
 8007cb0:	441d      	add	r5, r3
 8007cb2:	4473      	add	r3, lr
 8007cb4:	469e      	mov	lr, r3
 8007cb6:	462e      	mov	r6, r5
 8007cb8:	4566      	cmp	r6, ip
 8007cba:	d30e      	bcc.n	8007cda <__mdiff+0xea>
 8007cbc:	f10c 0203 	add.w	r2, ip, #3
 8007cc0:	1b52      	subs	r2, r2, r5
 8007cc2:	f022 0203 	bic.w	r2, r2, #3
 8007cc6:	3d03      	subs	r5, #3
 8007cc8:	45ac      	cmp	ip, r5
 8007cca:	bf38      	it	cc
 8007ccc:	2200      	movcc	r2, #0
 8007cce:	4413      	add	r3, r2
 8007cd0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007cd4:	b17a      	cbz	r2, 8007cf6 <__mdiff+0x106>
 8007cd6:	6107      	str	r7, [r0, #16]
 8007cd8:	e7a4      	b.n	8007c24 <__mdiff+0x34>
 8007cda:	f856 8b04 	ldr.w	r8, [r6], #4
 8007cde:	fa11 f288 	uxtah	r2, r1, r8
 8007ce2:	1414      	asrs	r4, r2, #16
 8007ce4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ce8:	b292      	uxth	r2, r2
 8007cea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007cee:	f84e 2b04 	str.w	r2, [lr], #4
 8007cf2:	1421      	asrs	r1, r4, #16
 8007cf4:	e7e0      	b.n	8007cb8 <__mdiff+0xc8>
 8007cf6:	3f01      	subs	r7, #1
 8007cf8:	e7ea      	b.n	8007cd0 <__mdiff+0xe0>
 8007cfa:	bf00      	nop
 8007cfc:	0802e430 	.word	0x0802e430
 8007d00:	0802e441 	.word	0x0802e441

08007d04 <__d2b>:
 8007d04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d08:	460f      	mov	r7, r1
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	ec59 8b10 	vmov	r8, r9, d0
 8007d10:	4616      	mov	r6, r2
 8007d12:	f7ff fcd5 	bl	80076c0 <_Balloc>
 8007d16:	4604      	mov	r4, r0
 8007d18:	b930      	cbnz	r0, 8007d28 <__d2b+0x24>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	4b24      	ldr	r3, [pc, #144]	; (8007db0 <__d2b+0xac>)
 8007d1e:	4825      	ldr	r0, [pc, #148]	; (8007db4 <__d2b+0xb0>)
 8007d20:	f240 310f 	movw	r1, #783	; 0x30f
 8007d24:	f000 fa86 	bl	8008234 <__assert_func>
 8007d28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d30:	bb2d      	cbnz	r5, 8007d7e <__d2b+0x7a>
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	f1b8 0300 	subs.w	r3, r8, #0
 8007d38:	d026      	beq.n	8007d88 <__d2b+0x84>
 8007d3a:	4668      	mov	r0, sp
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	f7ff fd87 	bl	8007850 <__lo0bits>
 8007d42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d46:	b1e8      	cbz	r0, 8007d84 <__d2b+0x80>
 8007d48:	f1c0 0320 	rsb	r3, r0, #32
 8007d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d50:	430b      	orrs	r3, r1
 8007d52:	40c2      	lsrs	r2, r0
 8007d54:	6163      	str	r3, [r4, #20]
 8007d56:	9201      	str	r2, [sp, #4]
 8007d58:	9b01      	ldr	r3, [sp, #4]
 8007d5a:	61a3      	str	r3, [r4, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bf14      	ite	ne
 8007d60:	2202      	movne	r2, #2
 8007d62:	2201      	moveq	r2, #1
 8007d64:	6122      	str	r2, [r4, #16]
 8007d66:	b1bd      	cbz	r5, 8007d98 <__d2b+0x94>
 8007d68:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d6c:	4405      	add	r5, r0
 8007d6e:	603d      	str	r5, [r7, #0]
 8007d70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d74:	6030      	str	r0, [r6, #0]
 8007d76:	4620      	mov	r0, r4
 8007d78:	b003      	add	sp, #12
 8007d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d82:	e7d6      	b.n	8007d32 <__d2b+0x2e>
 8007d84:	6161      	str	r1, [r4, #20]
 8007d86:	e7e7      	b.n	8007d58 <__d2b+0x54>
 8007d88:	a801      	add	r0, sp, #4
 8007d8a:	f7ff fd61 	bl	8007850 <__lo0bits>
 8007d8e:	9b01      	ldr	r3, [sp, #4]
 8007d90:	6163      	str	r3, [r4, #20]
 8007d92:	3020      	adds	r0, #32
 8007d94:	2201      	movs	r2, #1
 8007d96:	e7e5      	b.n	8007d64 <__d2b+0x60>
 8007d98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007da0:	6038      	str	r0, [r7, #0]
 8007da2:	6918      	ldr	r0, [r3, #16]
 8007da4:	f7ff fd34 	bl	8007810 <__hi0bits>
 8007da8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007dac:	e7e2      	b.n	8007d74 <__d2b+0x70>
 8007dae:	bf00      	nop
 8007db0:	0802e430 	.word	0x0802e430
 8007db4:	0802e441 	.word	0x0802e441

08007db8 <__ssputs_r>:
 8007db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dbc:	688e      	ldr	r6, [r1, #8]
 8007dbe:	461f      	mov	r7, r3
 8007dc0:	42be      	cmp	r6, r7
 8007dc2:	680b      	ldr	r3, [r1, #0]
 8007dc4:	4682      	mov	sl, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	4690      	mov	r8, r2
 8007dca:	d82c      	bhi.n	8007e26 <__ssputs_r+0x6e>
 8007dcc:	898a      	ldrh	r2, [r1, #12]
 8007dce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007dd2:	d026      	beq.n	8007e22 <__ssputs_r+0x6a>
 8007dd4:	6965      	ldr	r5, [r4, #20]
 8007dd6:	6909      	ldr	r1, [r1, #16]
 8007dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ddc:	eba3 0901 	sub.w	r9, r3, r1
 8007de0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007de4:	1c7b      	adds	r3, r7, #1
 8007de6:	444b      	add	r3, r9
 8007de8:	106d      	asrs	r5, r5, #1
 8007dea:	429d      	cmp	r5, r3
 8007dec:	bf38      	it	cc
 8007dee:	461d      	movcc	r5, r3
 8007df0:	0553      	lsls	r3, r2, #21
 8007df2:	d527      	bpl.n	8007e44 <__ssputs_r+0x8c>
 8007df4:	4629      	mov	r1, r5
 8007df6:	f7ff fbd7 	bl	80075a8 <_malloc_r>
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	b360      	cbz	r0, 8007e58 <__ssputs_r+0xa0>
 8007dfe:	6921      	ldr	r1, [r4, #16]
 8007e00:	464a      	mov	r2, r9
 8007e02:	f000 fa09 	bl	8008218 <memcpy>
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	6126      	str	r6, [r4, #16]
 8007e14:	6165      	str	r5, [r4, #20]
 8007e16:	444e      	add	r6, r9
 8007e18:	eba5 0509 	sub.w	r5, r5, r9
 8007e1c:	6026      	str	r6, [r4, #0]
 8007e1e:	60a5      	str	r5, [r4, #8]
 8007e20:	463e      	mov	r6, r7
 8007e22:	42be      	cmp	r6, r7
 8007e24:	d900      	bls.n	8007e28 <__ssputs_r+0x70>
 8007e26:	463e      	mov	r6, r7
 8007e28:	6820      	ldr	r0, [r4, #0]
 8007e2a:	4632      	mov	r2, r6
 8007e2c:	4641      	mov	r1, r8
 8007e2e:	f000 f9c9 	bl	80081c4 <memmove>
 8007e32:	68a3      	ldr	r3, [r4, #8]
 8007e34:	1b9b      	subs	r3, r3, r6
 8007e36:	60a3      	str	r3, [r4, #8]
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	4433      	add	r3, r6
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	2000      	movs	r0, #0
 8007e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e44:	462a      	mov	r2, r5
 8007e46:	f000 fa3b 	bl	80082c0 <_realloc_r>
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d1e0      	bne.n	8007e12 <__ssputs_r+0x5a>
 8007e50:	6921      	ldr	r1, [r4, #16]
 8007e52:	4650      	mov	r0, sl
 8007e54:	f7ff fb34 	bl	80074c0 <_free_r>
 8007e58:	230c      	movs	r3, #12
 8007e5a:	f8ca 3000 	str.w	r3, [sl]
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e64:	81a3      	strh	r3, [r4, #12]
 8007e66:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6a:	e7e9      	b.n	8007e40 <__ssputs_r+0x88>

08007e6c <_svfiprintf_r>:
 8007e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e70:	4698      	mov	r8, r3
 8007e72:	898b      	ldrh	r3, [r1, #12]
 8007e74:	061b      	lsls	r3, r3, #24
 8007e76:	b09d      	sub	sp, #116	; 0x74
 8007e78:	4607      	mov	r7, r0
 8007e7a:	460d      	mov	r5, r1
 8007e7c:	4614      	mov	r4, r2
 8007e7e:	d50e      	bpl.n	8007e9e <_svfiprintf_r+0x32>
 8007e80:	690b      	ldr	r3, [r1, #16]
 8007e82:	b963      	cbnz	r3, 8007e9e <_svfiprintf_r+0x32>
 8007e84:	2140      	movs	r1, #64	; 0x40
 8007e86:	f7ff fb8f 	bl	80075a8 <_malloc_r>
 8007e8a:	6028      	str	r0, [r5, #0]
 8007e8c:	6128      	str	r0, [r5, #16]
 8007e8e:	b920      	cbnz	r0, 8007e9a <_svfiprintf_r+0x2e>
 8007e90:	230c      	movs	r3, #12
 8007e92:	603b      	str	r3, [r7, #0]
 8007e94:	f04f 30ff 	mov.w	r0, #4294967295
 8007e98:	e0d0      	b.n	800803c <_svfiprintf_r+0x1d0>
 8007e9a:	2340      	movs	r3, #64	; 0x40
 8007e9c:	616b      	str	r3, [r5, #20]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea2:	2320      	movs	r3, #32
 8007ea4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ea8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eac:	2330      	movs	r3, #48	; 0x30
 8007eae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008054 <_svfiprintf_r+0x1e8>
 8007eb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eb6:	f04f 0901 	mov.w	r9, #1
 8007eba:	4623      	mov	r3, r4
 8007ebc:	469a      	mov	sl, r3
 8007ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec2:	b10a      	cbz	r2, 8007ec8 <_svfiprintf_r+0x5c>
 8007ec4:	2a25      	cmp	r2, #37	; 0x25
 8007ec6:	d1f9      	bne.n	8007ebc <_svfiprintf_r+0x50>
 8007ec8:	ebba 0b04 	subs.w	fp, sl, r4
 8007ecc:	d00b      	beq.n	8007ee6 <_svfiprintf_r+0x7a>
 8007ece:	465b      	mov	r3, fp
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	f7ff ff6f 	bl	8007db8 <__ssputs_r>
 8007eda:	3001      	adds	r0, #1
 8007edc:	f000 80a9 	beq.w	8008032 <_svfiprintf_r+0x1c6>
 8007ee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ee2:	445a      	add	r2, fp
 8007ee4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 80a1 	beq.w	8008032 <_svfiprintf_r+0x1c6>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007efa:	f10a 0a01 	add.w	sl, sl, #1
 8007efe:	9304      	str	r3, [sp, #16]
 8007f00:	9307      	str	r3, [sp, #28]
 8007f02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f06:	931a      	str	r3, [sp, #104]	; 0x68
 8007f08:	4654      	mov	r4, sl
 8007f0a:	2205      	movs	r2, #5
 8007f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f10:	4850      	ldr	r0, [pc, #320]	; (8008054 <_svfiprintf_r+0x1e8>)
 8007f12:	f7f8 f995 	bl	8000240 <memchr>
 8007f16:	9a04      	ldr	r2, [sp, #16]
 8007f18:	b9d8      	cbnz	r0, 8007f52 <_svfiprintf_r+0xe6>
 8007f1a:	06d0      	lsls	r0, r2, #27
 8007f1c:	bf44      	itt	mi
 8007f1e:	2320      	movmi	r3, #32
 8007f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f24:	0711      	lsls	r1, r2, #28
 8007f26:	bf44      	itt	mi
 8007f28:	232b      	movmi	r3, #43	; 0x2b
 8007f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f32:	2b2a      	cmp	r3, #42	; 0x2a
 8007f34:	d015      	beq.n	8007f62 <_svfiprintf_r+0xf6>
 8007f36:	9a07      	ldr	r2, [sp, #28]
 8007f38:	4654      	mov	r4, sl
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	f04f 0c0a 	mov.w	ip, #10
 8007f40:	4621      	mov	r1, r4
 8007f42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f46:	3b30      	subs	r3, #48	; 0x30
 8007f48:	2b09      	cmp	r3, #9
 8007f4a:	d94d      	bls.n	8007fe8 <_svfiprintf_r+0x17c>
 8007f4c:	b1b0      	cbz	r0, 8007f7c <_svfiprintf_r+0x110>
 8007f4e:	9207      	str	r2, [sp, #28]
 8007f50:	e014      	b.n	8007f7c <_svfiprintf_r+0x110>
 8007f52:	eba0 0308 	sub.w	r3, r0, r8
 8007f56:	fa09 f303 	lsl.w	r3, r9, r3
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	46a2      	mov	sl, r4
 8007f60:	e7d2      	b.n	8007f08 <_svfiprintf_r+0x9c>
 8007f62:	9b03      	ldr	r3, [sp, #12]
 8007f64:	1d19      	adds	r1, r3, #4
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	9103      	str	r1, [sp, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bfbb      	ittet	lt
 8007f6e:	425b      	neglt	r3, r3
 8007f70:	f042 0202 	orrlt.w	r2, r2, #2
 8007f74:	9307      	strge	r3, [sp, #28]
 8007f76:	9307      	strlt	r3, [sp, #28]
 8007f78:	bfb8      	it	lt
 8007f7a:	9204      	strlt	r2, [sp, #16]
 8007f7c:	7823      	ldrb	r3, [r4, #0]
 8007f7e:	2b2e      	cmp	r3, #46	; 0x2e
 8007f80:	d10c      	bne.n	8007f9c <_svfiprintf_r+0x130>
 8007f82:	7863      	ldrb	r3, [r4, #1]
 8007f84:	2b2a      	cmp	r3, #42	; 0x2a
 8007f86:	d134      	bne.n	8007ff2 <_svfiprintf_r+0x186>
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	1d1a      	adds	r2, r3, #4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	9203      	str	r2, [sp, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	bfb8      	it	lt
 8007f94:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f98:	3402      	adds	r4, #2
 8007f9a:	9305      	str	r3, [sp, #20]
 8007f9c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008064 <_svfiprintf_r+0x1f8>
 8007fa0:	7821      	ldrb	r1, [r4, #0]
 8007fa2:	2203      	movs	r2, #3
 8007fa4:	4650      	mov	r0, sl
 8007fa6:	f7f8 f94b 	bl	8000240 <memchr>
 8007faa:	b138      	cbz	r0, 8007fbc <_svfiprintf_r+0x150>
 8007fac:	9b04      	ldr	r3, [sp, #16]
 8007fae:	eba0 000a 	sub.w	r0, r0, sl
 8007fb2:	2240      	movs	r2, #64	; 0x40
 8007fb4:	4082      	lsls	r2, r0
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	3401      	adds	r4, #1
 8007fba:	9304      	str	r3, [sp, #16]
 8007fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc0:	4825      	ldr	r0, [pc, #148]	; (8008058 <_svfiprintf_r+0x1ec>)
 8007fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fc6:	2206      	movs	r2, #6
 8007fc8:	f7f8 f93a 	bl	8000240 <memchr>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d038      	beq.n	8008042 <_svfiprintf_r+0x1d6>
 8007fd0:	4b22      	ldr	r3, [pc, #136]	; (800805c <_svfiprintf_r+0x1f0>)
 8007fd2:	bb1b      	cbnz	r3, 800801c <_svfiprintf_r+0x1b0>
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	3307      	adds	r3, #7
 8007fd8:	f023 0307 	bic.w	r3, r3, #7
 8007fdc:	3308      	adds	r3, #8
 8007fde:	9303      	str	r3, [sp, #12]
 8007fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe2:	4433      	add	r3, r6
 8007fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe6:	e768      	b.n	8007eba <_svfiprintf_r+0x4e>
 8007fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fec:	460c      	mov	r4, r1
 8007fee:	2001      	movs	r0, #1
 8007ff0:	e7a6      	b.n	8007f40 <_svfiprintf_r+0xd4>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	3401      	adds	r4, #1
 8007ff6:	9305      	str	r3, [sp, #20]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f04f 0c0a 	mov.w	ip, #10
 8007ffe:	4620      	mov	r0, r4
 8008000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008004:	3a30      	subs	r2, #48	; 0x30
 8008006:	2a09      	cmp	r2, #9
 8008008:	d903      	bls.n	8008012 <_svfiprintf_r+0x1a6>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0c6      	beq.n	8007f9c <_svfiprintf_r+0x130>
 800800e:	9105      	str	r1, [sp, #20]
 8008010:	e7c4      	b.n	8007f9c <_svfiprintf_r+0x130>
 8008012:	fb0c 2101 	mla	r1, ip, r1, r2
 8008016:	4604      	mov	r4, r0
 8008018:	2301      	movs	r3, #1
 800801a:	e7f0      	b.n	8007ffe <_svfiprintf_r+0x192>
 800801c:	ab03      	add	r3, sp, #12
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	462a      	mov	r2, r5
 8008022:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <_svfiprintf_r+0x1f4>)
 8008024:	a904      	add	r1, sp, #16
 8008026:	4638      	mov	r0, r7
 8008028:	f7fd ff1a 	bl	8005e60 <_printf_float>
 800802c:	1c42      	adds	r2, r0, #1
 800802e:	4606      	mov	r6, r0
 8008030:	d1d6      	bne.n	8007fe0 <_svfiprintf_r+0x174>
 8008032:	89ab      	ldrh	r3, [r5, #12]
 8008034:	065b      	lsls	r3, r3, #25
 8008036:	f53f af2d 	bmi.w	8007e94 <_svfiprintf_r+0x28>
 800803a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800803c:	b01d      	add	sp, #116	; 0x74
 800803e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008042:	ab03      	add	r3, sp, #12
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	462a      	mov	r2, r5
 8008048:	4b05      	ldr	r3, [pc, #20]	; (8008060 <_svfiprintf_r+0x1f4>)
 800804a:	a904      	add	r1, sp, #16
 800804c:	4638      	mov	r0, r7
 800804e:	f7fe f98f 	bl	8006370 <_printf_i>
 8008052:	e7eb      	b.n	800802c <_svfiprintf_r+0x1c0>
 8008054:	0802e59c 	.word	0x0802e59c
 8008058:	0802e5a6 	.word	0x0802e5a6
 800805c:	08005e61 	.word	0x08005e61
 8008060:	08007db9 	.word	0x08007db9
 8008064:	0802e5a2 	.word	0x0802e5a2

08008068 <__sflush_r>:
 8008068:	898a      	ldrh	r2, [r1, #12]
 800806a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806e:	4605      	mov	r5, r0
 8008070:	0710      	lsls	r0, r2, #28
 8008072:	460c      	mov	r4, r1
 8008074:	d458      	bmi.n	8008128 <__sflush_r+0xc0>
 8008076:	684b      	ldr	r3, [r1, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	dc05      	bgt.n	8008088 <__sflush_r+0x20>
 800807c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800807e:	2b00      	cmp	r3, #0
 8008080:	dc02      	bgt.n	8008088 <__sflush_r+0x20>
 8008082:	2000      	movs	r0, #0
 8008084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800808a:	2e00      	cmp	r6, #0
 800808c:	d0f9      	beq.n	8008082 <__sflush_r+0x1a>
 800808e:	2300      	movs	r3, #0
 8008090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008094:	682f      	ldr	r7, [r5, #0]
 8008096:	6a21      	ldr	r1, [r4, #32]
 8008098:	602b      	str	r3, [r5, #0]
 800809a:	d032      	beq.n	8008102 <__sflush_r+0x9a>
 800809c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	075a      	lsls	r2, r3, #29
 80080a2:	d505      	bpl.n	80080b0 <__sflush_r+0x48>
 80080a4:	6863      	ldr	r3, [r4, #4]
 80080a6:	1ac0      	subs	r0, r0, r3
 80080a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080aa:	b10b      	cbz	r3, 80080b0 <__sflush_r+0x48>
 80080ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080ae:	1ac0      	subs	r0, r0, r3
 80080b0:	2300      	movs	r3, #0
 80080b2:	4602      	mov	r2, r0
 80080b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080b6:	6a21      	ldr	r1, [r4, #32]
 80080b8:	4628      	mov	r0, r5
 80080ba:	47b0      	blx	r6
 80080bc:	1c43      	adds	r3, r0, #1
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	d106      	bne.n	80080d0 <__sflush_r+0x68>
 80080c2:	6829      	ldr	r1, [r5, #0]
 80080c4:	291d      	cmp	r1, #29
 80080c6:	d82b      	bhi.n	8008120 <__sflush_r+0xb8>
 80080c8:	4a29      	ldr	r2, [pc, #164]	; (8008170 <__sflush_r+0x108>)
 80080ca:	410a      	asrs	r2, r1
 80080cc:	07d6      	lsls	r6, r2, #31
 80080ce:	d427      	bmi.n	8008120 <__sflush_r+0xb8>
 80080d0:	2200      	movs	r2, #0
 80080d2:	6062      	str	r2, [r4, #4]
 80080d4:	04d9      	lsls	r1, r3, #19
 80080d6:	6922      	ldr	r2, [r4, #16]
 80080d8:	6022      	str	r2, [r4, #0]
 80080da:	d504      	bpl.n	80080e6 <__sflush_r+0x7e>
 80080dc:	1c42      	adds	r2, r0, #1
 80080de:	d101      	bne.n	80080e4 <__sflush_r+0x7c>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b903      	cbnz	r3, 80080e6 <__sflush_r+0x7e>
 80080e4:	6560      	str	r0, [r4, #84]	; 0x54
 80080e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080e8:	602f      	str	r7, [r5, #0]
 80080ea:	2900      	cmp	r1, #0
 80080ec:	d0c9      	beq.n	8008082 <__sflush_r+0x1a>
 80080ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080f2:	4299      	cmp	r1, r3
 80080f4:	d002      	beq.n	80080fc <__sflush_r+0x94>
 80080f6:	4628      	mov	r0, r5
 80080f8:	f7ff f9e2 	bl	80074c0 <_free_r>
 80080fc:	2000      	movs	r0, #0
 80080fe:	6360      	str	r0, [r4, #52]	; 0x34
 8008100:	e7c0      	b.n	8008084 <__sflush_r+0x1c>
 8008102:	2301      	movs	r3, #1
 8008104:	4628      	mov	r0, r5
 8008106:	47b0      	blx	r6
 8008108:	1c41      	adds	r1, r0, #1
 800810a:	d1c8      	bne.n	800809e <__sflush_r+0x36>
 800810c:	682b      	ldr	r3, [r5, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d0c5      	beq.n	800809e <__sflush_r+0x36>
 8008112:	2b1d      	cmp	r3, #29
 8008114:	d001      	beq.n	800811a <__sflush_r+0xb2>
 8008116:	2b16      	cmp	r3, #22
 8008118:	d101      	bne.n	800811e <__sflush_r+0xb6>
 800811a:	602f      	str	r7, [r5, #0]
 800811c:	e7b1      	b.n	8008082 <__sflush_r+0x1a>
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008124:	81a3      	strh	r3, [r4, #12]
 8008126:	e7ad      	b.n	8008084 <__sflush_r+0x1c>
 8008128:	690f      	ldr	r7, [r1, #16]
 800812a:	2f00      	cmp	r7, #0
 800812c:	d0a9      	beq.n	8008082 <__sflush_r+0x1a>
 800812e:	0793      	lsls	r3, r2, #30
 8008130:	680e      	ldr	r6, [r1, #0]
 8008132:	bf08      	it	eq
 8008134:	694b      	ldreq	r3, [r1, #20]
 8008136:	600f      	str	r7, [r1, #0]
 8008138:	bf18      	it	ne
 800813a:	2300      	movne	r3, #0
 800813c:	eba6 0807 	sub.w	r8, r6, r7
 8008140:	608b      	str	r3, [r1, #8]
 8008142:	f1b8 0f00 	cmp.w	r8, #0
 8008146:	dd9c      	ble.n	8008082 <__sflush_r+0x1a>
 8008148:	6a21      	ldr	r1, [r4, #32]
 800814a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800814c:	4643      	mov	r3, r8
 800814e:	463a      	mov	r2, r7
 8008150:	4628      	mov	r0, r5
 8008152:	47b0      	blx	r6
 8008154:	2800      	cmp	r0, #0
 8008156:	dc06      	bgt.n	8008166 <__sflush_r+0xfe>
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	f04f 30ff 	mov.w	r0, #4294967295
 8008164:	e78e      	b.n	8008084 <__sflush_r+0x1c>
 8008166:	4407      	add	r7, r0
 8008168:	eba8 0800 	sub.w	r8, r8, r0
 800816c:	e7e9      	b.n	8008142 <__sflush_r+0xda>
 800816e:	bf00      	nop
 8008170:	dfbffffe 	.word	0xdfbffffe

08008174 <_fflush_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	690b      	ldr	r3, [r1, #16]
 8008178:	4605      	mov	r5, r0
 800817a:	460c      	mov	r4, r1
 800817c:	b913      	cbnz	r3, 8008184 <_fflush_r+0x10>
 800817e:	2500      	movs	r5, #0
 8008180:	4628      	mov	r0, r5
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	b118      	cbz	r0, 800818e <_fflush_r+0x1a>
 8008186:	6a03      	ldr	r3, [r0, #32]
 8008188:	b90b      	cbnz	r3, 800818e <_fflush_r+0x1a>
 800818a:	f7fe fa8d 	bl	80066a8 <__sinit>
 800818e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0f3      	beq.n	800817e <_fflush_r+0xa>
 8008196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008198:	07d0      	lsls	r0, r2, #31
 800819a:	d404      	bmi.n	80081a6 <_fflush_r+0x32>
 800819c:	0599      	lsls	r1, r3, #22
 800819e:	d402      	bmi.n	80081a6 <_fflush_r+0x32>
 80081a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081a2:	f7fe fb97 	bl	80068d4 <__retarget_lock_acquire_recursive>
 80081a6:	4628      	mov	r0, r5
 80081a8:	4621      	mov	r1, r4
 80081aa:	f7ff ff5d 	bl	8008068 <__sflush_r>
 80081ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081b0:	07da      	lsls	r2, r3, #31
 80081b2:	4605      	mov	r5, r0
 80081b4:	d4e4      	bmi.n	8008180 <_fflush_r+0xc>
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	059b      	lsls	r3, r3, #22
 80081ba:	d4e1      	bmi.n	8008180 <_fflush_r+0xc>
 80081bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081be:	f7fe fb8a 	bl	80068d6 <__retarget_lock_release_recursive>
 80081c2:	e7dd      	b.n	8008180 <_fflush_r+0xc>

080081c4 <memmove>:
 80081c4:	4288      	cmp	r0, r1
 80081c6:	b510      	push	{r4, lr}
 80081c8:	eb01 0402 	add.w	r4, r1, r2
 80081cc:	d902      	bls.n	80081d4 <memmove+0x10>
 80081ce:	4284      	cmp	r4, r0
 80081d0:	4623      	mov	r3, r4
 80081d2:	d807      	bhi.n	80081e4 <memmove+0x20>
 80081d4:	1e43      	subs	r3, r0, #1
 80081d6:	42a1      	cmp	r1, r4
 80081d8:	d008      	beq.n	80081ec <memmove+0x28>
 80081da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081e2:	e7f8      	b.n	80081d6 <memmove+0x12>
 80081e4:	4402      	add	r2, r0
 80081e6:	4601      	mov	r1, r0
 80081e8:	428a      	cmp	r2, r1
 80081ea:	d100      	bne.n	80081ee <memmove+0x2a>
 80081ec:	bd10      	pop	{r4, pc}
 80081ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081f6:	e7f7      	b.n	80081e8 <memmove+0x24>

080081f8 <_sbrk_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d06      	ldr	r5, [pc, #24]	; (8008214 <_sbrk_r+0x1c>)
 80081fc:	2300      	movs	r3, #0
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	602b      	str	r3, [r5, #0]
 8008204:	f7f9 f970 	bl	80014e8 <_sbrk>
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	d102      	bne.n	8008212 <_sbrk_r+0x1a>
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	b103      	cbz	r3, 8008212 <_sbrk_r+0x1a>
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	bd38      	pop	{r3, r4, r5, pc}
 8008214:	20000470 	.word	0x20000470

08008218 <memcpy>:
 8008218:	440a      	add	r2, r1
 800821a:	4291      	cmp	r1, r2
 800821c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008220:	d100      	bne.n	8008224 <memcpy+0xc>
 8008222:	4770      	bx	lr
 8008224:	b510      	push	{r4, lr}
 8008226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800822a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800822e:	4291      	cmp	r1, r2
 8008230:	d1f9      	bne.n	8008226 <memcpy+0xe>
 8008232:	bd10      	pop	{r4, pc}

08008234 <__assert_func>:
 8008234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008236:	4614      	mov	r4, r2
 8008238:	461a      	mov	r2, r3
 800823a:	4b09      	ldr	r3, [pc, #36]	; (8008260 <__assert_func+0x2c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4605      	mov	r5, r0
 8008240:	68d8      	ldr	r0, [r3, #12]
 8008242:	b14c      	cbz	r4, 8008258 <__assert_func+0x24>
 8008244:	4b07      	ldr	r3, [pc, #28]	; (8008264 <__assert_func+0x30>)
 8008246:	9100      	str	r1, [sp, #0]
 8008248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800824c:	4906      	ldr	r1, [pc, #24]	; (8008268 <__assert_func+0x34>)
 800824e:	462b      	mov	r3, r5
 8008250:	f000 f872 	bl	8008338 <fiprintf>
 8008254:	f000 f882 	bl	800835c <abort>
 8008258:	4b04      	ldr	r3, [pc, #16]	; (800826c <__assert_func+0x38>)
 800825a:	461c      	mov	r4, r3
 800825c:	e7f3      	b.n	8008246 <__assert_func+0x12>
 800825e:	bf00      	nop
 8008260:	20000068 	.word	0x20000068
 8008264:	0802e5b7 	.word	0x0802e5b7
 8008268:	0802e5c4 	.word	0x0802e5c4
 800826c:	0802e5f2 	.word	0x0802e5f2

08008270 <_calloc_r>:
 8008270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008272:	fba1 2402 	umull	r2, r4, r1, r2
 8008276:	b94c      	cbnz	r4, 800828c <_calloc_r+0x1c>
 8008278:	4611      	mov	r1, r2
 800827a:	9201      	str	r2, [sp, #4]
 800827c:	f7ff f994 	bl	80075a8 <_malloc_r>
 8008280:	9a01      	ldr	r2, [sp, #4]
 8008282:	4605      	mov	r5, r0
 8008284:	b930      	cbnz	r0, 8008294 <_calloc_r+0x24>
 8008286:	4628      	mov	r0, r5
 8008288:	b003      	add	sp, #12
 800828a:	bd30      	pop	{r4, r5, pc}
 800828c:	220c      	movs	r2, #12
 800828e:	6002      	str	r2, [r0, #0]
 8008290:	2500      	movs	r5, #0
 8008292:	e7f8      	b.n	8008286 <_calloc_r+0x16>
 8008294:	4621      	mov	r1, r4
 8008296:	f7fe faa0 	bl	80067da <memset>
 800829a:	e7f4      	b.n	8008286 <_calloc_r+0x16>

0800829c <__ascii_mbtowc>:
 800829c:	b082      	sub	sp, #8
 800829e:	b901      	cbnz	r1, 80082a2 <__ascii_mbtowc+0x6>
 80082a0:	a901      	add	r1, sp, #4
 80082a2:	b142      	cbz	r2, 80082b6 <__ascii_mbtowc+0x1a>
 80082a4:	b14b      	cbz	r3, 80082ba <__ascii_mbtowc+0x1e>
 80082a6:	7813      	ldrb	r3, [r2, #0]
 80082a8:	600b      	str	r3, [r1, #0]
 80082aa:	7812      	ldrb	r2, [r2, #0]
 80082ac:	1e10      	subs	r0, r2, #0
 80082ae:	bf18      	it	ne
 80082b0:	2001      	movne	r0, #1
 80082b2:	b002      	add	sp, #8
 80082b4:	4770      	bx	lr
 80082b6:	4610      	mov	r0, r2
 80082b8:	e7fb      	b.n	80082b2 <__ascii_mbtowc+0x16>
 80082ba:	f06f 0001 	mvn.w	r0, #1
 80082be:	e7f8      	b.n	80082b2 <__ascii_mbtowc+0x16>

080082c0 <_realloc_r>:
 80082c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c4:	4680      	mov	r8, r0
 80082c6:	4614      	mov	r4, r2
 80082c8:	460e      	mov	r6, r1
 80082ca:	b921      	cbnz	r1, 80082d6 <_realloc_r+0x16>
 80082cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082d0:	4611      	mov	r1, r2
 80082d2:	f7ff b969 	b.w	80075a8 <_malloc_r>
 80082d6:	b92a      	cbnz	r2, 80082e4 <_realloc_r+0x24>
 80082d8:	f7ff f8f2 	bl	80074c0 <_free_r>
 80082dc:	4625      	mov	r5, r4
 80082de:	4628      	mov	r0, r5
 80082e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e4:	f000 f841 	bl	800836a <_malloc_usable_size_r>
 80082e8:	4284      	cmp	r4, r0
 80082ea:	4607      	mov	r7, r0
 80082ec:	d802      	bhi.n	80082f4 <_realloc_r+0x34>
 80082ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082f2:	d812      	bhi.n	800831a <_realloc_r+0x5a>
 80082f4:	4621      	mov	r1, r4
 80082f6:	4640      	mov	r0, r8
 80082f8:	f7ff f956 	bl	80075a8 <_malloc_r>
 80082fc:	4605      	mov	r5, r0
 80082fe:	2800      	cmp	r0, #0
 8008300:	d0ed      	beq.n	80082de <_realloc_r+0x1e>
 8008302:	42bc      	cmp	r4, r7
 8008304:	4622      	mov	r2, r4
 8008306:	4631      	mov	r1, r6
 8008308:	bf28      	it	cs
 800830a:	463a      	movcs	r2, r7
 800830c:	f7ff ff84 	bl	8008218 <memcpy>
 8008310:	4631      	mov	r1, r6
 8008312:	4640      	mov	r0, r8
 8008314:	f7ff f8d4 	bl	80074c0 <_free_r>
 8008318:	e7e1      	b.n	80082de <_realloc_r+0x1e>
 800831a:	4635      	mov	r5, r6
 800831c:	e7df      	b.n	80082de <_realloc_r+0x1e>

0800831e <__ascii_wctomb>:
 800831e:	b149      	cbz	r1, 8008334 <__ascii_wctomb+0x16>
 8008320:	2aff      	cmp	r2, #255	; 0xff
 8008322:	bf85      	ittet	hi
 8008324:	238a      	movhi	r3, #138	; 0x8a
 8008326:	6003      	strhi	r3, [r0, #0]
 8008328:	700a      	strbls	r2, [r1, #0]
 800832a:	f04f 30ff 	movhi.w	r0, #4294967295
 800832e:	bf98      	it	ls
 8008330:	2001      	movls	r0, #1
 8008332:	4770      	bx	lr
 8008334:	4608      	mov	r0, r1
 8008336:	4770      	bx	lr

08008338 <fiprintf>:
 8008338:	b40e      	push	{r1, r2, r3}
 800833a:	b503      	push	{r0, r1, lr}
 800833c:	4601      	mov	r1, r0
 800833e:	ab03      	add	r3, sp, #12
 8008340:	4805      	ldr	r0, [pc, #20]	; (8008358 <fiprintf+0x20>)
 8008342:	f853 2b04 	ldr.w	r2, [r3], #4
 8008346:	6800      	ldr	r0, [r0, #0]
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	f000 f83f 	bl	80083cc <_vfiprintf_r>
 800834e:	b002      	add	sp, #8
 8008350:	f85d eb04 	ldr.w	lr, [sp], #4
 8008354:	b003      	add	sp, #12
 8008356:	4770      	bx	lr
 8008358:	20000068 	.word	0x20000068

0800835c <abort>:
 800835c:	b508      	push	{r3, lr}
 800835e:	2006      	movs	r0, #6
 8008360:	f000 fa0c 	bl	800877c <raise>
 8008364:	2001      	movs	r0, #1
 8008366:	f7f9 f847 	bl	80013f8 <_exit>

0800836a <_malloc_usable_size_r>:
 800836a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800836e:	1f18      	subs	r0, r3, #4
 8008370:	2b00      	cmp	r3, #0
 8008372:	bfbc      	itt	lt
 8008374:	580b      	ldrlt	r3, [r1, r0]
 8008376:	18c0      	addlt	r0, r0, r3
 8008378:	4770      	bx	lr

0800837a <__sfputc_r>:
 800837a:	6893      	ldr	r3, [r2, #8]
 800837c:	3b01      	subs	r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	b410      	push	{r4}
 8008382:	6093      	str	r3, [r2, #8]
 8008384:	da08      	bge.n	8008398 <__sfputc_r+0x1e>
 8008386:	6994      	ldr	r4, [r2, #24]
 8008388:	42a3      	cmp	r3, r4
 800838a:	db01      	blt.n	8008390 <__sfputc_r+0x16>
 800838c:	290a      	cmp	r1, #10
 800838e:	d103      	bne.n	8008398 <__sfputc_r+0x1e>
 8008390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008394:	f000 b934 	b.w	8008600 <__swbuf_r>
 8008398:	6813      	ldr	r3, [r2, #0]
 800839a:	1c58      	adds	r0, r3, #1
 800839c:	6010      	str	r0, [r2, #0]
 800839e:	7019      	strb	r1, [r3, #0]
 80083a0:	4608      	mov	r0, r1
 80083a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <__sfputs_r>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	4606      	mov	r6, r0
 80083ac:	460f      	mov	r7, r1
 80083ae:	4614      	mov	r4, r2
 80083b0:	18d5      	adds	r5, r2, r3
 80083b2:	42ac      	cmp	r4, r5
 80083b4:	d101      	bne.n	80083ba <__sfputs_r+0x12>
 80083b6:	2000      	movs	r0, #0
 80083b8:	e007      	b.n	80083ca <__sfputs_r+0x22>
 80083ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083be:	463a      	mov	r2, r7
 80083c0:	4630      	mov	r0, r6
 80083c2:	f7ff ffda 	bl	800837a <__sfputc_r>
 80083c6:	1c43      	adds	r3, r0, #1
 80083c8:	d1f3      	bne.n	80083b2 <__sfputs_r+0xa>
 80083ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083cc <_vfiprintf_r>:
 80083cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d0:	460d      	mov	r5, r1
 80083d2:	b09d      	sub	sp, #116	; 0x74
 80083d4:	4614      	mov	r4, r2
 80083d6:	4698      	mov	r8, r3
 80083d8:	4606      	mov	r6, r0
 80083da:	b118      	cbz	r0, 80083e4 <_vfiprintf_r+0x18>
 80083dc:	6a03      	ldr	r3, [r0, #32]
 80083de:	b90b      	cbnz	r3, 80083e4 <_vfiprintf_r+0x18>
 80083e0:	f7fe f962 	bl	80066a8 <__sinit>
 80083e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083e6:	07d9      	lsls	r1, r3, #31
 80083e8:	d405      	bmi.n	80083f6 <_vfiprintf_r+0x2a>
 80083ea:	89ab      	ldrh	r3, [r5, #12]
 80083ec:	059a      	lsls	r2, r3, #22
 80083ee:	d402      	bmi.n	80083f6 <_vfiprintf_r+0x2a>
 80083f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083f2:	f7fe fa6f 	bl	80068d4 <__retarget_lock_acquire_recursive>
 80083f6:	89ab      	ldrh	r3, [r5, #12]
 80083f8:	071b      	lsls	r3, r3, #28
 80083fa:	d501      	bpl.n	8008400 <_vfiprintf_r+0x34>
 80083fc:	692b      	ldr	r3, [r5, #16]
 80083fe:	b99b      	cbnz	r3, 8008428 <_vfiprintf_r+0x5c>
 8008400:	4629      	mov	r1, r5
 8008402:	4630      	mov	r0, r6
 8008404:	f000 f93a 	bl	800867c <__swsetup_r>
 8008408:	b170      	cbz	r0, 8008428 <_vfiprintf_r+0x5c>
 800840a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800840c:	07dc      	lsls	r4, r3, #31
 800840e:	d504      	bpl.n	800841a <_vfiprintf_r+0x4e>
 8008410:	f04f 30ff 	mov.w	r0, #4294967295
 8008414:	b01d      	add	sp, #116	; 0x74
 8008416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841a:	89ab      	ldrh	r3, [r5, #12]
 800841c:	0598      	lsls	r0, r3, #22
 800841e:	d4f7      	bmi.n	8008410 <_vfiprintf_r+0x44>
 8008420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008422:	f7fe fa58 	bl	80068d6 <__retarget_lock_release_recursive>
 8008426:	e7f3      	b.n	8008410 <_vfiprintf_r+0x44>
 8008428:	2300      	movs	r3, #0
 800842a:	9309      	str	r3, [sp, #36]	; 0x24
 800842c:	2320      	movs	r3, #32
 800842e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008432:	f8cd 800c 	str.w	r8, [sp, #12]
 8008436:	2330      	movs	r3, #48	; 0x30
 8008438:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80085ec <_vfiprintf_r+0x220>
 800843c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008440:	f04f 0901 	mov.w	r9, #1
 8008444:	4623      	mov	r3, r4
 8008446:	469a      	mov	sl, r3
 8008448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800844c:	b10a      	cbz	r2, 8008452 <_vfiprintf_r+0x86>
 800844e:	2a25      	cmp	r2, #37	; 0x25
 8008450:	d1f9      	bne.n	8008446 <_vfiprintf_r+0x7a>
 8008452:	ebba 0b04 	subs.w	fp, sl, r4
 8008456:	d00b      	beq.n	8008470 <_vfiprintf_r+0xa4>
 8008458:	465b      	mov	r3, fp
 800845a:	4622      	mov	r2, r4
 800845c:	4629      	mov	r1, r5
 800845e:	4630      	mov	r0, r6
 8008460:	f7ff ffa2 	bl	80083a8 <__sfputs_r>
 8008464:	3001      	adds	r0, #1
 8008466:	f000 80a9 	beq.w	80085bc <_vfiprintf_r+0x1f0>
 800846a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800846c:	445a      	add	r2, fp
 800846e:	9209      	str	r2, [sp, #36]	; 0x24
 8008470:	f89a 3000 	ldrb.w	r3, [sl]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 80a1 	beq.w	80085bc <_vfiprintf_r+0x1f0>
 800847a:	2300      	movs	r3, #0
 800847c:	f04f 32ff 	mov.w	r2, #4294967295
 8008480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008484:	f10a 0a01 	add.w	sl, sl, #1
 8008488:	9304      	str	r3, [sp, #16]
 800848a:	9307      	str	r3, [sp, #28]
 800848c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008490:	931a      	str	r3, [sp, #104]	; 0x68
 8008492:	4654      	mov	r4, sl
 8008494:	2205      	movs	r2, #5
 8008496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849a:	4854      	ldr	r0, [pc, #336]	; (80085ec <_vfiprintf_r+0x220>)
 800849c:	f7f7 fed0 	bl	8000240 <memchr>
 80084a0:	9a04      	ldr	r2, [sp, #16]
 80084a2:	b9d8      	cbnz	r0, 80084dc <_vfiprintf_r+0x110>
 80084a4:	06d1      	lsls	r1, r2, #27
 80084a6:	bf44      	itt	mi
 80084a8:	2320      	movmi	r3, #32
 80084aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ae:	0713      	lsls	r3, r2, #28
 80084b0:	bf44      	itt	mi
 80084b2:	232b      	movmi	r3, #43	; 0x2b
 80084b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084b8:	f89a 3000 	ldrb.w	r3, [sl]
 80084bc:	2b2a      	cmp	r3, #42	; 0x2a
 80084be:	d015      	beq.n	80084ec <_vfiprintf_r+0x120>
 80084c0:	9a07      	ldr	r2, [sp, #28]
 80084c2:	4654      	mov	r4, sl
 80084c4:	2000      	movs	r0, #0
 80084c6:	f04f 0c0a 	mov.w	ip, #10
 80084ca:	4621      	mov	r1, r4
 80084cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084d0:	3b30      	subs	r3, #48	; 0x30
 80084d2:	2b09      	cmp	r3, #9
 80084d4:	d94d      	bls.n	8008572 <_vfiprintf_r+0x1a6>
 80084d6:	b1b0      	cbz	r0, 8008506 <_vfiprintf_r+0x13a>
 80084d8:	9207      	str	r2, [sp, #28]
 80084da:	e014      	b.n	8008506 <_vfiprintf_r+0x13a>
 80084dc:	eba0 0308 	sub.w	r3, r0, r8
 80084e0:	fa09 f303 	lsl.w	r3, r9, r3
 80084e4:	4313      	orrs	r3, r2
 80084e6:	9304      	str	r3, [sp, #16]
 80084e8:	46a2      	mov	sl, r4
 80084ea:	e7d2      	b.n	8008492 <_vfiprintf_r+0xc6>
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	1d19      	adds	r1, r3, #4
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	9103      	str	r1, [sp, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	bfbb      	ittet	lt
 80084f8:	425b      	neglt	r3, r3
 80084fa:	f042 0202 	orrlt.w	r2, r2, #2
 80084fe:	9307      	strge	r3, [sp, #28]
 8008500:	9307      	strlt	r3, [sp, #28]
 8008502:	bfb8      	it	lt
 8008504:	9204      	strlt	r2, [sp, #16]
 8008506:	7823      	ldrb	r3, [r4, #0]
 8008508:	2b2e      	cmp	r3, #46	; 0x2e
 800850a:	d10c      	bne.n	8008526 <_vfiprintf_r+0x15a>
 800850c:	7863      	ldrb	r3, [r4, #1]
 800850e:	2b2a      	cmp	r3, #42	; 0x2a
 8008510:	d134      	bne.n	800857c <_vfiprintf_r+0x1b0>
 8008512:	9b03      	ldr	r3, [sp, #12]
 8008514:	1d1a      	adds	r2, r3, #4
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	9203      	str	r2, [sp, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	bfb8      	it	lt
 800851e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008522:	3402      	adds	r4, #2
 8008524:	9305      	str	r3, [sp, #20]
 8008526:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80085fc <_vfiprintf_r+0x230>
 800852a:	7821      	ldrb	r1, [r4, #0]
 800852c:	2203      	movs	r2, #3
 800852e:	4650      	mov	r0, sl
 8008530:	f7f7 fe86 	bl	8000240 <memchr>
 8008534:	b138      	cbz	r0, 8008546 <_vfiprintf_r+0x17a>
 8008536:	9b04      	ldr	r3, [sp, #16]
 8008538:	eba0 000a 	sub.w	r0, r0, sl
 800853c:	2240      	movs	r2, #64	; 0x40
 800853e:	4082      	lsls	r2, r0
 8008540:	4313      	orrs	r3, r2
 8008542:	3401      	adds	r4, #1
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854a:	4829      	ldr	r0, [pc, #164]	; (80085f0 <_vfiprintf_r+0x224>)
 800854c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008550:	2206      	movs	r2, #6
 8008552:	f7f7 fe75 	bl	8000240 <memchr>
 8008556:	2800      	cmp	r0, #0
 8008558:	d03f      	beq.n	80085da <_vfiprintf_r+0x20e>
 800855a:	4b26      	ldr	r3, [pc, #152]	; (80085f4 <_vfiprintf_r+0x228>)
 800855c:	bb1b      	cbnz	r3, 80085a6 <_vfiprintf_r+0x1da>
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	3307      	adds	r3, #7
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	3308      	adds	r3, #8
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800856c:	443b      	add	r3, r7
 800856e:	9309      	str	r3, [sp, #36]	; 0x24
 8008570:	e768      	b.n	8008444 <_vfiprintf_r+0x78>
 8008572:	fb0c 3202 	mla	r2, ip, r2, r3
 8008576:	460c      	mov	r4, r1
 8008578:	2001      	movs	r0, #1
 800857a:	e7a6      	b.n	80084ca <_vfiprintf_r+0xfe>
 800857c:	2300      	movs	r3, #0
 800857e:	3401      	adds	r4, #1
 8008580:	9305      	str	r3, [sp, #20]
 8008582:	4619      	mov	r1, r3
 8008584:	f04f 0c0a 	mov.w	ip, #10
 8008588:	4620      	mov	r0, r4
 800858a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800858e:	3a30      	subs	r2, #48	; 0x30
 8008590:	2a09      	cmp	r2, #9
 8008592:	d903      	bls.n	800859c <_vfiprintf_r+0x1d0>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0c6      	beq.n	8008526 <_vfiprintf_r+0x15a>
 8008598:	9105      	str	r1, [sp, #20]
 800859a:	e7c4      	b.n	8008526 <_vfiprintf_r+0x15a>
 800859c:	fb0c 2101 	mla	r1, ip, r1, r2
 80085a0:	4604      	mov	r4, r0
 80085a2:	2301      	movs	r3, #1
 80085a4:	e7f0      	b.n	8008588 <_vfiprintf_r+0x1bc>
 80085a6:	ab03      	add	r3, sp, #12
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	462a      	mov	r2, r5
 80085ac:	4b12      	ldr	r3, [pc, #72]	; (80085f8 <_vfiprintf_r+0x22c>)
 80085ae:	a904      	add	r1, sp, #16
 80085b0:	4630      	mov	r0, r6
 80085b2:	f7fd fc55 	bl	8005e60 <_printf_float>
 80085b6:	4607      	mov	r7, r0
 80085b8:	1c78      	adds	r0, r7, #1
 80085ba:	d1d6      	bne.n	800856a <_vfiprintf_r+0x19e>
 80085bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085be:	07d9      	lsls	r1, r3, #31
 80085c0:	d405      	bmi.n	80085ce <_vfiprintf_r+0x202>
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	059a      	lsls	r2, r3, #22
 80085c6:	d402      	bmi.n	80085ce <_vfiprintf_r+0x202>
 80085c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ca:	f7fe f984 	bl	80068d6 <__retarget_lock_release_recursive>
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	065b      	lsls	r3, r3, #25
 80085d2:	f53f af1d 	bmi.w	8008410 <_vfiprintf_r+0x44>
 80085d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085d8:	e71c      	b.n	8008414 <_vfiprintf_r+0x48>
 80085da:	ab03      	add	r3, sp, #12
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	462a      	mov	r2, r5
 80085e0:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <_vfiprintf_r+0x22c>)
 80085e2:	a904      	add	r1, sp, #16
 80085e4:	4630      	mov	r0, r6
 80085e6:	f7fd fec3 	bl	8006370 <_printf_i>
 80085ea:	e7e4      	b.n	80085b6 <_vfiprintf_r+0x1ea>
 80085ec:	0802e59c 	.word	0x0802e59c
 80085f0:	0802e5a6 	.word	0x0802e5a6
 80085f4:	08005e61 	.word	0x08005e61
 80085f8:	080083a9 	.word	0x080083a9
 80085fc:	0802e5a2 	.word	0x0802e5a2

08008600 <__swbuf_r>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	460e      	mov	r6, r1
 8008604:	4614      	mov	r4, r2
 8008606:	4605      	mov	r5, r0
 8008608:	b118      	cbz	r0, 8008612 <__swbuf_r+0x12>
 800860a:	6a03      	ldr	r3, [r0, #32]
 800860c:	b90b      	cbnz	r3, 8008612 <__swbuf_r+0x12>
 800860e:	f7fe f84b 	bl	80066a8 <__sinit>
 8008612:	69a3      	ldr	r3, [r4, #24]
 8008614:	60a3      	str	r3, [r4, #8]
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	071a      	lsls	r2, r3, #28
 800861a:	d525      	bpl.n	8008668 <__swbuf_r+0x68>
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	b31b      	cbz	r3, 8008668 <__swbuf_r+0x68>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	6922      	ldr	r2, [r4, #16]
 8008624:	1a98      	subs	r0, r3, r2
 8008626:	6963      	ldr	r3, [r4, #20]
 8008628:	b2f6      	uxtb	r6, r6
 800862a:	4283      	cmp	r3, r0
 800862c:	4637      	mov	r7, r6
 800862e:	dc04      	bgt.n	800863a <__swbuf_r+0x3a>
 8008630:	4621      	mov	r1, r4
 8008632:	4628      	mov	r0, r5
 8008634:	f7ff fd9e 	bl	8008174 <_fflush_r>
 8008638:	b9e0      	cbnz	r0, 8008674 <__swbuf_r+0x74>
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	3b01      	subs	r3, #1
 800863e:	60a3      	str	r3, [r4, #8]
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	6022      	str	r2, [r4, #0]
 8008646:	701e      	strb	r6, [r3, #0]
 8008648:	6962      	ldr	r2, [r4, #20]
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	429a      	cmp	r2, r3
 800864e:	d004      	beq.n	800865a <__swbuf_r+0x5a>
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	07db      	lsls	r3, r3, #31
 8008654:	d506      	bpl.n	8008664 <__swbuf_r+0x64>
 8008656:	2e0a      	cmp	r6, #10
 8008658:	d104      	bne.n	8008664 <__swbuf_r+0x64>
 800865a:	4621      	mov	r1, r4
 800865c:	4628      	mov	r0, r5
 800865e:	f7ff fd89 	bl	8008174 <_fflush_r>
 8008662:	b938      	cbnz	r0, 8008674 <__swbuf_r+0x74>
 8008664:	4638      	mov	r0, r7
 8008666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008668:	4621      	mov	r1, r4
 800866a:	4628      	mov	r0, r5
 800866c:	f000 f806 	bl	800867c <__swsetup_r>
 8008670:	2800      	cmp	r0, #0
 8008672:	d0d5      	beq.n	8008620 <__swbuf_r+0x20>
 8008674:	f04f 37ff 	mov.w	r7, #4294967295
 8008678:	e7f4      	b.n	8008664 <__swbuf_r+0x64>
	...

0800867c <__swsetup_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4b2a      	ldr	r3, [pc, #168]	; (8008728 <__swsetup_r+0xac>)
 8008680:	4605      	mov	r5, r0
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	460c      	mov	r4, r1
 8008686:	b118      	cbz	r0, 8008690 <__swsetup_r+0x14>
 8008688:	6a03      	ldr	r3, [r0, #32]
 800868a:	b90b      	cbnz	r3, 8008690 <__swsetup_r+0x14>
 800868c:	f7fe f80c 	bl	80066a8 <__sinit>
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008696:	0718      	lsls	r0, r3, #28
 8008698:	d422      	bmi.n	80086e0 <__swsetup_r+0x64>
 800869a:	06d9      	lsls	r1, r3, #27
 800869c:	d407      	bmi.n	80086ae <__swsetup_r+0x32>
 800869e:	2309      	movs	r3, #9
 80086a0:	602b      	str	r3, [r5, #0]
 80086a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086a6:	81a3      	strh	r3, [r4, #12]
 80086a8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ac:	e034      	b.n	8008718 <__swsetup_r+0x9c>
 80086ae:	0758      	lsls	r0, r3, #29
 80086b0:	d512      	bpl.n	80086d8 <__swsetup_r+0x5c>
 80086b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086b4:	b141      	cbz	r1, 80086c8 <__swsetup_r+0x4c>
 80086b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086ba:	4299      	cmp	r1, r3
 80086bc:	d002      	beq.n	80086c4 <__swsetup_r+0x48>
 80086be:	4628      	mov	r0, r5
 80086c0:	f7fe fefe 	bl	80074c0 <_free_r>
 80086c4:	2300      	movs	r3, #0
 80086c6:	6363      	str	r3, [r4, #52]	; 0x34
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086ce:	81a3      	strh	r3, [r4, #12]
 80086d0:	2300      	movs	r3, #0
 80086d2:	6063      	str	r3, [r4, #4]
 80086d4:	6923      	ldr	r3, [r4, #16]
 80086d6:	6023      	str	r3, [r4, #0]
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	f043 0308 	orr.w	r3, r3, #8
 80086de:	81a3      	strh	r3, [r4, #12]
 80086e0:	6923      	ldr	r3, [r4, #16]
 80086e2:	b94b      	cbnz	r3, 80086f8 <__swsetup_r+0x7c>
 80086e4:	89a3      	ldrh	r3, [r4, #12]
 80086e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086ee:	d003      	beq.n	80086f8 <__swsetup_r+0x7c>
 80086f0:	4621      	mov	r1, r4
 80086f2:	4628      	mov	r0, r5
 80086f4:	f000 f884 	bl	8008800 <__smakebuf_r>
 80086f8:	89a0      	ldrh	r0, [r4, #12]
 80086fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086fe:	f010 0301 	ands.w	r3, r0, #1
 8008702:	d00a      	beq.n	800871a <__swsetup_r+0x9e>
 8008704:	2300      	movs	r3, #0
 8008706:	60a3      	str	r3, [r4, #8]
 8008708:	6963      	ldr	r3, [r4, #20]
 800870a:	425b      	negs	r3, r3
 800870c:	61a3      	str	r3, [r4, #24]
 800870e:	6923      	ldr	r3, [r4, #16]
 8008710:	b943      	cbnz	r3, 8008724 <__swsetup_r+0xa8>
 8008712:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008716:	d1c4      	bne.n	80086a2 <__swsetup_r+0x26>
 8008718:	bd38      	pop	{r3, r4, r5, pc}
 800871a:	0781      	lsls	r1, r0, #30
 800871c:	bf58      	it	pl
 800871e:	6963      	ldrpl	r3, [r4, #20]
 8008720:	60a3      	str	r3, [r4, #8]
 8008722:	e7f4      	b.n	800870e <__swsetup_r+0x92>
 8008724:	2000      	movs	r0, #0
 8008726:	e7f7      	b.n	8008718 <__swsetup_r+0x9c>
 8008728:	20000068 	.word	0x20000068

0800872c <_raise_r>:
 800872c:	291f      	cmp	r1, #31
 800872e:	b538      	push	{r3, r4, r5, lr}
 8008730:	4604      	mov	r4, r0
 8008732:	460d      	mov	r5, r1
 8008734:	d904      	bls.n	8008740 <_raise_r+0x14>
 8008736:	2316      	movs	r3, #22
 8008738:	6003      	str	r3, [r0, #0]
 800873a:	f04f 30ff 	mov.w	r0, #4294967295
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008742:	b112      	cbz	r2, 800874a <_raise_r+0x1e>
 8008744:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008748:	b94b      	cbnz	r3, 800875e <_raise_r+0x32>
 800874a:	4620      	mov	r0, r4
 800874c:	f000 f830 	bl	80087b0 <_getpid_r>
 8008750:	462a      	mov	r2, r5
 8008752:	4601      	mov	r1, r0
 8008754:	4620      	mov	r0, r4
 8008756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800875a:	f000 b817 	b.w	800878c <_kill_r>
 800875e:	2b01      	cmp	r3, #1
 8008760:	d00a      	beq.n	8008778 <_raise_r+0x4c>
 8008762:	1c59      	adds	r1, r3, #1
 8008764:	d103      	bne.n	800876e <_raise_r+0x42>
 8008766:	2316      	movs	r3, #22
 8008768:	6003      	str	r3, [r0, #0]
 800876a:	2001      	movs	r0, #1
 800876c:	e7e7      	b.n	800873e <_raise_r+0x12>
 800876e:	2400      	movs	r4, #0
 8008770:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008774:	4628      	mov	r0, r5
 8008776:	4798      	blx	r3
 8008778:	2000      	movs	r0, #0
 800877a:	e7e0      	b.n	800873e <_raise_r+0x12>

0800877c <raise>:
 800877c:	4b02      	ldr	r3, [pc, #8]	; (8008788 <raise+0xc>)
 800877e:	4601      	mov	r1, r0
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	f7ff bfd3 	b.w	800872c <_raise_r>
 8008786:	bf00      	nop
 8008788:	20000068 	.word	0x20000068

0800878c <_kill_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4d07      	ldr	r5, [pc, #28]	; (80087ac <_kill_r+0x20>)
 8008790:	2300      	movs	r3, #0
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	4611      	mov	r1, r2
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	f7f8 fe1d 	bl	80013d8 <_kill>
 800879e:	1c43      	adds	r3, r0, #1
 80087a0:	d102      	bne.n	80087a8 <_kill_r+0x1c>
 80087a2:	682b      	ldr	r3, [r5, #0]
 80087a4:	b103      	cbz	r3, 80087a8 <_kill_r+0x1c>
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	bd38      	pop	{r3, r4, r5, pc}
 80087aa:	bf00      	nop
 80087ac:	20000470 	.word	0x20000470

080087b0 <_getpid_r>:
 80087b0:	f7f8 be0a 	b.w	80013c8 <_getpid>

080087b4 <__swhatbuf_r>:
 80087b4:	b570      	push	{r4, r5, r6, lr}
 80087b6:	460c      	mov	r4, r1
 80087b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087bc:	2900      	cmp	r1, #0
 80087be:	b096      	sub	sp, #88	; 0x58
 80087c0:	4615      	mov	r5, r2
 80087c2:	461e      	mov	r6, r3
 80087c4:	da0d      	bge.n	80087e2 <__swhatbuf_r+0x2e>
 80087c6:	89a3      	ldrh	r3, [r4, #12]
 80087c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80087cc:	f04f 0100 	mov.w	r1, #0
 80087d0:	bf0c      	ite	eq
 80087d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80087d6:	2340      	movne	r3, #64	; 0x40
 80087d8:	2000      	movs	r0, #0
 80087da:	6031      	str	r1, [r6, #0]
 80087dc:	602b      	str	r3, [r5, #0]
 80087de:	b016      	add	sp, #88	; 0x58
 80087e0:	bd70      	pop	{r4, r5, r6, pc}
 80087e2:	466a      	mov	r2, sp
 80087e4:	f000 f848 	bl	8008878 <_fstat_r>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	dbec      	blt.n	80087c6 <__swhatbuf_r+0x12>
 80087ec:	9901      	ldr	r1, [sp, #4]
 80087ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80087f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80087f6:	4259      	negs	r1, r3
 80087f8:	4159      	adcs	r1, r3
 80087fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087fe:	e7eb      	b.n	80087d8 <__swhatbuf_r+0x24>

08008800 <__smakebuf_r>:
 8008800:	898b      	ldrh	r3, [r1, #12]
 8008802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008804:	079d      	lsls	r5, r3, #30
 8008806:	4606      	mov	r6, r0
 8008808:	460c      	mov	r4, r1
 800880a:	d507      	bpl.n	800881c <__smakebuf_r+0x1c>
 800880c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	2301      	movs	r3, #1
 8008816:	6163      	str	r3, [r4, #20]
 8008818:	b002      	add	sp, #8
 800881a:	bd70      	pop	{r4, r5, r6, pc}
 800881c:	ab01      	add	r3, sp, #4
 800881e:	466a      	mov	r2, sp
 8008820:	f7ff ffc8 	bl	80087b4 <__swhatbuf_r>
 8008824:	9900      	ldr	r1, [sp, #0]
 8008826:	4605      	mov	r5, r0
 8008828:	4630      	mov	r0, r6
 800882a:	f7fe febd 	bl	80075a8 <_malloc_r>
 800882e:	b948      	cbnz	r0, 8008844 <__smakebuf_r+0x44>
 8008830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008834:	059a      	lsls	r2, r3, #22
 8008836:	d4ef      	bmi.n	8008818 <__smakebuf_r+0x18>
 8008838:	f023 0303 	bic.w	r3, r3, #3
 800883c:	f043 0302 	orr.w	r3, r3, #2
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	e7e3      	b.n	800880c <__smakebuf_r+0xc>
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	6020      	str	r0, [r4, #0]
 8008848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884c:	81a3      	strh	r3, [r4, #12]
 800884e:	9b00      	ldr	r3, [sp, #0]
 8008850:	6163      	str	r3, [r4, #20]
 8008852:	9b01      	ldr	r3, [sp, #4]
 8008854:	6120      	str	r0, [r4, #16]
 8008856:	b15b      	cbz	r3, 8008870 <__smakebuf_r+0x70>
 8008858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800885c:	4630      	mov	r0, r6
 800885e:	f000 f81d 	bl	800889c <_isatty_r>
 8008862:	b128      	cbz	r0, 8008870 <__smakebuf_r+0x70>
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	f023 0303 	bic.w	r3, r3, #3
 800886a:	f043 0301 	orr.w	r3, r3, #1
 800886e:	81a3      	strh	r3, [r4, #12]
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	431d      	orrs	r5, r3
 8008874:	81a5      	strh	r5, [r4, #12]
 8008876:	e7cf      	b.n	8008818 <__smakebuf_r+0x18>

08008878 <_fstat_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4d07      	ldr	r5, [pc, #28]	; (8008898 <_fstat_r+0x20>)
 800887c:	2300      	movs	r3, #0
 800887e:	4604      	mov	r4, r0
 8008880:	4608      	mov	r0, r1
 8008882:	4611      	mov	r1, r2
 8008884:	602b      	str	r3, [r5, #0]
 8008886:	f7f8 fe06 	bl	8001496 <_fstat>
 800888a:	1c43      	adds	r3, r0, #1
 800888c:	d102      	bne.n	8008894 <_fstat_r+0x1c>
 800888e:	682b      	ldr	r3, [r5, #0]
 8008890:	b103      	cbz	r3, 8008894 <_fstat_r+0x1c>
 8008892:	6023      	str	r3, [r4, #0]
 8008894:	bd38      	pop	{r3, r4, r5, pc}
 8008896:	bf00      	nop
 8008898:	20000470 	.word	0x20000470

0800889c <_isatty_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4d06      	ldr	r5, [pc, #24]	; (80088b8 <_isatty_r+0x1c>)
 80088a0:	2300      	movs	r3, #0
 80088a2:	4604      	mov	r4, r0
 80088a4:	4608      	mov	r0, r1
 80088a6:	602b      	str	r3, [r5, #0]
 80088a8:	f7f8 fe05 	bl	80014b6 <_isatty>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	d102      	bne.n	80088b6 <_isatty_r+0x1a>
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	b103      	cbz	r3, 80088b6 <_isatty_r+0x1a>
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	20000470 	.word	0x20000470

080088bc <_init>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr

080088c8 <_fini>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	bf00      	nop
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr
