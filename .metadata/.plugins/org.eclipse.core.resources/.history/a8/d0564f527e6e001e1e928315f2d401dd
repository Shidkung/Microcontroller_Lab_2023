/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "rng.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "string.h"
#include "ILI9341_Touchscreen.h"

#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"

#include "snow_tiger.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
uint32_t VR[2];
uint32_t x_axis;
uint32_t y_axis;

float pwm_x;
float pwm_y;

char buff[3];
char buff1[3];

// Receive Image
uint8_t img[320 * 240 * 2];
uint8_t img_line[64];
uint8_t line = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart == &huart5)
	{
//		for (int i = 0; i < 320; i++)
//		{
//			uint16_t pixel = (img[(640 * line) + (i<<1)] << 8) | img[(640 * line) + (i<<1) + 1];
//			ILI9341_Draw_Pixel(i, line, pixel);
//		}

		line += 2;
		if (line == 240)
		{
			ILI9341_Draw_Image((const char *)img, SCREEN_HORIZONTAL_1);
			line = 0;
			uint8_t start = 5;
			HAL_UART_Transmit(&huart5, &start, 1, 1000);
		}

		HAL_UART_Abort_IT(&huart5);
		HAL_UART_Receive_IT(&huart5, img + (640 * line), 640 * 2);
	}
}
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
//{
//	if (huart == &huart5)
//	{
////		for (int i = 0; i < 320; i++)
////		{
////			uint16_t pixel = (img[(640 * line) + (i<<1)] << 8) | img[(640 * line) + (i<<1) + 1];
////			ILI9341_Draw_Pixel(i, line, pixel);
////		}
//		HAL_UART_Transmit(&huart3, (uint8_t*) "L", 1, 1000);
//		HAL_UART_Transmit(&huart3, (uint8_t*) "I", 1, 1000);
//		HAL_UART_Transmit(&huart3, (uint8_t*) "N", 1, 1000);
//		HAL_UART_Transmit(&huart3, (uint8_t*) "E", 1, 1000);
//		HAL_UART_Transmit(&huart3, (uint8_t*) " ", 1, 1000);
//		HAL_UART_Abort_IT(&huart5);
//		HAL_UART_Receive_IT(&huart5, img_line, 1);
//	}
//}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SPI5_Init();
  MX_TIM1_Init();
  MX_RNG_Init();
  MX_ADC1_Init();
  MX_USART3_UART_Init();
  MX_UART5_Init();
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
  ILI9341_Fill_Screen(GREEN);

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) VR, 2);

  // Receive Image
  uint8_t start = 5;
  HAL_UART_Transmit(&huart5, &start, 1, 1000);
  HAL_Delay(10);
  HAL_UART_Receive_IT(&huart5, img, 640 * 2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    x_axis = VR[0];
		y_axis = VR[1];
		if (x_axis >= 3200) {
			sprintf(buff, "%c", 'D');
			pwm_x = x_axis  / 3;

			while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {
			}

			HAL_UART_Transmit(&huart3, (uint8_t*) buff, strlen(buff), 1000);
			HAL_UART_Transmit(&huart5, (uint8_t*) "D", 1, 1000);
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
		}

		if (x_axis < 2000) {
			sprintf(buff, "%c", 'A');
			while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {
			}

			HAL_UART_Transmit(&huart3, (uint8_t*) buff, strlen(buff), 1000);
			HAL_UART_Transmit(&huart5, (uint8_t*) "A", 1, 1000);
			pwm_x = (4000 - x_axis) / 3;
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
		}

		if (y_axis >= 3200) {

			sprintf(buff1, "%c", 'S');

			while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {
			}
			//sprintf(buff, "%d\r\n", y_axis);
			HAL_UART_Transmit(&huart3, (uint8_t*) buff1, strlen(buff1), 1000);
			HAL_UART_Transmit(&huart5, (uint8_t*) "S", 1, 1000);
			pwm_y = y_axis  / 3;
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
		}

		if (y_axis < 1000) {
			sprintf(buff1, "%c", 'W');
			while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {
			}
			//sprintf(buff, "%d\r\n", y_axis);
			HAL_UART_Transmit(&huart3, (uint8_t*) buff1, strlen(buff1), 1000);
			HAL_UART_Transmit(&huart5, (uint8_t*) "W", 1, 1000);
			pwm_y =  (4000 - y_axis) / 3;
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
		}

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 200;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
