
SPECIAL_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004008  08004008  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08004008  08004008  00014008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004010  08004010  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004014  08004014  00014014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08004018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  2000003c  08004054  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08004054  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002006a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae29  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c06  00000000  00000000  0002aed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  0002cae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000622  00000000  00000000  0002d2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cad  00000000  00000000  0002d912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd66  00000000  00000000  000545bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0731  00000000  00000000  00060325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f40  00000000  00000000  00150a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00152998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000003c 	.word	0x2000003c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003f88 	.word	0x08003f88

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000040 	.word	0x20000040
 8000234:	08003f88 	.word	0x08003f88

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295
 800026c:	f04f 30ff 	movne.w	r0, #4294967295
 8000270:	f000 b970 	b.w	8000554 <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9e08      	ldr	r6, [sp, #32]
 8000292:	460d      	mov	r5, r1
 8000294:	4604      	mov	r4, r0
 8000296:	460f      	mov	r7, r1
 8000298:	2b00      	cmp	r3, #0
 800029a:	d14a      	bne.n	8000332 <__udivmoddi4+0xa6>
 800029c:	428a      	cmp	r2, r1
 800029e:	4694      	mov	ip, r2
 80002a0:	d965      	bls.n	800036e <__udivmoddi4+0xe2>
 80002a2:	fab2 f382 	clz	r3, r2
 80002a6:	b143      	cbz	r3, 80002ba <__udivmoddi4+0x2e>
 80002a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002ac:	f1c3 0220 	rsb	r2, r3, #32
 80002b0:	409f      	lsls	r7, r3
 80002b2:	fa20 f202 	lsr.w	r2, r0, r2
 80002b6:	4317      	orrs	r7, r2
 80002b8:	409c      	lsls	r4, r3
 80002ba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002be:	fa1f f58c 	uxth.w	r5, ip
 80002c2:	fbb7 f1fe 	udiv	r1, r7, lr
 80002c6:	0c22      	lsrs	r2, r4, #16
 80002c8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002cc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002d0:	fb01 f005 	mul.w	r0, r1, r5
 80002d4:	4290      	cmp	r0, r2
 80002d6:	d90a      	bls.n	80002ee <__udivmoddi4+0x62>
 80002d8:	eb1c 0202 	adds.w	r2, ip, r2
 80002dc:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e0:	f080 811c 	bcs.w	800051c <__udivmoddi4+0x290>
 80002e4:	4290      	cmp	r0, r2
 80002e6:	f240 8119 	bls.w	800051c <__udivmoddi4+0x290>
 80002ea:	3902      	subs	r1, #2
 80002ec:	4462      	add	r2, ip
 80002ee:	1a12      	subs	r2, r2, r0
 80002f0:	b2a4      	uxth	r4, r4
 80002f2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002f6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002fe:	fb00 f505 	mul.w	r5, r0, r5
 8000302:	42a5      	cmp	r5, r4
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x90>
 8000306:	eb1c 0404 	adds.w	r4, ip, r4
 800030a:	f100 32ff 	add.w	r2, r0, #4294967295
 800030e:	f080 8107 	bcs.w	8000520 <__udivmoddi4+0x294>
 8000312:	42a5      	cmp	r5, r4
 8000314:	f240 8104 	bls.w	8000520 <__udivmoddi4+0x294>
 8000318:	4464      	add	r4, ip
 800031a:	3802      	subs	r0, #2
 800031c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000320:	1b64      	subs	r4, r4, r5
 8000322:	2100      	movs	r1, #0
 8000324:	b11e      	cbz	r6, 800032e <__udivmoddi4+0xa2>
 8000326:	40dc      	lsrs	r4, r3
 8000328:	2300      	movs	r3, #0
 800032a:	e9c6 4300 	strd	r4, r3, [r6]
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	428b      	cmp	r3, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0xbc>
 8000336:	2e00      	cmp	r6, #0
 8000338:	f000 80ed 	beq.w	8000516 <__udivmoddi4+0x28a>
 800033c:	2100      	movs	r1, #0
 800033e:	e9c6 0500 	strd	r0, r5, [r6]
 8000342:	4608      	mov	r0, r1
 8000344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000348:	fab3 f183 	clz	r1, r3
 800034c:	2900      	cmp	r1, #0
 800034e:	d149      	bne.n	80003e4 <__udivmoddi4+0x158>
 8000350:	42ab      	cmp	r3, r5
 8000352:	d302      	bcc.n	800035a <__udivmoddi4+0xce>
 8000354:	4282      	cmp	r2, r0
 8000356:	f200 80f8 	bhi.w	800054a <__udivmoddi4+0x2be>
 800035a:	1a84      	subs	r4, r0, r2
 800035c:	eb65 0203 	sbc.w	r2, r5, r3
 8000360:	2001      	movs	r0, #1
 8000362:	4617      	mov	r7, r2
 8000364:	2e00      	cmp	r6, #0
 8000366:	d0e2      	beq.n	800032e <__udivmoddi4+0xa2>
 8000368:	e9c6 4700 	strd	r4, r7, [r6]
 800036c:	e7df      	b.n	800032e <__udivmoddi4+0xa2>
 800036e:	b902      	cbnz	r2, 8000372 <__udivmoddi4+0xe6>
 8000370:	deff      	udf	#255	; 0xff
 8000372:	fab2 f382 	clz	r3, r2
 8000376:	2b00      	cmp	r3, #0
 8000378:	f040 8090 	bne.w	800049c <__udivmoddi4+0x210>
 800037c:	1a8a      	subs	r2, r1, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	2101      	movs	r1, #1
 8000388:	fbb2 f5f7 	udiv	r5, r2, r7
 800038c:	fb07 2015 	mls	r0, r7, r5, r2
 8000390:	0c22      	lsrs	r2, r4, #16
 8000392:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000396:	fb0e f005 	mul.w	r0, lr, r5
 800039a:	4290      	cmp	r0, r2
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x124>
 800039e:	eb1c 0202 	adds.w	r2, ip, r2
 80003a2:	f105 38ff 	add.w	r8, r5, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x122>
 80003a8:	4290      	cmp	r0, r2
 80003aa:	f200 80cb 	bhi.w	8000544 <__udivmoddi4+0x2b8>
 80003ae:	4645      	mov	r5, r8
 80003b0:	1a12      	subs	r2, r2, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003b8:	fb07 2210 	mls	r2, r7, r0, r2
 80003bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c0:	fb0e fe00 	mul.w	lr, lr, r0
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x14e>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d0:	d202      	bcs.n	80003d8 <__udivmoddi4+0x14c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f200 80bb 	bhi.w	800054e <__udivmoddi4+0x2c2>
 80003d8:	4610      	mov	r0, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003e2:	e79f      	b.n	8000324 <__udivmoddi4+0x98>
 80003e4:	f1c1 0720 	rsb	r7, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80003f2:	fa05 f401 	lsl.w	r4, r5, r1
 80003f6:	fa20 f307 	lsr.w	r3, r0, r7
 80003fa:	40fd      	lsrs	r5, r7
 80003fc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000400:	4323      	orrs	r3, r4
 8000402:	fbb5 f8f9 	udiv	r8, r5, r9
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	fb09 5518 	mls	r5, r9, r8, r5
 800040e:	0c1c      	lsrs	r4, r3, #16
 8000410:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000414:	fb08 f50e 	mul.w	r5, r8, lr
 8000418:	42a5      	cmp	r5, r4
 800041a:	fa02 f201 	lsl.w	r2, r2, r1
 800041e:	fa00 f001 	lsl.w	r0, r0, r1
 8000422:	d90b      	bls.n	800043c <__udivmoddi4+0x1b0>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f108 3aff 	add.w	sl, r8, #4294967295
 800042c:	f080 8088 	bcs.w	8000540 <__udivmoddi4+0x2b4>
 8000430:	42a5      	cmp	r5, r4
 8000432:	f240 8085 	bls.w	8000540 <__udivmoddi4+0x2b4>
 8000436:	f1a8 0802 	sub.w	r8, r8, #2
 800043a:	4464      	add	r4, ip
 800043c:	1b64      	subs	r4, r4, r5
 800043e:	b29d      	uxth	r5, r3
 8000440:	fbb4 f3f9 	udiv	r3, r4, r9
 8000444:	fb09 4413 	mls	r4, r9, r3, r4
 8000448:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800044c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x1da>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f103 35ff 	add.w	r5, r3, #4294967295
 800045c:	d26c      	bcs.n	8000538 <__udivmoddi4+0x2ac>
 800045e:	45a6      	cmp	lr, r4
 8000460:	d96a      	bls.n	8000538 <__udivmoddi4+0x2ac>
 8000462:	3b02      	subs	r3, #2
 8000464:	4464      	add	r4, ip
 8000466:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800046a:	fba3 9502 	umull	r9, r5, r3, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	42ac      	cmp	r4, r5
 8000474:	46c8      	mov	r8, r9
 8000476:	46ae      	mov	lr, r5
 8000478:	d356      	bcc.n	8000528 <__udivmoddi4+0x29c>
 800047a:	d053      	beq.n	8000524 <__udivmoddi4+0x298>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x208>
 800047e:	ebb0 0208 	subs.w	r2, r0, r8
 8000482:	eb64 040e 	sbc.w	r4, r4, lr
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40ca      	lsrs	r2, r1
 800048c:	40cc      	lsrs	r4, r1
 800048e:	4317      	orrs	r7, r2
 8000490:	e9c6 7400 	strd	r7, r4, [r6]
 8000494:	4618      	mov	r0, r3
 8000496:	2100      	movs	r1, #0
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	f1c3 0120 	rsb	r1, r3, #32
 80004a0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004a4:	fa20 f201 	lsr.w	r2, r0, r1
 80004a8:	fa25 f101 	lsr.w	r1, r5, r1
 80004ac:	409d      	lsls	r5, r3
 80004ae:	432a      	orrs	r2, r5
 80004b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b4:	fa1f fe8c 	uxth.w	lr, ip
 80004b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80004bc:	fb07 1510 	mls	r5, r7, r0, r1
 80004c0:	0c11      	lsrs	r1, r2, #16
 80004c2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004c6:	fb00 f50e 	mul.w	r5, r0, lr
 80004ca:	428d      	cmp	r5, r1
 80004cc:	fa04 f403 	lsl.w	r4, r4, r3
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x258>
 80004d2:	eb1c 0101 	adds.w	r1, ip, r1
 80004d6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004da:	d22f      	bcs.n	800053c <__udivmoddi4+0x2b0>
 80004dc:	428d      	cmp	r5, r1
 80004de:	d92d      	bls.n	800053c <__udivmoddi4+0x2b0>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	1b49      	subs	r1, r1, r5
 80004e6:	b292      	uxth	r2, r2
 80004e8:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ec:	fb07 1115 	mls	r1, r7, r5, r1
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	fb05 f10e 	mul.w	r1, r5, lr
 80004f8:	4291      	cmp	r1, r2
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x282>
 80004fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000500:	f105 38ff 	add.w	r8, r5, #4294967295
 8000504:	d216      	bcs.n	8000534 <__udivmoddi4+0x2a8>
 8000506:	4291      	cmp	r1, r2
 8000508:	d914      	bls.n	8000534 <__udivmoddi4+0x2a8>
 800050a:	3d02      	subs	r5, #2
 800050c:	4462      	add	r2, ip
 800050e:	1a52      	subs	r2, r2, r1
 8000510:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000514:	e738      	b.n	8000388 <__udivmoddi4+0xfc>
 8000516:	4631      	mov	r1, r6
 8000518:	4630      	mov	r0, r6
 800051a:	e708      	b.n	800032e <__udivmoddi4+0xa2>
 800051c:	4639      	mov	r1, r7
 800051e:	e6e6      	b.n	80002ee <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e6fb      	b.n	800031c <__udivmoddi4+0x90>
 8000524:	4548      	cmp	r0, r9
 8000526:	d2a9      	bcs.n	800047c <__udivmoddi4+0x1f0>
 8000528:	ebb9 0802 	subs.w	r8, r9, r2
 800052c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000530:	3b01      	subs	r3, #1
 8000532:	e7a3      	b.n	800047c <__udivmoddi4+0x1f0>
 8000534:	4645      	mov	r5, r8
 8000536:	e7ea      	b.n	800050e <__udivmoddi4+0x282>
 8000538:	462b      	mov	r3, r5
 800053a:	e794      	b.n	8000466 <__udivmoddi4+0x1da>
 800053c:	4640      	mov	r0, r8
 800053e:	e7d1      	b.n	80004e4 <__udivmoddi4+0x258>
 8000540:	46d0      	mov	r8, sl
 8000542:	e77b      	b.n	800043c <__udivmoddi4+0x1b0>
 8000544:	3d02      	subs	r5, #2
 8000546:	4462      	add	r2, ip
 8000548:	e732      	b.n	80003b0 <__udivmoddi4+0x124>
 800054a:	4608      	mov	r0, r1
 800054c:	e70a      	b.n	8000364 <__udivmoddi4+0xd8>
 800054e:	4464      	add	r4, ip
 8000550:	3802      	subs	r0, #2
 8000552:	e742      	b.n	80003da <__udivmoddi4+0x14e>

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_GPIO_Init+0x44>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <MX_GPIO_Init+0x44>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_GPIO_Init+0x44>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_GPIO_Init+0x44>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <MX_GPIO_Init+0x44>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_GPIO_Init+0x44>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0308 	and.w	r3, r3, #8
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]

}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a4:	f000 fcf1 	bl	8000f8a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a8:	f000 f824 	bl	80005f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ac:	f7ff ffd4 	bl	8000558 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80005b0:	f000 fb24 	bl	8000bfc <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80005b4:	f000 fb82 	bl	8000cbc <MX_USART3_UART_Init>
	MX_USART2_UART_Init();
 80005b8:	f000 fb50 	bl	8000c5c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, (uint8_t*) text, sizeof(text), 100);
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	2224      	movs	r2, #36	; 0x24
 80005c0:	4908      	ldr	r1, [pc, #32]	; (80005e4 <main+0x44>)
 80005c2:	4809      	ldr	r0, [pc, #36]	; (80005e8 <main+0x48>)
 80005c4:	f002 f9e8 	bl	8002998 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart3, (uint8_t*) ready, strlen(ready), 1000);
	while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) == RESET) {
 80005c8:	bf00      	nop
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <main+0x4c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	69db      	ldr	r3, [r3, #28]
 80005d0:	f003 0320 	and.w	r3, r3, #32
 80005d4:	2b20      	cmp	r3, #32
 80005d6:	d1f8      	bne.n	80005ca <main+0x2a>
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &rc, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	4905      	ldr	r1, [pc, #20]	; (80005f0 <main+0x50>)
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <main+0x4c>)
 80005de:	f002 fa5e 	bl	8002a9e <HAL_UART_Receive_IT>
//            HAL_UART_Transmit(&huart3, &receivedCharName, 1, 1000);
//            myName[strlen(myName)] = receivedCharName;
//          }
//        }
//      }
	while (1) {
 80005e2:	e7fe      	b.n	80005e2 <main+0x42>
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000360 	.word	0x20000360
 80005ec:	200002d8 	.word	0x200002d8
 80005f0:	200001e8 	.word	0x200001e8

080005f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2234      	movs	r2, #52	; 0x34
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fc8c 	bl	8003f20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000618:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <SystemClock_Config+0xd4>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a2a      	ldr	r2, [pc, #168]	; (80006c8 <SystemClock_Config+0xd4>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xd4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <SystemClock_Config+0xd8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a25      	ldr	r2, [pc, #148]	; (80006cc <SystemClock_Config+0xd8>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <SystemClock_Config+0xd8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000660:	23d8      	movs	r3, #216	; 0xd8
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800066c:	2302      	movs	r3, #2
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4618      	mov	r0, r3
 8000676:	f001 f885 	bl	8001784 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x90>
		Error_Handler();
 8000680:	f000 fa42 	bl	8000b08 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000684:	f001 f82e 	bl	80016e4 <HAL_PWREx_EnableOverDrive>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x9e>
		Error_Handler();
 800068e:	f000 fa3b 	bl	8000b08 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	2107      	movs	r1, #7
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fb15 	bl	8001ce0 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xcc>
		Error_Handler();
 80006bc:	f000 fa24 	bl	8000b08 <Error_Handler>
	}
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

	if (huart == &huart3 && nameInput == true) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4aae      	ldr	r2, [pc, #696]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d175      	bne.n	80007cc <HAL_UART_RxCpltCallback+0xfc>
 80006e0:	4bad      	ldr	r3, [pc, #692]	; (8000998 <HAL_UART_RxCpltCallback+0x2c8>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d071      	beq.n	80007cc <HAL_UART_RxCpltCallback+0xfc>
		if (rc == '\r') {
 80006e8:	4bac      	ldr	r3, [pc, #688]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b0d      	cmp	r3, #13
 80006ee:	d140      	bne.n	8000772 <HAL_UART_RxCpltCallback+0xa2>
			nameInput = false;
 80006f0:	4ba9      	ldr	r3, [pc, #676]	; (8000998 <HAL_UART_RxCpltCallback+0x2c8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
			strcpy(nameTemp, myName);
 80006f6:	49aa      	ldr	r1, [pc, #680]	; (80009a0 <HAL_UART_RxCpltCallback+0x2d0>)
 80006f8:	48aa      	ldr	r0, [pc, #680]	; (80009a4 <HAL_UART_RxCpltCallback+0x2d4>)
 80006fa:	f003 fc3d 	bl	8003f78 <strcpy>
			strcat(nameTemp, "\r");
 80006fe:	48a9      	ldr	r0, [pc, #676]	; (80009a4 <HAL_UART_RxCpltCallback+0x2d4>)
 8000700:	f7ff fda4 	bl	800024c <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	4ba6      	ldr	r3, [pc, #664]	; (80009a4 <HAL_UART_RxCpltCallback+0x2d4>)
 800070a:	4413      	add	r3, r2
 800070c:	49a6      	ldr	r1, [pc, #664]	; (80009a8 <HAL_UART_RxCpltCallback+0x2d8>)
 800070e:	461a      	mov	r2, r3
 8000710:	460b      	mov	r3, r1
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) nameTemp, sizeof(nameTemp),
 8000716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071a:	2264      	movs	r2, #100	; 0x64
 800071c:	49a1      	ldr	r1, [pc, #644]	; (80009a4 <HAL_UART_RxCpltCallback+0x2d4>)
 800071e:	48a3      	ldr	r0, [pc, #652]	; (80009ac <HAL_UART_RxCpltCallback+0x2dc>)
 8000720:	f002 f93a 	bl	8002998 <HAL_UART_Transmit>
					1000);
			strcpy(nameTemp, myName);
 8000724:	499e      	ldr	r1, [pc, #632]	; (80009a0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000726:	489f      	ldr	r0, [pc, #636]	; (80009a4 <HAL_UART_RxCpltCallback+0x2d4>)
 8000728:	f003 fc26 	bl	8003f78 <strcpy>
			memset(myName, 0, sizeof(myName));
 800072c:	2264      	movs	r2, #100	; 0x64
 800072e:	2100      	movs	r1, #0
 8000730:	489b      	ldr	r0, [pc, #620]	; (80009a0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000732:	f003 fbf5 	bl	8003f20 <memset>
			if (strcmp(nameTemp, "q") == 0) {
 8000736:	499e      	ldr	r1, [pc, #632]	; (80009b0 <HAL_UART_RxCpltCallback+0x2e0>)
 8000738:	489a      	ldr	r0, [pc, #616]	; (80009a4 <HAL_UART_RxCpltCallback+0x2d4>)
 800073a:	f7ff fd7d 	bl	8000238 <strcmp>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d10d      	bne.n	8000760 <HAL_UART_RxCpltCallback+0x90>
				HAL_UART_Transmit(&huart2, (uint8_t*) "q", sizeof("q"), 1000);
 8000744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000748:	2202      	movs	r2, #2
 800074a:	4999      	ldr	r1, [pc, #612]	; (80009b0 <HAL_UART_RxCpltCallback+0x2e0>)
 800074c:	4897      	ldr	r0, [pc, #604]	; (80009ac <HAL_UART_RxCpltCallback+0x2dc>)
 800074e:	f002 f923 	bl	8002998 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n quit",
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	2208      	movs	r2, #8
 8000758:	4996      	ldr	r1, [pc, #600]	; (80009b4 <HAL_UART_RxCpltCallback+0x2e4>)
 800075a:	488e      	ldr	r0, [pc, #568]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 800075c:	f002 f91c 	bl	8002998 <HAL_UART_Transmit>
						sizeof("\r\n quit"), 1000);

			}
			HAL_UART_Receive_IT(&huart2, (uint8_t*) &rc, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	498e      	ldr	r1, [pc, #568]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 8000764:	4891      	ldr	r0, [pc, #580]	; (80009ac <HAL_UART_RxCpltCallback+0x2dc>)
 8000766:	f002 f99a 	bl	8002a9e <HAL_UART_Receive_IT>
			rc = '\0';
 800076a:	4b8c      	ldr	r3, [pc, #560]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	e02c      	b.n	80007cc <HAL_UART_RxCpltCallback+0xfc>

		}

		else if (rc == 0x08) {
 8000772:	4b8a      	ldr	r3, [pc, #552]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b08      	cmp	r3, #8
 8000778:	d114      	bne.n	80007a4 <HAL_UART_RxCpltCallback+0xd4>

			if (strlen(myName) >= 0) {
				HAL_UART_Receive_IT(&huart3, (uint8_t*) &rc, 1);
 800077a:	2201      	movs	r2, #1
 800077c:	4987      	ldr	r1, [pc, #540]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 800077e:	4885      	ldr	r0, [pc, #532]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 8000780:	f002 f98d 	bl	8002a9e <HAL_UART_Receive_IT>
				myName[strlen(myName) - 1] = '\0';
 8000784:	4886      	ldr	r0, [pc, #536]	; (80009a0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000786:	f7ff fd61 	bl	800024c <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	3b01      	subs	r3, #1
 800078e:	4a84      	ldr	r2, [pc, #528]	; (80009a0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000790:	2100      	movs	r1, #0
 8000792:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&huart3, (uint8_t*) "\b \b", 3, 1000);
 8000794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000798:	2203      	movs	r2, #3
 800079a:	4987      	ldr	r1, [pc, #540]	; (80009b8 <HAL_UART_RxCpltCallback+0x2e8>)
 800079c:	487d      	ldr	r0, [pc, #500]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 800079e:	f002 f8fb 	bl	8002998 <HAL_UART_Transmit>
 80007a2:	e013      	b.n	80007cc <HAL_UART_RxCpltCallback+0xfc>
			}

		}

		else {
			HAL_UART_Receive_IT(&huart3, (uint8_t*) &rc, 1);
 80007a4:	2201      	movs	r2, #1
 80007a6:	497d      	ldr	r1, [pc, #500]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 80007a8:	487a      	ldr	r0, [pc, #488]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 80007aa:	f002 f978 	bl	8002a9e <HAL_UART_Receive_IT>
			myName[strlen(myName)] = rc;
 80007ae:	487c      	ldr	r0, [pc, #496]	; (80009a0 <HAL_UART_RxCpltCallback+0x2d0>)
 80007b0:	f7ff fd4c 	bl	800024c <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a79      	ldr	r2, [pc, #484]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 80007b8:	7811      	ldrb	r1, [r2, #0]
 80007ba:	4a79      	ldr	r2, [pc, #484]	; (80009a0 <HAL_UART_RxCpltCallback+0x2d0>)
 80007bc:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart3, (uint8_t*) &rc, 1, 1000);
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	2201      	movs	r2, #1
 80007c4:	4975      	ldr	r1, [pc, #468]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 80007c6:	4873      	ldr	r0, [pc, #460]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 80007c8:	f002 f8e6 	bl	8002998 <HAL_UART_Transmit>
		}
	}

	if (huart == &huart3 && !nameInput) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a71      	ldr	r2, [pc, #452]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d173      	bne.n	80008bc <HAL_UART_RxCpltCallback+0x1ec>
 80007d4:	4b70      	ldr	r3, [pc, #448]	; (8000998 <HAL_UART_RxCpltCallback+0x2c8>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	f083 0301 	eor.w	r3, r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d06c      	beq.n	80008bc <HAL_UART_RxCpltCallback+0x1ec>
		if (rc == '\r') {
 80007e2:	4b6e      	ldr	r3, [pc, #440]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b0d      	cmp	r3, #13
 80007e8:	d13b      	bne.n	8000862 <HAL_UART_RxCpltCallback+0x192>
			if (strcmp(inputBuffer, "q") == 0) {
 80007ea:	4971      	ldr	r1, [pc, #452]	; (80009b0 <HAL_UART_RxCpltCallback+0x2e0>)
 80007ec:	4873      	ldr	r0, [pc, #460]	; (80009bc <HAL_UART_RxCpltCallback+0x2ec>)
 80007ee:	f7ff fd23 	bl	8000238 <strcmp>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10d      	bne.n	8000814 <HAL_UART_RxCpltCallback+0x144>
				HAL_UART_Transmit(&huart2, (uint8_t*) 'q', 1,
 80007f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fc:	2201      	movs	r2, #1
 80007fe:	2171      	movs	r1, #113	; 0x71
 8000800:	486a      	ldr	r0, [pc, #424]	; (80009ac <HAL_UART_RxCpltCallback+0x2dc>)
 8000802:	f002 f8c9 	bl	8002998 <HAL_UART_Transmit>
				1000);
				HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n quit",
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	2208      	movs	r2, #8
 800080c:	4969      	ldr	r1, [pc, #420]	; (80009b4 <HAL_UART_RxCpltCallback+0x2e4>)
 800080e:	4861      	ldr	r0, [pc, #388]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 8000810:	f002 f8c2 	bl	8002998 <HAL_UART_Transmit>
						sizeof("\r\n quit"), HAL_MAX_DELAY);



			}
			inputBuffer[strlen(inputBuffer)] = '\r';
 8000814:	4869      	ldr	r0, [pc, #420]	; (80009bc <HAL_UART_RxCpltCallback+0x2ec>)
 8000816:	f7ff fd19 	bl	800024c <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	4a67      	ldr	r2, [pc, #412]	; (80009bc <HAL_UART_RxCpltCallback+0x2ec>)
 800081e:	210d      	movs	r1, #13
 8000820:	54d1      	strb	r1, [r2, r3]

			HAL_UART_Transmit(&huart2, (uint8_t*) inputBuffer,
					strlen(inputBuffer), 1000);
 8000822:	4866      	ldr	r0, [pc, #408]	; (80009bc <HAL_UART_RxCpltCallback+0x2ec>)
 8000824:	f7ff fd12 	bl	800024c <strlen>
 8000828:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) inputBuffer,
 800082a:	b29a      	uxth	r2, r3
 800082c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000830:	4962      	ldr	r1, [pc, #392]	; (80009bc <HAL_UART_RxCpltCallback+0x2ec>)
 8000832:	485e      	ldr	r0, [pc, #376]	; (80009ac <HAL_UART_RxCpltCallback+0x2dc>)
 8000834:	f002 f8b0 	bl	8002998 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", strlen("\r\n"), 1000);
 8000838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083c:	2202      	movs	r2, #2
 800083e:	4960      	ldr	r1, [pc, #384]	; (80009c0 <HAL_UART_RxCpltCallback+0x2f0>)
 8000840:	4854      	ldr	r0, [pc, #336]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 8000842:	f002 f8a9 	bl	8002998 <HAL_UART_Transmit>
			//receivingData = true;
			memset(inputBuffer, 0, sizeof(inputBuffer));
 8000846:	2264      	movs	r2, #100	; 0x64
 8000848:	2100      	movs	r1, #0
 800084a:	485c      	ldr	r0, [pc, #368]	; (80009bc <HAL_UART_RxCpltCallback+0x2ec>)
 800084c:	f003 fb68 	bl	8003f20 <memset>
			rc = '\0';
 8000850:	4b52      	ldr	r3, [pc, #328]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, (uint8_t*) &rc, 1);
 8000856:	2201      	movs	r2, #1
 8000858:	4950      	ldr	r1, [pc, #320]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 800085a:	4854      	ldr	r0, [pc, #336]	; (80009ac <HAL_UART_RxCpltCallback+0x2dc>)
 800085c:	f002 f91f 	bl	8002a9e <HAL_UART_Receive_IT>
 8000860:	e02c      	b.n	80008bc <HAL_UART_RxCpltCallback+0x1ec>
		}

		else if (rc == 0x08) {
 8000862:	4b4e      	ldr	r3, [pc, #312]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b08      	cmp	r3, #8
 8000868:	d114      	bne.n	8000894 <HAL_UART_RxCpltCallback+0x1c4>
			if (strlen(inputBuffer) >= 0) {
				HAL_UART_Receive_IT(&huart3, (uint8_t*) &rc, 1);
 800086a:	2201      	movs	r2, #1
 800086c:	494b      	ldr	r1, [pc, #300]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 800086e:	4849      	ldr	r0, [pc, #292]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 8000870:	f002 f915 	bl	8002a9e <HAL_UART_Receive_IT>
				inputBuffer[strlen(inputBuffer) - 1] = '\0';
 8000874:	4851      	ldr	r0, [pc, #324]	; (80009bc <HAL_UART_RxCpltCallback+0x2ec>)
 8000876:	f7ff fce9 	bl	800024c <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	3b01      	subs	r3, #1
 800087e:	4a4f      	ldr	r2, [pc, #316]	; (80009bc <HAL_UART_RxCpltCallback+0x2ec>)
 8000880:	2100      	movs	r1, #0
 8000882:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&huart3, (uint8_t*) "\b \b", 3, 1000);
 8000884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000888:	2203      	movs	r2, #3
 800088a:	494b      	ldr	r1, [pc, #300]	; (80009b8 <HAL_UART_RxCpltCallback+0x2e8>)
 800088c:	4841      	ldr	r0, [pc, #260]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 800088e:	f002 f883 	bl	8002998 <HAL_UART_Transmit>
 8000892:	e013      	b.n	80008bc <HAL_UART_RxCpltCallback+0x1ec>
			}

		}

		else {
			HAL_UART_Transmit(&huart3, (uint8_t*) &rc, 1, 1000);
 8000894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000898:	2201      	movs	r2, #1
 800089a:	4940      	ldr	r1, [pc, #256]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 800089c:	483d      	ldr	r0, [pc, #244]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 800089e:	f002 f87b 	bl	8002998 <HAL_UART_Transmit>
			inputBuffer[strlen(inputBuffer)] = rc;
 80008a2:	4846      	ldr	r0, [pc, #280]	; (80009bc <HAL_UART_RxCpltCallback+0x2ec>)
 80008a4:	f7ff fcd2 	bl	800024c <strlen>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4a3c      	ldr	r2, [pc, #240]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 80008ac:	7811      	ldrb	r1, [r2, #0]
 80008ae:	4a43      	ldr	r2, [pc, #268]	; (80009bc <HAL_UART_RxCpltCallback+0x2ec>)
 80008b0:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Receive_IT(&huart3, (uint8_t*) &rc, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	4939      	ldr	r1, [pc, #228]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 80008b6:	4837      	ldr	r0, [pc, #220]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 80008b8:	f002 f8f1 	bl	8002a9e <HAL_UART_Receive_IT>
		}
	}
	if (huart == &huart2) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a3b      	ldr	r2, [pc, #236]	; (80009ac <HAL_UART_RxCpltCallback+0x2dc>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	f040 8107 	bne.w	8000ad4 <HAL_UART_RxCpltCallback+0x404>
		if (strlen(yourName) == 0) {
 80008c6:	4b3f      	ldr	r3, [pc, #252]	; (80009c4 <HAL_UART_RxCpltCallback+0x2f4>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f040 8094 	bne.w	80009f8 <HAL_UART_RxCpltCallback+0x328>
			if (rc == '\r') {
 80008d0:	4b32      	ldr	r3, [pc, #200]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b0d      	cmp	r3, #13
 80008d6:	f040 8081 	bne.w	80009dc <HAL_UART_RxCpltCallback+0x30c>
				strcpy(yourName, recieveText);
 80008da:	493b      	ldr	r1, [pc, #236]	; (80009c8 <HAL_UART_RxCpltCallback+0x2f8>)
 80008dc:	4839      	ldr	r0, [pc, #228]	; (80009c4 <HAL_UART_RxCpltCallback+0x2f4>)
 80008de:	f003 fb4b 	bl	8003f78 <strcpy>
				memset(recieveText, '\0', sizeof(recieveText));
 80008e2:	2264      	movs	r2, #100	; 0x64
 80008e4:	2100      	movs	r1, #0
 80008e6:	4838      	ldr	r0, [pc, #224]	; (80009c8 <HAL_UART_RxCpltCallback+0x2f8>)
 80008e8:	f003 fb1a 	bl	8003f20 <memset>
				if (strcmp(yourName, "q") == 0) {
 80008ec:	4930      	ldr	r1, [pc, #192]	; (80009b0 <HAL_UART_RxCpltCallback+0x2e0>)
 80008ee:	4835      	ldr	r0, [pc, #212]	; (80009c4 <HAL_UART_RxCpltCallback+0x2f4>)
 80008f0:	f7ff fca2 	bl	8000238 <strcmp>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10e      	bne.n	8000918 <HAL_UART_RxCpltCallback+0x248>
					HAL_UART_Transmit(&huart2, (uint8_t*) "q", strlen("q"),
 80008fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fe:	2201      	movs	r2, #1
 8000900:	492b      	ldr	r1, [pc, #172]	; (80009b0 <HAL_UART_RxCpltCallback+0x2e0>)
 8000902:	482a      	ldr	r0, [pc, #168]	; (80009ac <HAL_UART_RxCpltCallback+0x2dc>)
 8000904:	f002 f848 	bl	8002998 <HAL_UART_Transmit>
							1000);
					HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n quit",
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
 800090c:	2208      	movs	r2, #8
 800090e:	4929      	ldr	r1, [pc, #164]	; (80009b4 <HAL_UART_RxCpltCallback+0x2e4>)
 8000910:	4820      	ldr	r0, [pc, #128]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 8000912:	f002 f841 	bl	8002998 <HAL_UART_Transmit>
							sizeof("\r\n quit"), HAL_MAX_DELAY);
					return 0;
 8000916:	e0dd      	b.n	8000ad4 <HAL_UART_RxCpltCallback+0x404>
				}
				HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n        ",
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
 800091c:	220a      	movs	r2, #10
 800091e:	492b      	ldr	r1, [pc, #172]	; (80009cc <HAL_UART_RxCpltCallback+0x2fc>)
 8000920:	481c      	ldr	r0, [pc, #112]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 8000922:	f002 f839 	bl	8002998 <HAL_UART_Transmit>
						strlen("\r\n        "), HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart3, (uint8_t*) yourName,
						strlen(yourName), HAL_MAX_DELAY);
 8000926:	4827      	ldr	r0, [pc, #156]	; (80009c4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000928:	f7ff fc90 	bl	800024c <strlen>
 800092c:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart3, (uint8_t*) yourName,
 800092e:	b29a      	uxth	r2, r3
 8000930:	f04f 33ff 	mov.w	r3, #4294967295
 8000934:	4923      	ldr	r1, [pc, #140]	; (80009c4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000936:	4817      	ldr	r0, [pc, #92]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 8000938:	f002 f82e 	bl	8002998 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) " is ready!!!",
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	220d      	movs	r2, #13
 8000942:	4923      	ldr	r1, [pc, #140]	; (80009d0 <HAL_UART_RxCpltCallback+0x300>)
 8000944:	4813      	ldr	r0, [pc, #76]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 8000946:	f002 f827 	bl	8002998 <HAL_UART_Transmit>
						sizeof(" is ready!!!"), HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n",
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	2202      	movs	r2, #2
 8000950:	491b      	ldr	r1, [pc, #108]	; (80009c0 <HAL_UART_RxCpltCallback+0x2f0>)
 8000952:	4810      	ldr	r0, [pc, #64]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 8000954:	f002 f820 	bl	8002998 <HAL_UART_Transmit>
						strlen("\r\n"), HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart3, (uint8_t*) ready, strlen(ready),
 8000958:	481e      	ldr	r0, [pc, #120]	; (80009d4 <HAL_UART_RxCpltCallback+0x304>)
 800095a:	f7ff fc77 	bl	800024c <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	491b      	ldr	r1, [pc, #108]	; (80009d4 <HAL_UART_RxCpltCallback+0x304>)
 8000968:	480a      	ldr	r0, [pc, #40]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 800096a:	f002 f815 	bl	8002998 <HAL_UART_Transmit>
						1000);
				strcat(yourName, " : ");
 800096e:	4815      	ldr	r0, [pc, #84]	; (80009c4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000970:	f7ff fc6c 	bl	800024c <strlen>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_UART_RxCpltCallback+0x2f4>)
 800097a:	4413      	add	r3, r2
 800097c:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <HAL_UART_RxCpltCallback+0x308>)
 800097e:	6810      	ldr	r0, [r2, #0]
 8000980:	6018      	str	r0, [r3, #0]
				rc = '\0';
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]

				HAL_UART_Receive_IT(&huart3, (uint8_t*) &rc, 1);
 8000988:	2201      	movs	r2, #1
 800098a:	4904      	ldr	r1, [pc, #16]	; (800099c <HAL_UART_RxCpltCallback+0x2cc>)
 800098c:	4801      	ldr	r0, [pc, #4]	; (8000994 <HAL_UART_RxCpltCallback+0x2c4>)
 800098e:	f002 f886 	bl	8002a9e <HAL_UART_Receive_IT>
 8000992:	e09f      	b.n	8000ad4 <HAL_UART_RxCpltCallback+0x404>
 8000994:	20000360 	.word	0x20000360
 8000998:	2000002d 	.word	0x2000002d
 800099c:	200001e8 	.word	0x200001e8
 80009a0:	20000058 	.word	0x20000058
 80009a4:	200001ec 	.word	0x200001ec
 80009a8:	08003fa0 	.word	0x08003fa0
 80009ac:	200002d8 	.word	0x200002d8
 80009b0:	08003fa4 	.word	0x08003fa4
 80009b4:	08003fa8 	.word	0x08003fa8
 80009b8:	08003fb0 	.word	0x08003fb0
 80009bc:	20000184 	.word	0x20000184
 80009c0:	08003fb4 	.word	0x08003fb4
 80009c4:	200000bc 	.word	0x200000bc
 80009c8:	20000120 	.word	0x20000120
 80009cc:	08003fb8 	.word	0x08003fb8
 80009d0:	08003fc4 	.word	0x08003fc4
 80009d4:	20000024 	.word	0x20000024
 80009d8:	08003fd4 	.word	0x08003fd4
			} else {
				recieveText[strlen(recieveText)] = rc;
 80009dc:	483f      	ldr	r0, [pc, #252]	; (8000adc <HAL_UART_RxCpltCallback+0x40c>)
 80009de:	f7ff fc35 	bl	800024c <strlen>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a3e      	ldr	r2, [pc, #248]	; (8000ae0 <HAL_UART_RxCpltCallback+0x410>)
 80009e6:	7811      	ldrb	r1, [r2, #0]
 80009e8:	4a3c      	ldr	r2, [pc, #240]	; (8000adc <HAL_UART_RxCpltCallback+0x40c>)
 80009ea:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Receive_IT(&huart2, (uint8_t*) &rc, 1);
 80009ec:	2201      	movs	r2, #1
 80009ee:	493c      	ldr	r1, [pc, #240]	; (8000ae0 <HAL_UART_RxCpltCallback+0x410>)
 80009f0:	483c      	ldr	r0, [pc, #240]	; (8000ae4 <HAL_UART_RxCpltCallback+0x414>)
 80009f2:	f002 f854 	bl	8002a9e <HAL_UART_Receive_IT>
 80009f6:	e06d      	b.n	8000ad4 <HAL_UART_RxCpltCallback+0x404>
			}
		} else if (strlen(yourName) != 0) {
 80009f8:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <HAL_UART_RxCpltCallback+0x418>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d069      	beq.n	8000ad4 <HAL_UART_RxCpltCallback+0x404>
			if (rc == '\r') {
 8000a00:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <HAL_UART_RxCpltCallback+0x410>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b0d      	cmp	r3, #13
 8000a06:	d158      	bne.n	8000aba <HAL_UART_RxCpltCallback+0x3ea>
				if (strcmp(recieveText, "qq") == 0) {
 8000a08:	4938      	ldr	r1, [pc, #224]	; (8000aec <HAL_UART_RxCpltCallback+0x41c>)
 8000a0a:	4834      	ldr	r0, [pc, #208]	; (8000adc <HAL_UART_RxCpltCallback+0x40c>)
 8000a0c:	f7ff fc14 	bl	8000238 <strcmp>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d107      	bne.n	8000a26 <HAL_UART_RxCpltCallback+0x356>
					HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n quit",
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	4934      	ldr	r1, [pc, #208]	; (8000af0 <HAL_UART_RxCpltCallback+0x420>)
 8000a1e:	4835      	ldr	r0, [pc, #212]	; (8000af4 <HAL_UART_RxCpltCallback+0x424>)
 8000a20:	f001 ffba 	bl	8002998 <HAL_UART_Transmit>
							sizeof("\r\n quit"), HAL_MAX_DELAY);
					return 0;
 8000a24:	e056      	b.n	8000ad4 <HAL_UART_RxCpltCallback+0x404>
				}
				HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", sizeof("\r\n"),
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	4932      	ldr	r1, [pc, #200]	; (8000af8 <HAL_UART_RxCpltCallback+0x428>)
 8000a2e:	4831      	ldr	r0, [pc, #196]	; (8000af4 <HAL_UART_RxCpltCallback+0x424>)
 8000a30:	f001 ffb2 	bl	8002998 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart3, (uint8_t*) "        ",
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	2208      	movs	r2, #8
 8000a3a:	4930      	ldr	r1, [pc, #192]	; (8000afc <HAL_UART_RxCpltCallback+0x42c>)
 8000a3c:	482d      	ldr	r0, [pc, #180]	; (8000af4 <HAL_UART_RxCpltCallback+0x424>)
 8000a3e:	f001 ffab 	bl	8002998 <HAL_UART_Transmit>
						strlen("        "), HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart3, (uint8_t*) yourName,
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	2264      	movs	r2, #100	; 0x64
 8000a48:	4927      	ldr	r1, [pc, #156]	; (8000ae8 <HAL_UART_RxCpltCallback+0x418>)
 8000a4a:	482a      	ldr	r0, [pc, #168]	; (8000af4 <HAL_UART_RxCpltCallback+0x424>)
 8000a4c:	f001 ffa4 	bl	8002998 <HAL_UART_Transmit>
						sizeof(yourName), HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart3, (uint8_t*) recieveText,
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
 8000a54:	2264      	movs	r2, #100	; 0x64
 8000a56:	4921      	ldr	r1, [pc, #132]	; (8000adc <HAL_UART_RxCpltCallback+0x40c>)
 8000a58:	4826      	ldr	r0, [pc, #152]	; (8000af4 <HAL_UART_RxCpltCallback+0x424>)
 8000a5a:	f001 ff9d 	bl	8002998 <HAL_UART_Transmit>
						sizeof(recieveText), HAL_MAX_DELAY);
				memset(recieveText, '\0', sizeof(recieveText));
 8000a5e:	2264      	movs	r2, #100	; 0x64
 8000a60:	2100      	movs	r1, #0
 8000a62:	481e      	ldr	r0, [pc, #120]	; (8000adc <HAL_UART_RxCpltCallback+0x40c>)
 8000a64:	f003 fa5c 	bl	8003f20 <memset>
				rc = '\0';
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <HAL_UART_RxCpltCallback+0x410>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart3, (uint8_t*) &rc, 1);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	491b      	ldr	r1, [pc, #108]	; (8000ae0 <HAL_UART_RxCpltCallback+0x410>)
 8000a72:	4820      	ldr	r0, [pc, #128]	; (8000af4 <HAL_UART_RxCpltCallback+0x424>)
 8000a74:	f002 f813 	bl	8002a9e <HAL_UART_Receive_IT>
				HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", strlen("\r\n"),
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	491e      	ldr	r1, [pc, #120]	; (8000af8 <HAL_UART_RxCpltCallback+0x428>)
 8000a80:	481c      	ldr	r0, [pc, #112]	; (8000af4 <HAL_UART_RxCpltCallback+0x424>)
 8000a82:	f001 ff89 	bl	8002998 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart3, (uint8_t*) "        ",
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	491b      	ldr	r1, [pc, #108]	; (8000afc <HAL_UART_RxCpltCallback+0x42c>)
 8000a8e:	4819      	ldr	r0, [pc, #100]	; (8000af4 <HAL_UART_RxCpltCallback+0x424>)
 8000a90:	f001 ff82 	bl	8002998 <HAL_UART_Transmit>
						strlen("        "), HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart3, (uint8_t*) nameTemp,
						strlen(nameTemp), HAL_MAX_DELAY);
 8000a94:	481a      	ldr	r0, [pc, #104]	; (8000b00 <HAL_UART_RxCpltCallback+0x430>)
 8000a96:	f7ff fbd9 	bl	800024c <strlen>
 8000a9a:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart3, (uint8_t*) nameTemp,
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	4917      	ldr	r1, [pc, #92]	; (8000b00 <HAL_UART_RxCpltCallback+0x430>)
 8000aa4:	4813      	ldr	r0, [pc, #76]	; (8000af4 <HAL_UART_RxCpltCallback+0x424>)
 8000aa6:	f001 ff77 	bl	8002998 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) " => ", strlen(" => "),
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	2204      	movs	r2, #4
 8000ab0:	4914      	ldr	r1, [pc, #80]	; (8000b04 <HAL_UART_RxCpltCallback+0x434>)
 8000ab2:	4810      	ldr	r0, [pc, #64]	; (8000af4 <HAL_UART_RxCpltCallback+0x424>)
 8000ab4:	f001 ff70 	bl	8002998 <HAL_UART_Transmit>
 8000ab8:	e00c      	b.n	8000ad4 <HAL_UART_RxCpltCallback+0x404>
				HAL_MAX_DELAY);

			}

			else {
				recieveText[strlen(recieveText)] = rc;
 8000aba:	4808      	ldr	r0, [pc, #32]	; (8000adc <HAL_UART_RxCpltCallback+0x40c>)
 8000abc:	f7ff fbc6 	bl	800024c <strlen>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_UART_RxCpltCallback+0x410>)
 8000ac4:	7811      	ldrb	r1, [r2, #0]
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <HAL_UART_RxCpltCallback+0x40c>)
 8000ac8:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Receive_IT(&huart2, (uint8_t*) &rc, 1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	4904      	ldr	r1, [pc, #16]	; (8000ae0 <HAL_UART_RxCpltCallback+0x410>)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <HAL_UART_RxCpltCallback+0x414>)
 8000ad0:	f001 ffe5 	bl	8002a9e <HAL_UART_Receive_IT>
			}
		}
	}
}
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000120 	.word	0x20000120
 8000ae0:	200001e8 	.word	0x200001e8
 8000ae4:	200002d8 	.word	0x200002d8
 8000ae8:	200000bc 	.word	0x200000bc
 8000aec:	08003fd8 	.word	0x08003fd8
 8000af0:	08003fa8 	.word	0x08003fa8
 8000af4:	20000360 	.word	0x20000360
 8000af8:	08003fb4 	.word	0x08003fb4
 8000afc:	08003fdc 	.word	0x08003fdc
 8000b00:	200001ec 	.word	0x200001ec
 8000b04:	08003fe8 	.word	0x08003fe8

08000b08 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>
	...

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_MspInit+0x44>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_MspInit+0x44>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_MspInit+0x44>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x44>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x44>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x44>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba8:	f000 fa2c 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <USART2_IRQHandler+0x10>)
 8000bb6:	f001 ffb7 	bl	8002b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200002d8 	.word	0x200002d8

08000bc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <USART3_IRQHandler+0x10>)
 8000bca:	f001 ffad 	bl	8002b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000360 	.word	0x20000360

08000bd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <MX_USART1_UART_Init+0x5c>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c40:	f001 fe5c 	bl	80028fc <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c4a:	f7ff ff5d 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000250 	.word	0x20000250
 8000c58:	40011000 	.word	0x40011000

08000c5c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c62:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <MX_USART2_UART_Init+0x5c>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000ca0:	f001 fe2c 	bl	80028fc <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000caa:	f7ff ff2d 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200002d8 	.word	0x200002d8
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cc2:	4a15      	ldr	r2, [pc, #84]	; (8000d18 <MX_USART3_UART_Init+0x5c>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000d00:	f001 fdfc 	bl	80028fc <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d0a:	f7ff fefd 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000360 	.word	0x20000360
 8000d18:	40004800 	.word	0x40004800

08000d1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0b2      	sub	sp, #200	; 0xc8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	2290      	movs	r2, #144	; 0x90
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 f8ef 	bl	8003f20 <memset>
  if(uartHandle->Instance==USART1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a76      	ldr	r2, [pc, #472]	; (8000f20 <HAL_UART_MspInit+0x204>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d151      	bne.n	8000df0 <HAL_UART_MspInit+0xd4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d4c:	2340      	movs	r3, #64	; 0x40
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d50:	2300      	movs	r3, #0
 8000d52:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 f9a7 	bl	80020ac <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d64:	f7ff fed0 	bl	8000b08 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d68:	4b6e      	ldr	r3, [pc, #440]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	4a6d      	ldr	r2, [pc, #436]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	6453      	str	r3, [r2, #68]	; 0x44
 8000d74:	4b6b      	ldr	r3, [pc, #428]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	623b      	str	r3, [r7, #32]
 8000d7e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d80:	4b68      	ldr	r3, [pc, #416]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a67      	ldr	r2, [pc, #412]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000d86:	f043 0302 	orr.w	r3, r3, #2
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8c:	4b65      	ldr	r3, [pc, #404]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000db2:	2304      	movs	r3, #4
 8000db4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	485a      	ldr	r0, [pc, #360]	; (8000f28 <HAL_UART_MspInit+0x20c>)
 8000dc0:	f000 fae4 	bl	800138c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dc4:	2340      	movs	r3, #64	; 0x40
 8000dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000de6:	4619      	mov	r1, r3
 8000de8:	484f      	ldr	r0, [pc, #316]	; (8000f28 <HAL_UART_MspInit+0x20c>)
 8000dea:	f000 facf 	bl	800138c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dee:	e092      	b.n	8000f16 <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a4d      	ldr	r2, [pc, #308]	; (8000f2c <HAL_UART_MspInit+0x210>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d143      	bne.n	8000e82 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 f950 	bl	80020ac <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_UART_MspInit+0xfa>
      Error_Handler();
 8000e12:	f7ff fe79 	bl	8000b08 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e16:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a42      	ldr	r2, [pc, #264]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	61bb      	str	r3, [r7, #24]
 8000e2c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2e:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a3c      	ldr	r2, [pc, #240]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e46:	2360      	movs	r3, #96	; 0x60
 8000e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4831      	ldr	r0, [pc, #196]	; (8000f30 <HAL_UART_MspInit+0x214>)
 8000e6c:	f000 fa8e 	bl	800138c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2026      	movs	r0, #38	; 0x26
 8000e76:	f000 f9c0 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e7a:	2026      	movs	r0, #38	; 0x26
 8000e7c:	f000 f9d9 	bl	8001232 <HAL_NVIC_EnableIRQ>
}
 8000e80:	e049      	b.n	8000f16 <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART3)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a2b      	ldr	r2, [pc, #172]	; (8000f34 <HAL_UART_MspInit+0x218>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d144      	bne.n	8000f16 <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 f906 	bl	80020ac <HAL_RCCEx_PeriphCLKConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8000ea6:	f7ff fe2f 	bl	8000b08 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a17      	ldr	r2, [pc, #92]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_UART_MspInit+0x208>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000efe:	4619      	mov	r1, r3
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <HAL_UART_MspInit+0x214>)
 8000f02:	f000 fa43 	bl	800138c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2027      	movs	r0, #39	; 0x27
 8000f0c:	f000 f975 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f10:	2027      	movs	r0, #39	; 0x27
 8000f12:	f000 f98e 	bl	8001232 <HAL_NVIC_EnableIRQ>
}
 8000f16:	bf00      	nop
 8000f18:	37c8      	adds	r7, #200	; 0xc8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40011000 	.word	0x40011000
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	40020c00 	.word	0x40020c00
 8000f34:	40004800 	.word	0x40004800

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f3e:	490e      	ldr	r1, [pc, #56]	; (8000f78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f54:	4c0b      	ldr	r4, [pc, #44]	; (8000f84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f62:	f7ff fe39 	bl	8000bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f002 ffe3 	bl	8003f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fb19 	bl	80005a0 <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000f7c:	08004018 	.word	0x08004018
  ldr r2, =_sbss
 8000f80:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000f84:	200003ec 	.word	0x200003ec

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>

08000f8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8e:	2003      	movs	r0, #3
 8000f90:	f000 f928 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f94:	200f      	movs	r0, #15
 8000f96:	f000 f805 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9a:	f7ff fdbb 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f943 	bl	800124e <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 f90b 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000030 	.word	0x20000030
 8000ffc:	20000038 	.word	0x20000038
 8001000:	20000034 	.word	0x20000034

08001004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000038 	.word	0x20000038
 8001028:	200003e8 	.word	0x200003e8

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200003e8 	.word	0x200003e8

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <__NVIC_SetPriorityGrouping+0x40>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	4313      	orrs	r3, r2
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <__NVIC_SetPriorityGrouping+0x40>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	05fa0000 	.word	0x05fa0000

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0b      	blt.n	80010d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 021f 	and.w	r2, r3, #31
 80010c0:	4907      	ldr	r1, [pc, #28]	; (80010e0 <__NVIC_EnableIRQ+0x38>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	2001      	movs	r0, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff8e 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff29 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff3e 	bl	800108c <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff8e 	bl	8001138 <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5d 	bl	80010e4 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff31 	bl	80010a8 <__NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffa2 	bl	80011a0 <SysTick_Config>
 800125c:	4603      	mov	r3, r0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001272:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff feda 	bl	800102c <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d008      	beq.n	8001298 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e052      	b.n	800133e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0216 	bic.w	r2, r2, #22
 80012a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d103      	bne.n	80012c8 <HAL_DMA_Abort+0x62>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d007      	beq.n	80012d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0208 	bic.w	r2, r2, #8
 80012d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e8:	e013      	b.n	8001312 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ea:	f7ff fe9f 	bl	800102c <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	d90c      	bls.n	8001312 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2220      	movs	r2, #32
 80012fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2203      	movs	r2, #3
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e015      	b.n	800133e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e4      	bne.n	80012ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001324:	223f      	movs	r2, #63	; 0x3f
 8001326:	409a      	lsls	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d004      	beq.n	8001364 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2280      	movs	r2, #128	; 0x80
 800135e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e00c      	b.n	800137e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2205      	movs	r2, #5
 8001368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e175      	b.n	8001698 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 8164 	bne.w	8001692 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d005      	beq.n	80013e2 <HAL_GPIO_Init+0x56>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d130      	bne.n	8001444 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2203      	movs	r2, #3
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 0201 	and.w	r2, r3, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b03      	cmp	r3, #3
 800144e:	d017      	beq.n	8001480 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d123      	bne.n	80014d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	69b9      	ldr	r1, [r7, #24]
 80014d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0203 	and.w	r2, r3, #3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80be 	beq.w	8001692 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	4b66      	ldr	r3, [pc, #408]	; (80016b0 <HAL_GPIO_Init+0x324>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a65      	ldr	r2, [pc, #404]	; (80016b0 <HAL_GPIO_Init+0x324>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b63      	ldr	r3, [pc, #396]	; (80016b0 <HAL_GPIO_Init+0x324>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800152e:	4a61      	ldr	r2, [pc, #388]	; (80016b4 <HAL_GPIO_Init+0x328>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <HAL_GPIO_Init+0x32c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d037      	beq.n	80015ca <HAL_GPIO_Init+0x23e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a57      	ldr	r2, [pc, #348]	; (80016bc <HAL_GPIO_Init+0x330>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d031      	beq.n	80015c6 <HAL_GPIO_Init+0x23a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a56      	ldr	r2, [pc, #344]	; (80016c0 <HAL_GPIO_Init+0x334>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d02b      	beq.n	80015c2 <HAL_GPIO_Init+0x236>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a55      	ldr	r2, [pc, #340]	; (80016c4 <HAL_GPIO_Init+0x338>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d025      	beq.n	80015be <HAL_GPIO_Init+0x232>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a54      	ldr	r2, [pc, #336]	; (80016c8 <HAL_GPIO_Init+0x33c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d01f      	beq.n	80015ba <HAL_GPIO_Init+0x22e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a53      	ldr	r2, [pc, #332]	; (80016cc <HAL_GPIO_Init+0x340>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d019      	beq.n	80015b6 <HAL_GPIO_Init+0x22a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_GPIO_Init+0x344>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0x226>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a51      	ldr	r2, [pc, #324]	; (80016d4 <HAL_GPIO_Init+0x348>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_GPIO_Init+0x222>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a50      	ldr	r2, [pc, #320]	; (80016d8 <HAL_GPIO_Init+0x34c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x21e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4f      	ldr	r2, [pc, #316]	; (80016dc <HAL_GPIO_Init+0x350>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x21a>
 80015a2:	2309      	movs	r3, #9
 80015a4:	e012      	b.n	80015cc <HAL_GPIO_Init+0x240>
 80015a6:	230a      	movs	r3, #10
 80015a8:	e010      	b.n	80015cc <HAL_GPIO_Init+0x240>
 80015aa:	2308      	movs	r3, #8
 80015ac:	e00e      	b.n	80015cc <HAL_GPIO_Init+0x240>
 80015ae:	2307      	movs	r3, #7
 80015b0:	e00c      	b.n	80015cc <HAL_GPIO_Init+0x240>
 80015b2:	2306      	movs	r3, #6
 80015b4:	e00a      	b.n	80015cc <HAL_GPIO_Init+0x240>
 80015b6:	2305      	movs	r3, #5
 80015b8:	e008      	b.n	80015cc <HAL_GPIO_Init+0x240>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x240>
 80015be:	2303      	movs	r3, #3
 80015c0:	e004      	b.n	80015cc <HAL_GPIO_Init+0x240>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_Init+0x240>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <HAL_GPIO_Init+0x240>
 80015ca:	2300      	movs	r3, #0
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	f002 0203 	and.w	r2, r2, #3
 80015d2:	0092      	lsls	r2, r2, #2
 80015d4:	4093      	lsls	r3, r2
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015dc:	4935      	ldr	r1, [pc, #212]	; (80016b4 <HAL_GPIO_Init+0x328>)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ea:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <HAL_GPIO_Init+0x354>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800160e:	4a34      	ldr	r2, [pc, #208]	; (80016e0 <HAL_GPIO_Init+0x354>)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001614:	4b32      	ldr	r3, [pc, #200]	; (80016e0 <HAL_GPIO_Init+0x354>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <HAL_GPIO_Init+0x354>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800163e:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <HAL_GPIO_Init+0x354>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001662:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <HAL_GPIO_Init+0x354>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_GPIO_Init+0x354>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <HAL_GPIO_Init+0x354>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3301      	adds	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	2b0f      	cmp	r3, #15
 800169c:	f67f ae86 	bls.w	80013ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40013800 	.word	0x40013800
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020400 	.word	0x40020400
 80016c0:	40020800 	.word	0x40020800
 80016c4:	40020c00 	.word	0x40020c00
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40021400 	.word	0x40021400
 80016d0:	40021800 	.word	0x40021800
 80016d4:	40021c00 	.word	0x40021c00
 80016d8:	40022000 	.word	0x40022000
 80016dc:	40022400 	.word	0x40022400
 80016e0:	40013c00 	.word	0x40013c00

080016e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <HAL_PWREx_EnableOverDrive+0x98>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a22      	ldr	r2, [pc, #136]	; (800177c <HAL_PWREx_EnableOverDrive+0x98>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_PWREx_EnableOverDrive+0x98>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001712:	f7ff fc8b 	bl	800102c <HAL_GetTick>
 8001716:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001718:	e009      	b.n	800172e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800171a:	f7ff fc87 	bl	800102c <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001728:	d901      	bls.n	800172e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e022      	b.n	8001774 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173a:	d1ee      	bne.n	800171a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001746:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001748:	f7ff fc70 	bl	800102c <HAL_GetTick>
 800174c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800174e:	e009      	b.n	8001764 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001750:	f7ff fc6c 	bl	800102c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800175e:	d901      	bls.n	8001764 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e007      	b.n	8001774 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001770:	d1ee      	bne.n	8001750 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40007000 	.word	0x40007000

08001784 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e29b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8087 	beq.w	80018b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a8:	4b96      	ldr	r3, [pc, #600]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d00c      	beq.n	80017ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b4:	4b93      	ldr	r3, [pc, #588]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d112      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62>
 80017c0:	4b90      	ldr	r3, [pc, #576]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017cc:	d10b      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ce:	4b8d      	ldr	r3, [pc, #564]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d06c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x130>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d168      	bne.n	80018b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e275      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x7a>
 80017f0:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a83      	ldr	r2, [pc, #524]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	e02e      	b.n	800185c <HAL_RCC_OscConfig+0xd8>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x9c>
 8001806:	4b7f      	ldr	r3, [pc, #508]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7e      	ldr	r2, [pc, #504]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b7c      	ldr	r3, [pc, #496]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7b      	ldr	r2, [pc, #492]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e01d      	b.n	800185c <HAL_RCC_OscConfig+0xd8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0xc0>
 800182a:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a75      	ldr	r2, [pc, #468]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a72      	ldr	r2, [pc, #456]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0xd8>
 8001844:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a6e      	ldr	r2, [pc, #440]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b6c      	ldr	r3, [pc, #432]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a6b      	ldr	r2, [pc, #428]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fbe2 	bl	800102c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fbde 	bl	800102c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e229      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0xe8>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fbce 	bl	800102c <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fbca 	bl	800102c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e215      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	4b57      	ldr	r3, [pc, #348]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x110>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d069      	beq.n	8001996 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018c2:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ce:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d11c      	bne.n	8001914 <HAL_RCC_OscConfig+0x190>
 80018da:	4b4a      	ldr	r3, [pc, #296]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d116      	bne.n	8001914 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x17a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e1e9      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	493d      	ldr	r1, [pc, #244]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	e040      	b.n	8001996 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d023      	beq.n	8001964 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a38      	ldr	r2, [pc, #224]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fb80 	bl	800102c <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff fb7c 	bl	800102c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e1c7      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194e:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4929      	ldr	r1, [pc, #164]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]
 8001962:	e018      	b.n	8001996 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a26      	ldr	r2, [pc, #152]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fb5c 	bl	800102c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001978:	f7ff fb58 	bl	800102c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1a3      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d038      	beq.n	8001a14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d019      	beq.n	80019de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ae:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff fb39 	bl	800102c <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019be:	f7ff fb35 	bl	800102c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e180      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x23a>
 80019dc:	e01a      	b.n	8001a14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7ff fb1f 	bl	800102c <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f2:	f7ff fb1b 	bl	800102c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d903      	bls.n	8001a08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e166      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
 8001a04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a08:	4b92      	ldr	r3, [pc, #584]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1ee      	bne.n	80019f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80a4 	beq.w	8001b6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a22:	4b8c      	ldr	r3, [pc, #560]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b89      	ldr	r3, [pc, #548]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a88      	ldr	r2, [pc, #544]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b86      	ldr	r3, [pc, #536]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a46:	2301      	movs	r3, #1
 8001a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4a:	4b83      	ldr	r3, [pc, #524]	; (8001c58 <HAL_RCC_OscConfig+0x4d4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d118      	bne.n	8001a88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a56:	4b80      	ldr	r3, [pc, #512]	; (8001c58 <HAL_RCC_OscConfig+0x4d4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7f      	ldr	r2, [pc, #508]	; (8001c58 <HAL_RCC_OscConfig+0x4d4>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fae3 	bl	800102c <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6a:	f7ff fadf 	bl	800102c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b64      	cmp	r3, #100	; 0x64
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e12a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7c:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x4d4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x31a>
 8001a90:	4b70      	ldr	r3, [pc, #448]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a94:	4a6f      	ldr	r2, [pc, #444]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9c:	e02d      	b.n	8001afa <HAL_RCC_OscConfig+0x376>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x33c>
 8001aa6:	4b6b      	ldr	r3, [pc, #428]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aaa:	4a6a      	ldr	r2, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab2:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	4a67      	ldr	r2, [pc, #412]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	6713      	str	r3, [r2, #112]	; 0x70
 8001abe:	e01c      	b.n	8001afa <HAL_RCC_OscConfig+0x376>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x35e>
 8001ac8:	4b62      	ldr	r3, [pc, #392]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001acc:	4a61      	ldr	r2, [pc, #388]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad4:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a5e      	ldr	r2, [pc, #376]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae0:	e00b      	b.n	8001afa <HAL_RCC_OscConfig+0x376>
 8001ae2:	4b5c      	ldr	r3, [pc, #368]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a5b      	ldr	r2, [pc, #364]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af2:	4a58      	ldr	r2, [pc, #352]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d015      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff fa93 	bl	800102c <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff fa8f 	bl	800102c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0d8      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ee      	beq.n	8001b0a <HAL_RCC_OscConfig+0x386>
 8001b2c:	e014      	b.n	8001b58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fa7d 	bl	800102c <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7ff fa79 	bl	800102c <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e0c2      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4c:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ee      	bne.n	8001b36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d105      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a3c      	ldr	r2, [pc, #240]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80ae 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b74:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d06d      	beq.n	8001c5c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d14b      	bne.n	8001c20 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a31      	ldr	r2, [pc, #196]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fa4a 	bl	800102c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff fa46 	bl	800102c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e091      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	019b      	lsls	r3, r3, #6
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	085b      	lsrs	r3, r3, #1
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	071b      	lsls	r3, r3, #28
 8001be6:	491b      	ldr	r1, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fa18 	bl	800102c <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff fa14 	bl	800102c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e05f      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x47c>
 8001c1e:	e057      	b.n	8001cd0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f9fe 	bl	800102c <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c34:	f7ff f9fa 	bl	800102c <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e045      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c46:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4b0>
 8001c52:	e03d      	b.n	8001cd0 <HAL_RCC_OscConfig+0x54c>
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <HAL_RCC_OscConfig+0x558>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d030      	beq.n	8001ccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d129      	bne.n	8001ccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d122      	bne.n	8001ccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d119      	bne.n	8001ccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	085b      	lsrs	r3, r3, #1
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d10f      	bne.n	8001ccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0d0      	b.n	8001e9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d910      	bls.n	8001d28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 020f 	bic.w	r2, r3, #15
 8001d0e:	4965      	ldr	r1, [pc, #404]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0b8      	b.n	8001e9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d020      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d40:	4b59      	ldr	r3, [pc, #356]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4a58      	ldr	r2, [pc, #352]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d58:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d64:	4b50      	ldr	r3, [pc, #320]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	494d      	ldr	r1, [pc, #308]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d040      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d115      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e07f      	b.n	8001e9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d107      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da2:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e073      	b.n	8001e9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db2:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e06b      	b.n	8001e9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc2:	4b39      	ldr	r3, [pc, #228]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f023 0203 	bic.w	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4936      	ldr	r1, [pc, #216]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd4:	f7ff f92a 	bl	800102c <HAL_GetTick>
 8001dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ddc:	f7ff f926 	bl	800102c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e053      	b.n	8001e9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 020c 	and.w	r2, r3, #12
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d1eb      	bne.n	8001ddc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e04:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d210      	bcs.n	8001e34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 020f 	bic.w	r2, r3, #15
 8001e1a:	4922      	ldr	r1, [pc, #136]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e032      	b.n	8001e9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d008      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4916      	ldr	r1, [pc, #88]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d009      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	490e      	ldr	r1, [pc, #56]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e72:	f000 f821 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8001e76:	4602      	mov	r2, r0
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	490a      	ldr	r1, [pc, #40]	; (8001eac <HAL_RCC_ClockConfig+0x1cc>)
 8001e84:	5ccb      	ldrb	r3, [r1, r3]
 8001e86:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8a:	4a09      	ldr	r2, [pc, #36]	; (8001eb0 <HAL_RCC_ClockConfig+0x1d0>)
 8001e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCC_ClockConfig+0x1d4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f886 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023c00 	.word	0x40023c00
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	08003ff0 	.word	0x08003ff0
 8001eb0:	20000030 	.word	0x20000030
 8001eb4:	20000034 	.word	0x20000034

08001eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ebc:	b090      	sub	sp, #64	; 0x40
 8001ebe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ec8:	2300      	movs	r3, #0
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ed0:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d00d      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x40>
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	f200 80a1 	bhi.w	8002024 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x34>
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d003      	beq.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001eea:	e09b      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eec:	4b53      	ldr	r3, [pc, #332]	; (800203c <HAL_RCC_GetSysClockFreq+0x184>)
 8001eee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ef0:	e09b      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ef2:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ef4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ef6:	e098      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ef8:	4b4f      	ldr	r3, [pc, #316]	; (8002038 <HAL_RCC_GetSysClockFreq+0x180>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f02:	4b4d      	ldr	r3, [pc, #308]	; (8002038 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d028      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0e:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	099b      	lsrs	r3, r3, #6
 8001f14:	2200      	movs	r2, #0
 8001f16:	623b      	str	r3, [r7, #32]
 8001f18:	627a      	str	r2, [r7, #36]	; 0x24
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f20:	2100      	movs	r1, #0
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f24:	fb03 f201 	mul.w	r2, r3, r1
 8001f28:	2300      	movs	r3, #0
 8001f2a:	fb00 f303 	mul.w	r3, r0, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a43      	ldr	r2, [pc, #268]	; (8002040 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f32:	fba0 1202 	umull	r1, r2, r0, r2
 8001f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f38:	460a      	mov	r2, r1
 8001f3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f3e:	4413      	add	r3, r2
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f44:	2200      	movs	r2, #0
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	61fa      	str	r2, [r7, #28]
 8001f4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f52:	f7fe f983 	bl	800025c <__aeabi_uldivmod>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f5e:	e053      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f60:	4b35      	ldr	r3, [pc, #212]	; (8002038 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	2200      	movs	r2, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	617a      	str	r2, [r7, #20]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f72:	f04f 0b00 	mov.w	fp, #0
 8001f76:	4652      	mov	r2, sl
 8001f78:	465b      	mov	r3, fp
 8001f7a:	f04f 0000 	mov.w	r0, #0
 8001f7e:	f04f 0100 	mov.w	r1, #0
 8001f82:	0159      	lsls	r1, r3, #5
 8001f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f88:	0150      	lsls	r0, r2, #5
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	ebb2 080a 	subs.w	r8, r2, sl
 8001f92:	eb63 090b 	sbc.w	r9, r3, fp
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fa2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fa6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001faa:	ebb2 0408 	subs.w	r4, r2, r8
 8001fae:	eb63 0509 	sbc.w	r5, r3, r9
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	00eb      	lsls	r3, r5, #3
 8001fbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fc0:	00e2      	lsls	r2, r4, #3
 8001fc2:	4614      	mov	r4, r2
 8001fc4:	461d      	mov	r5, r3
 8001fc6:	eb14 030a 	adds.w	r3, r4, sl
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	eb45 030b 	adc.w	r3, r5, fp
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fde:	4629      	mov	r1, r5
 8001fe0:	028b      	lsls	r3, r1, #10
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fe8:	4621      	mov	r1, r4
 8001fea:	028a      	lsls	r2, r1, #10
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	60fa      	str	r2, [r7, #12]
 8001ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ffc:	f7fe f92e 	bl	800025c <__aeabi_uldivmod>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4613      	mov	r3, r2
 8002006:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_GetSysClockFreq+0x180>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	0c1b      	lsrs	r3, r3, #16
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	3301      	adds	r3, #1
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800201a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002022:	e002      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_GetSysClockFreq+0x184>)
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800202c:	4618      	mov	r0, r3
 800202e:	3740      	adds	r7, #64	; 0x40
 8002030:	46bd      	mov	sp, r7
 8002032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	00f42400 	.word	0x00f42400
 8002040:	017d7840 	.word	0x017d7840

08002044 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <HAL_RCC_GetHCLKFreq+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000030 	.word	0x20000030

0800205c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002060:	f7ff fff0 	bl	8002044 <HAL_RCC_GetHCLKFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0a9b      	lsrs	r3, r3, #10
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	4903      	ldr	r1, [pc, #12]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	08004000 	.word	0x08004000

08002084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002088:	f7ff ffdc 	bl	8002044 <HAL_RCC_GetHCLKFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	0b5b      	lsrs	r3, r3, #13
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	4903      	ldr	r1, [pc, #12]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40023800 	.word	0x40023800
 80020a8:	08004000 	.word	0x08004000

080020ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d012      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020d4:	4b69      	ldr	r3, [pc, #420]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a68      	ldr	r2, [pc, #416]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020de:	6093      	str	r3, [r2, #8]
 80020e0:	4b66      	ldr	r3, [pc, #408]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e8:	4964      	ldr	r1, [pc, #400]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d017      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002106:	4b5d      	ldr	r3, [pc, #372]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800210c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	4959      	ldr	r1, [pc, #356]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002124:	d101      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002126:	2301      	movs	r3, #1
 8002128:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d017      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002142:	4b4e      	ldr	r3, [pc, #312]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002148:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	494a      	ldr	r1, [pc, #296]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002160:	d101      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002162:	2301      	movs	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800216e:	2301      	movs	r3, #1
 8002170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800217e:	2301      	movs	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 808b 	beq.w	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002190:	4b3a      	ldr	r3, [pc, #232]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4a39      	ldr	r2, [pc, #228]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219a:	6413      	str	r3, [r2, #64]	; 0x40
 800219c:	4b37      	ldr	r3, [pc, #220]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021a8:	4b35      	ldr	r3, [pc, #212]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a34      	ldr	r2, [pc, #208]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b4:	f7fe ff3a 	bl	800102c <HAL_GetTick>
 80021b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021bc:	f7fe ff36 	bl	800102c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e38f      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021ce:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021da:	4b28      	ldr	r3, [pc, #160]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d035      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d02e      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f8:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002200:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800220e:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a1a      	ldr	r2, [pc, #104]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002218:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800221a:	4a18      	ldr	r2, [pc, #96]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d114      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222c:	f7fe fefe 	bl	800102c <HAL_GetTick>
 8002230:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7fe fefa 	bl	800102c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e351      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ee      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002262:	d111      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002272:	400b      	ands	r3, r1
 8002274:	4901      	ldr	r1, [pc, #4]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
 800227a:	e00b      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000
 8002284:	0ffffcff 	.word	0x0ffffcff
 8002288:	4bac      	ldr	r3, [pc, #688]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4aab      	ldr	r2, [pc, #684]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002292:	6093      	str	r3, [r2, #8]
 8002294:	4ba9      	ldr	r3, [pc, #676]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002296:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a0:	49a6      	ldr	r1, [pc, #664]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d010      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022b2:	4ba2      	ldr	r3, [pc, #648]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b8:	4aa0      	ldr	r2, [pc, #640]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022c2:	4b9e      	ldr	r3, [pc, #632]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	499b      	ldr	r1, [pc, #620]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022e0:	4b96      	ldr	r3, [pc, #600]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022ee:	4993      	ldr	r1, [pc, #588]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002302:	4b8e      	ldr	r3, [pc, #568]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002310:	498a      	ldr	r1, [pc, #552]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002324:	4b85      	ldr	r3, [pc, #532]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002332:	4982      	ldr	r1, [pc, #520]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002346:	4b7d      	ldr	r3, [pc, #500]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	4979      	ldr	r1, [pc, #484]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002368:	4b74      	ldr	r3, [pc, #464]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	4971      	ldr	r1, [pc, #452]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800238a:	4b6c      	ldr	r3, [pc, #432]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002390:	f023 020c 	bic.w	r2, r3, #12
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002398:	4968      	ldr	r1, [pc, #416]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023ac:	4b63      	ldr	r3, [pc, #396]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	4960      	ldr	r1, [pc, #384]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023ce:	4b5b      	ldr	r3, [pc, #364]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023dc:	4957      	ldr	r1, [pc, #348]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023f0:	4b52      	ldr	r3, [pc, #328]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	494f      	ldr	r1, [pc, #316]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002412:	4b4a      	ldr	r3, [pc, #296]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002418:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	4946      	ldr	r1, [pc, #280]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002434:	4b41      	ldr	r3, [pc, #260]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	493e      	ldr	r1, [pc, #248]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002456:	4b39      	ldr	r3, [pc, #228]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002464:	4935      	ldr	r1, [pc, #212]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002478:	4b30      	ldr	r3, [pc, #192]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002486:	492d      	ldr	r1, [pc, #180]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d011      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800249a:	4b28      	ldr	r3, [pc, #160]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024a8:	4924      	ldr	r1, [pc, #144]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b8:	d101      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024ba:	2301      	movs	r3, #1
 80024bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e8:	4914      	ldr	r1, [pc, #80]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00b      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800250c:	490b      	ldr	r1, [pc, #44]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00f      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002530:	4902      	ldr	r1, [pc, #8]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002538:	e002      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00b      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800254c:	4b8a      	ldr	r3, [pc, #552]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800254e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002552:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	4986      	ldr	r1, [pc, #536]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002570:	4b81      	ldr	r3, [pc, #516]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002576:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002580:	497d      	ldr	r1, [pc, #500]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d006      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80d6 	beq.w	8002748 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800259c:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a75      	ldr	r2, [pc, #468]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a8:	f7fe fd40 	bl	800102c <HAL_GetTick>
 80025ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025b0:	f7fe fd3c 	bl	800102c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e195      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025c2:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d021      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d11d      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025e2:	4b65      	ldr	r3, [pc, #404]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025f0:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025f6:	0e1b      	lsrs	r3, r3, #24
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	019a      	lsls	r2, r3, #6
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	041b      	lsls	r3, r3, #16
 8002608:	431a      	orrs	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	061b      	lsls	r3, r3, #24
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	071b      	lsls	r3, r3, #28
 8002616:	4958      	ldr	r1, [pc, #352]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800263c:	2b00      	cmp	r3, #0
 800263e:	d02e      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002648:	d129      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800264a:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800264c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002658:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800265a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800265e:	0f1b      	lsrs	r3, r3, #28
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	019a      	lsls	r2, r3, #6
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	041b      	lsls	r3, r3, #16
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	061b      	lsls	r3, r3, #24
 8002678:	431a      	orrs	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	071b      	lsls	r3, r3, #28
 800267e:	493e      	ldr	r1, [pc, #248]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002686:	4b3c      	ldr	r3, [pc, #240]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800268c:	f023 021f 	bic.w	r2, r3, #31
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	3b01      	subs	r3, #1
 8002696:	4938      	ldr	r1, [pc, #224]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01d      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026aa:	4b33      	ldr	r3, [pc, #204]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b0:	0e1b      	lsrs	r3, r3, #24
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026b8:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026be:	0f1b      	lsrs	r3, r3, #28
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	019a      	lsls	r2, r3, #6
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	431a      	orrs	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	061b      	lsls	r3, r3, #24
 80026d8:	431a      	orrs	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	071b      	lsls	r3, r3, #28
 80026de:	4926      	ldr	r1, [pc, #152]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d011      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	019a      	lsls	r2, r3, #6
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	041b      	lsls	r3, r3, #16
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	061b      	lsls	r3, r3, #24
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	071b      	lsls	r3, r3, #28
 800270e:	491a      	ldr	r1, [pc, #104]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002716:	4b18      	ldr	r3, [pc, #96]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a17      	ldr	r2, [pc, #92]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800271c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002722:	f7fe fc83 	bl	800102c <HAL_GetTick>
 8002726:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800272a:	f7fe fc7f 	bl	800102c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b64      	cmp	r3, #100	; 0x64
 8002736:	d901      	bls.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0d8      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b01      	cmp	r3, #1
 800274c:	f040 80ce 	bne.w	80028ec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a08      	ldr	r2, [pc, #32]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275c:	f7fe fc66 	bl	800102c <HAL_GetTick>
 8002760:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002762:	e00b      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002764:	f7fe fc62 	bl	800102c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d904      	bls.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0bb      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800277c:	4b5e      	ldr	r3, [pc, #376]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002788:	d0ec      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d02e      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d12a      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027b2:	4b51      	ldr	r3, [pc, #324]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	0c1b      	lsrs	r3, r3, #16
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027c0:	4b4d      	ldr	r3, [pc, #308]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	0f1b      	lsrs	r3, r3, #28
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	019a      	lsls	r2, r3, #6
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	061b      	lsls	r3, r3, #24
 80027e0:	431a      	orrs	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	071b      	lsls	r3, r3, #28
 80027e6:	4944      	ldr	r1, [pc, #272]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027ee:	4b42      	ldr	r3, [pc, #264]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	3b01      	subs	r3, #1
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	493d      	ldr	r1, [pc, #244]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d022      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800281c:	d11d      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800281e:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002824:	0e1b      	lsrs	r3, r3, #24
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800282c:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	0f1b      	lsrs	r3, r3, #28
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	019a      	lsls	r2, r3, #6
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	041b      	lsls	r3, r3, #16
 8002846:	431a      	orrs	r2, r3
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	061b      	lsls	r3, r3, #24
 800284c:	431a      	orrs	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	071b      	lsls	r3, r3, #28
 8002852:	4929      	ldr	r1, [pc, #164]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d028      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	0e1b      	lsrs	r3, r3, #24
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002874:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	019a      	lsls	r2, r3, #6
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	041b      	lsls	r3, r3, #16
 800288c:	431a      	orrs	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	071b      	lsls	r3, r3, #28
 800289a:	4917      	ldr	r1, [pc, #92]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	4911      	ldr	r1, [pc, #68]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c4:	f7fe fbb2 	bl	800102c <HAL_GetTick>
 80028c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028cc:	f7fe fbae 	bl	800102c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e007      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ea:	d1ef      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800

080028fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e040      	b.n	8002990 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe f9fc 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	; 0x24
 8002928:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0201 	bic.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fc06 	bl	800314c <UART_SetConfig>
 8002940:	4603      	mov	r3, r0
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e022      	b.n	8002990 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fe5e 	bl	8003614 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fee5 	bl	8003758 <UART_CheckIdleState>
 800298e:	4603      	mov	r3, r0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d171      	bne.n	8002a94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_UART_Transmit+0x24>
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e06a      	b.n	8002a96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2221      	movs	r2, #33	; 0x21
 80029cc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ce:	f7fe fb2d 	bl	800102c <HAL_GetTick>
 80029d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	88fa      	ldrh	r2, [r7, #6]
 80029d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	88fa      	ldrh	r2, [r7, #6]
 80029e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ec:	d108      	bne.n	8002a00 <HAL_UART_Transmit+0x68>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d104      	bne.n	8002a00 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	e003      	b.n	8002a08 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a08:	e02c      	b.n	8002a64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2200      	movs	r2, #0
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 feec 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e038      	b.n	8002a96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10b      	bne.n	8002a42 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	61bb      	str	r3, [r7, #24]
 8002a40:	e007      	b.n	8002a52 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1cc      	bne.n	8002a0a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2200      	movs	r2, #0
 8002a78:	2140      	movs	r1, #64	; 0x40
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 feb9 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e005      	b.n	8002a96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b08a      	sub	sp, #40	; 0x28
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d132      	bne.n	8002b1c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_UART_Receive_IT+0x24>
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e02b      	b.n	8002b1e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d018      	beq.n	8002b0c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	e853 3f00 	ldrex	r3, [r3]
 8002ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	623b      	str	r3, [r7, #32]
 8002afa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afc:	69f9      	ldr	r1, [r7, #28]
 8002afe:	6a3a      	ldr	r2, [r7, #32]
 8002b00:	e841 2300 	strex	r3, r2, [r1]
 8002b04:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e6      	bne.n	8002ada <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 ff34 	bl	8003980 <UART_Start_Receive_IT>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	e000      	b.n	8002b1e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3728      	adds	r7, #40	; 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b0ba      	sub	sp, #232	; 0xe8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b52:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b56:	4013      	ands	r3, r2
 8002b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d115      	bne.n	8002b90 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00f      	beq.n	8002b90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d009      	beq.n	8002b90 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 82ac 	beq.w	80030de <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	4798      	blx	r3
      }
      return;
 8002b8e:	e2a6      	b.n	80030de <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8117 	beq.w	8002dc8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ba6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002baa:	4b85      	ldr	r3, [pc, #532]	; (8002dc0 <HAL_UART_IRQHandler+0x298>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 810a 	beq.w	8002dc8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d011      	beq.n	8002be4 <HAL_UART_IRQHandler+0xbc>
 8002bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00b      	beq.n	8002be4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d011      	beq.n	8002c14 <HAL_UART_IRQHandler+0xec>
 8002bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00b      	beq.n	8002c14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2202      	movs	r2, #2
 8002c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c0a:	f043 0204 	orr.w	r2, r3, #4
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d011      	beq.n	8002c44 <HAL_UART_IRQHandler+0x11c>
 8002c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00b      	beq.n	8002c44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2204      	movs	r2, #4
 8002c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c3a:	f043 0202 	orr.w	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d017      	beq.n	8002c80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c76:	f043 0208 	orr.w	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d012      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x18a>
 8002c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00c      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ca0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8212 	beq.w	80030e2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d005      	beq.n	8002d0a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d04f      	beq.n	8002daa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fefe 	bl	8003b0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d141      	bne.n	8002da2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3308      	adds	r3, #8
 8002d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3308      	adds	r3, #8
 8002d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d5a:	e841 2300 	strex	r3, r2, [r1]
 8002d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1d9      	bne.n	8002d1e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d013      	beq.n	8002d9a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d76:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <HAL_UART_IRQHandler+0x29c>)
 8002d78:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe fae1 	bl	8001346 <HAL_DMA_Abort_IT>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d017      	beq.n	8002dba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d94:	4610      	mov	r0, r2
 8002d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d98:	e00f      	b.n	8002dba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f9b6 	bl	800310c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da0:	e00b      	b.n	8002dba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f9b2 	bl	800310c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da8:	e007      	b.n	8002dba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f9ae 	bl	800310c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002db8:	e193      	b.n	80030e2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dba:	bf00      	nop
    return;
 8002dbc:	e191      	b.n	80030e2 <HAL_UART_IRQHandler+0x5ba>
 8002dbe:	bf00      	nop
 8002dc0:	04000120 	.word	0x04000120
 8002dc4:	08003bd5 	.word	0x08003bd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	f040 814c 	bne.w	800306a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8145 	beq.w	800306a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 813e 	beq.w	800306a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2210      	movs	r2, #16
 8002df4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e00:	2b40      	cmp	r3, #64	; 0x40
 8002e02:	f040 80b6 	bne.w	8002f72 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8165 	beq.w	80030e6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e26:	429a      	cmp	r2, r3
 8002e28:	f080 815d 	bcs.w	80030e6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e40:	f000 8086 	beq.w	8002f50 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e7e:	e841 2300 	strex	r3, r2, [r1]
 8002e82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1da      	bne.n	8002e44 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3308      	adds	r3, #8
 8002e94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e98:	e853 3f00 	ldrex	r3, [r3]
 8002e9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3308      	adds	r3, #8
 8002eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e1      	bne.n	8002e8e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3308      	adds	r3, #8
 8002ed0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ed4:	e853 3f00 	ldrex	r3, [r3]
 8002ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3308      	adds	r3, #8
 8002eea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002eee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ef4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ef6:	e841 2300 	strex	r3, r2, [r1]
 8002efa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1e3      	bne.n	8002eca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f18:	e853 3f00 	ldrex	r3, [r3]
 8002f1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f20:	f023 0310 	bic.w	r3, r3, #16
 8002f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f32:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e4      	bne.n	8002f10 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe f98b 	bl	8001266 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f8d8 	bl	8003120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f70:	e0b9      	b.n	80030e6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80ab 	beq.w	80030ea <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a6 	beq.w	80030ea <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e4      	bne.n	8002f9e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3308      	adds	r3, #8
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ff8:	633a      	str	r2, [r7, #48]	; 0x30
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e3      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	60fb      	str	r3, [r7, #12]
   return(result);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f023 0310 	bic.w	r3, r3, #16
 8003034:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	69b9      	ldr	r1, [r7, #24]
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	e841 2300 	strex	r3, r2, [r1]
 800304e:	617b      	str	r3, [r7, #20]
   return(result);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1e4      	bne.n	8003020 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800305c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f85c 	bl	8003120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003068:	e03f      	b.n	80030ea <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800306a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00e      	beq.n	8003094 <HAL_UART_IRQHandler+0x56c>
 8003076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800308a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f853 	bl	8003138 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003092:	e02d      	b.n	80030f0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00e      	beq.n	80030be <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01c      	beq.n	80030ee <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
    }
    return;
 80030bc:	e017      	b.n	80030ee <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d012      	beq.n	80030f0 <HAL_UART_IRQHandler+0x5c8>
 80030ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fd92 	bl	8003c00 <UART_EndTransmit_IT>
    return;
 80030dc:	e008      	b.n	80030f0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80030de:	bf00      	nop
 80030e0:	e006      	b.n	80030f0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80030e2:	bf00      	nop
 80030e4:	e004      	b.n	80030f0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80030e6:	bf00      	nop
 80030e8:	e002      	b.n	80030f0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80030ea:	bf00      	nop
 80030ec:	e000      	b.n	80030f0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80030ee:	bf00      	nop
  }

}
 80030f0:	37e8      	adds	r7, #232	; 0xe8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop

080030f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4ba6      	ldr	r3, [pc, #664]	; (8003410 <UART_SetConfig+0x2c4>)
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	6979      	ldr	r1, [r7, #20]
 8003180:	430b      	orrs	r3, r1
 8003182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a94      	ldr	r2, [pc, #592]	; (8003414 <UART_SetConfig+0x2c8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d120      	bne.n	800320a <UART_SetConfig+0xbe>
 80031c8:	4b93      	ldr	r3, [pc, #588]	; (8003418 <UART_SetConfig+0x2cc>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d816      	bhi.n	8003204 <UART_SetConfig+0xb8>
 80031d6:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <UART_SetConfig+0x90>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	080031ed 	.word	0x080031ed
 80031e0:	080031f9 	.word	0x080031f9
 80031e4:	080031f3 	.word	0x080031f3
 80031e8:	080031ff 	.word	0x080031ff
 80031ec:	2301      	movs	r3, #1
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	e150      	b.n	8003494 <UART_SetConfig+0x348>
 80031f2:	2302      	movs	r3, #2
 80031f4:	77fb      	strb	r3, [r7, #31]
 80031f6:	e14d      	b.n	8003494 <UART_SetConfig+0x348>
 80031f8:	2304      	movs	r3, #4
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	e14a      	b.n	8003494 <UART_SetConfig+0x348>
 80031fe:	2308      	movs	r3, #8
 8003200:	77fb      	strb	r3, [r7, #31]
 8003202:	e147      	b.n	8003494 <UART_SetConfig+0x348>
 8003204:	2310      	movs	r3, #16
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e144      	b.n	8003494 <UART_SetConfig+0x348>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a83      	ldr	r2, [pc, #524]	; (800341c <UART_SetConfig+0x2d0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d132      	bne.n	800327a <UART_SetConfig+0x12e>
 8003214:	4b80      	ldr	r3, [pc, #512]	; (8003418 <UART_SetConfig+0x2cc>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d828      	bhi.n	8003274 <UART_SetConfig+0x128>
 8003222:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <UART_SetConfig+0xdc>)
 8003224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003228:	0800325d 	.word	0x0800325d
 800322c:	08003275 	.word	0x08003275
 8003230:	08003275 	.word	0x08003275
 8003234:	08003275 	.word	0x08003275
 8003238:	08003269 	.word	0x08003269
 800323c:	08003275 	.word	0x08003275
 8003240:	08003275 	.word	0x08003275
 8003244:	08003275 	.word	0x08003275
 8003248:	08003263 	.word	0x08003263
 800324c:	08003275 	.word	0x08003275
 8003250:	08003275 	.word	0x08003275
 8003254:	08003275 	.word	0x08003275
 8003258:	0800326f 	.word	0x0800326f
 800325c:	2300      	movs	r3, #0
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e118      	b.n	8003494 <UART_SetConfig+0x348>
 8003262:	2302      	movs	r3, #2
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e115      	b.n	8003494 <UART_SetConfig+0x348>
 8003268:	2304      	movs	r3, #4
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e112      	b.n	8003494 <UART_SetConfig+0x348>
 800326e:	2308      	movs	r3, #8
 8003270:	77fb      	strb	r3, [r7, #31]
 8003272:	e10f      	b.n	8003494 <UART_SetConfig+0x348>
 8003274:	2310      	movs	r3, #16
 8003276:	77fb      	strb	r3, [r7, #31]
 8003278:	e10c      	b.n	8003494 <UART_SetConfig+0x348>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a68      	ldr	r2, [pc, #416]	; (8003420 <UART_SetConfig+0x2d4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d120      	bne.n	80032c6 <UART_SetConfig+0x17a>
 8003284:	4b64      	ldr	r3, [pc, #400]	; (8003418 <UART_SetConfig+0x2cc>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800328e:	2b30      	cmp	r3, #48	; 0x30
 8003290:	d013      	beq.n	80032ba <UART_SetConfig+0x16e>
 8003292:	2b30      	cmp	r3, #48	; 0x30
 8003294:	d814      	bhi.n	80032c0 <UART_SetConfig+0x174>
 8003296:	2b20      	cmp	r3, #32
 8003298:	d009      	beq.n	80032ae <UART_SetConfig+0x162>
 800329a:	2b20      	cmp	r3, #32
 800329c:	d810      	bhi.n	80032c0 <UART_SetConfig+0x174>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <UART_SetConfig+0x15c>
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d006      	beq.n	80032b4 <UART_SetConfig+0x168>
 80032a6:	e00b      	b.n	80032c0 <UART_SetConfig+0x174>
 80032a8:	2300      	movs	r3, #0
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e0f2      	b.n	8003494 <UART_SetConfig+0x348>
 80032ae:	2302      	movs	r3, #2
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e0ef      	b.n	8003494 <UART_SetConfig+0x348>
 80032b4:	2304      	movs	r3, #4
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e0ec      	b.n	8003494 <UART_SetConfig+0x348>
 80032ba:	2308      	movs	r3, #8
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e0e9      	b.n	8003494 <UART_SetConfig+0x348>
 80032c0:	2310      	movs	r3, #16
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e0e6      	b.n	8003494 <UART_SetConfig+0x348>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a56      	ldr	r2, [pc, #344]	; (8003424 <UART_SetConfig+0x2d8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d120      	bne.n	8003312 <UART_SetConfig+0x1c6>
 80032d0:	4b51      	ldr	r3, [pc, #324]	; (8003418 <UART_SetConfig+0x2cc>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032da:	2bc0      	cmp	r3, #192	; 0xc0
 80032dc:	d013      	beq.n	8003306 <UART_SetConfig+0x1ba>
 80032de:	2bc0      	cmp	r3, #192	; 0xc0
 80032e0:	d814      	bhi.n	800330c <UART_SetConfig+0x1c0>
 80032e2:	2b80      	cmp	r3, #128	; 0x80
 80032e4:	d009      	beq.n	80032fa <UART_SetConfig+0x1ae>
 80032e6:	2b80      	cmp	r3, #128	; 0x80
 80032e8:	d810      	bhi.n	800330c <UART_SetConfig+0x1c0>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <UART_SetConfig+0x1a8>
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d006      	beq.n	8003300 <UART_SetConfig+0x1b4>
 80032f2:	e00b      	b.n	800330c <UART_SetConfig+0x1c0>
 80032f4:	2300      	movs	r3, #0
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e0cc      	b.n	8003494 <UART_SetConfig+0x348>
 80032fa:	2302      	movs	r3, #2
 80032fc:	77fb      	strb	r3, [r7, #31]
 80032fe:	e0c9      	b.n	8003494 <UART_SetConfig+0x348>
 8003300:	2304      	movs	r3, #4
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e0c6      	b.n	8003494 <UART_SetConfig+0x348>
 8003306:	2308      	movs	r3, #8
 8003308:	77fb      	strb	r3, [r7, #31]
 800330a:	e0c3      	b.n	8003494 <UART_SetConfig+0x348>
 800330c:	2310      	movs	r3, #16
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e0c0      	b.n	8003494 <UART_SetConfig+0x348>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a44      	ldr	r2, [pc, #272]	; (8003428 <UART_SetConfig+0x2dc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d125      	bne.n	8003368 <UART_SetConfig+0x21c>
 800331c:	4b3e      	ldr	r3, [pc, #248]	; (8003418 <UART_SetConfig+0x2cc>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800332a:	d017      	beq.n	800335c <UART_SetConfig+0x210>
 800332c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003330:	d817      	bhi.n	8003362 <UART_SetConfig+0x216>
 8003332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003336:	d00b      	beq.n	8003350 <UART_SetConfig+0x204>
 8003338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800333c:	d811      	bhi.n	8003362 <UART_SetConfig+0x216>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <UART_SetConfig+0x1fe>
 8003342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003346:	d006      	beq.n	8003356 <UART_SetConfig+0x20a>
 8003348:	e00b      	b.n	8003362 <UART_SetConfig+0x216>
 800334a:	2300      	movs	r3, #0
 800334c:	77fb      	strb	r3, [r7, #31]
 800334e:	e0a1      	b.n	8003494 <UART_SetConfig+0x348>
 8003350:	2302      	movs	r3, #2
 8003352:	77fb      	strb	r3, [r7, #31]
 8003354:	e09e      	b.n	8003494 <UART_SetConfig+0x348>
 8003356:	2304      	movs	r3, #4
 8003358:	77fb      	strb	r3, [r7, #31]
 800335a:	e09b      	b.n	8003494 <UART_SetConfig+0x348>
 800335c:	2308      	movs	r3, #8
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e098      	b.n	8003494 <UART_SetConfig+0x348>
 8003362:	2310      	movs	r3, #16
 8003364:	77fb      	strb	r3, [r7, #31]
 8003366:	e095      	b.n	8003494 <UART_SetConfig+0x348>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2f      	ldr	r2, [pc, #188]	; (800342c <UART_SetConfig+0x2e0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d125      	bne.n	80033be <UART_SetConfig+0x272>
 8003372:	4b29      	ldr	r3, [pc, #164]	; (8003418 <UART_SetConfig+0x2cc>)
 8003374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003378:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800337c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003380:	d017      	beq.n	80033b2 <UART_SetConfig+0x266>
 8003382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003386:	d817      	bhi.n	80033b8 <UART_SetConfig+0x26c>
 8003388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338c:	d00b      	beq.n	80033a6 <UART_SetConfig+0x25a>
 800338e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003392:	d811      	bhi.n	80033b8 <UART_SetConfig+0x26c>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <UART_SetConfig+0x254>
 8003398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339c:	d006      	beq.n	80033ac <UART_SetConfig+0x260>
 800339e:	e00b      	b.n	80033b8 <UART_SetConfig+0x26c>
 80033a0:	2301      	movs	r3, #1
 80033a2:	77fb      	strb	r3, [r7, #31]
 80033a4:	e076      	b.n	8003494 <UART_SetConfig+0x348>
 80033a6:	2302      	movs	r3, #2
 80033a8:	77fb      	strb	r3, [r7, #31]
 80033aa:	e073      	b.n	8003494 <UART_SetConfig+0x348>
 80033ac:	2304      	movs	r3, #4
 80033ae:	77fb      	strb	r3, [r7, #31]
 80033b0:	e070      	b.n	8003494 <UART_SetConfig+0x348>
 80033b2:	2308      	movs	r3, #8
 80033b4:	77fb      	strb	r3, [r7, #31]
 80033b6:	e06d      	b.n	8003494 <UART_SetConfig+0x348>
 80033b8:	2310      	movs	r3, #16
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	e06a      	b.n	8003494 <UART_SetConfig+0x348>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <UART_SetConfig+0x2e4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d138      	bne.n	800343a <UART_SetConfig+0x2ee>
 80033c8:	4b13      	ldr	r3, [pc, #76]	; (8003418 <UART_SetConfig+0x2cc>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033d6:	d017      	beq.n	8003408 <UART_SetConfig+0x2bc>
 80033d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033dc:	d82a      	bhi.n	8003434 <UART_SetConfig+0x2e8>
 80033de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e2:	d00b      	beq.n	80033fc <UART_SetConfig+0x2b0>
 80033e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e8:	d824      	bhi.n	8003434 <UART_SetConfig+0x2e8>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <UART_SetConfig+0x2aa>
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f2:	d006      	beq.n	8003402 <UART_SetConfig+0x2b6>
 80033f4:	e01e      	b.n	8003434 <UART_SetConfig+0x2e8>
 80033f6:	2300      	movs	r3, #0
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e04b      	b.n	8003494 <UART_SetConfig+0x348>
 80033fc:	2302      	movs	r3, #2
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e048      	b.n	8003494 <UART_SetConfig+0x348>
 8003402:	2304      	movs	r3, #4
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e045      	b.n	8003494 <UART_SetConfig+0x348>
 8003408:	2308      	movs	r3, #8
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e042      	b.n	8003494 <UART_SetConfig+0x348>
 800340e:	bf00      	nop
 8003410:	efff69f3 	.word	0xefff69f3
 8003414:	40011000 	.word	0x40011000
 8003418:	40023800 	.word	0x40023800
 800341c:	40004400 	.word	0x40004400
 8003420:	40004800 	.word	0x40004800
 8003424:	40004c00 	.word	0x40004c00
 8003428:	40005000 	.word	0x40005000
 800342c:	40011400 	.word	0x40011400
 8003430:	40007800 	.word	0x40007800
 8003434:	2310      	movs	r3, #16
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e02c      	b.n	8003494 <UART_SetConfig+0x348>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a72      	ldr	r2, [pc, #456]	; (8003608 <UART_SetConfig+0x4bc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d125      	bne.n	8003490 <UART_SetConfig+0x344>
 8003444:	4b71      	ldr	r3, [pc, #452]	; (800360c <UART_SetConfig+0x4c0>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800344e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003452:	d017      	beq.n	8003484 <UART_SetConfig+0x338>
 8003454:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003458:	d817      	bhi.n	800348a <UART_SetConfig+0x33e>
 800345a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345e:	d00b      	beq.n	8003478 <UART_SetConfig+0x32c>
 8003460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003464:	d811      	bhi.n	800348a <UART_SetConfig+0x33e>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <UART_SetConfig+0x326>
 800346a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800346e:	d006      	beq.n	800347e <UART_SetConfig+0x332>
 8003470:	e00b      	b.n	800348a <UART_SetConfig+0x33e>
 8003472:	2300      	movs	r3, #0
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e00d      	b.n	8003494 <UART_SetConfig+0x348>
 8003478:	2302      	movs	r3, #2
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e00a      	b.n	8003494 <UART_SetConfig+0x348>
 800347e:	2304      	movs	r3, #4
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e007      	b.n	8003494 <UART_SetConfig+0x348>
 8003484:	2308      	movs	r3, #8
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e004      	b.n	8003494 <UART_SetConfig+0x348>
 800348a:	2310      	movs	r3, #16
 800348c:	77fb      	strb	r3, [r7, #31]
 800348e:	e001      	b.n	8003494 <UART_SetConfig+0x348>
 8003490:	2310      	movs	r3, #16
 8003492:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349c:	d15b      	bne.n	8003556 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800349e:	7ffb      	ldrb	r3, [r7, #31]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d828      	bhi.n	80034f6 <UART_SetConfig+0x3aa>
 80034a4:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <UART_SetConfig+0x360>)
 80034a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034aa:	bf00      	nop
 80034ac:	080034d1 	.word	0x080034d1
 80034b0:	080034d9 	.word	0x080034d9
 80034b4:	080034e1 	.word	0x080034e1
 80034b8:	080034f7 	.word	0x080034f7
 80034bc:	080034e7 	.word	0x080034e7
 80034c0:	080034f7 	.word	0x080034f7
 80034c4:	080034f7 	.word	0x080034f7
 80034c8:	080034f7 	.word	0x080034f7
 80034cc:	080034ef 	.word	0x080034ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d0:	f7fe fdc4 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 80034d4:	61b8      	str	r0, [r7, #24]
        break;
 80034d6:	e013      	b.n	8003500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d8:	f7fe fdd4 	bl	8002084 <HAL_RCC_GetPCLK2Freq>
 80034dc:	61b8      	str	r0, [r7, #24]
        break;
 80034de:	e00f      	b.n	8003500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e0:	4b4b      	ldr	r3, [pc, #300]	; (8003610 <UART_SetConfig+0x4c4>)
 80034e2:	61bb      	str	r3, [r7, #24]
        break;
 80034e4:	e00c      	b.n	8003500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034e6:	f7fe fce7 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 80034ea:	61b8      	str	r0, [r7, #24]
        break;
 80034ec:	e008      	b.n	8003500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f2:	61bb      	str	r3, [r7, #24]
        break;
 80034f4:	e004      	b.n	8003500 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	77bb      	strb	r3, [r7, #30]
        break;
 80034fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d074      	beq.n	80035f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	005a      	lsls	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	441a      	add	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	fbb2 f3f3 	udiv	r3, r2, r3
 800351a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b0f      	cmp	r3, #15
 8003520:	d916      	bls.n	8003550 <UART_SetConfig+0x404>
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d212      	bcs.n	8003550 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	b29b      	uxth	r3, r3
 800352e:	f023 030f 	bic.w	r3, r3, #15
 8003532:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	085b      	lsrs	r3, r3, #1
 8003538:	b29b      	uxth	r3, r3
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	b29a      	uxth	r2, r3
 8003540:	89fb      	ldrh	r3, [r7, #14]
 8003542:	4313      	orrs	r3, r2
 8003544:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	89fa      	ldrh	r2, [r7, #14]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	e04f      	b.n	80035f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	77bb      	strb	r3, [r7, #30]
 8003554:	e04c      	b.n	80035f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003556:	7ffb      	ldrb	r3, [r7, #31]
 8003558:	2b08      	cmp	r3, #8
 800355a:	d828      	bhi.n	80035ae <UART_SetConfig+0x462>
 800355c:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <UART_SetConfig+0x418>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003589 	.word	0x08003589
 8003568:	08003591 	.word	0x08003591
 800356c:	08003599 	.word	0x08003599
 8003570:	080035af 	.word	0x080035af
 8003574:	0800359f 	.word	0x0800359f
 8003578:	080035af 	.word	0x080035af
 800357c:	080035af 	.word	0x080035af
 8003580:	080035af 	.word	0x080035af
 8003584:	080035a7 	.word	0x080035a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003588:	f7fe fd68 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 800358c:	61b8      	str	r0, [r7, #24]
        break;
 800358e:	e013      	b.n	80035b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003590:	f7fe fd78 	bl	8002084 <HAL_RCC_GetPCLK2Freq>
 8003594:	61b8      	str	r0, [r7, #24]
        break;
 8003596:	e00f      	b.n	80035b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003598:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <UART_SetConfig+0x4c4>)
 800359a:	61bb      	str	r3, [r7, #24]
        break;
 800359c:	e00c      	b.n	80035b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800359e:	f7fe fc8b 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 80035a2:	61b8      	str	r0, [r7, #24]
        break;
 80035a4:	e008      	b.n	80035b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035aa:	61bb      	str	r3, [r7, #24]
        break;
 80035ac:	e004      	b.n	80035b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	77bb      	strb	r3, [r7, #30]
        break;
 80035b6:	bf00      	nop
    }

    if (pclk != 0U)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d018      	beq.n	80035f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	085a      	lsrs	r2, r3, #1
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	441a      	add	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b0f      	cmp	r3, #15
 80035d6:	d909      	bls.n	80035ec <UART_SetConfig+0x4a0>
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035de:	d205      	bcs.n	80035ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	e001      	b.n	80035f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40007c00 	.word	0x40007c00
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400

08003614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01a      	beq.n	800372a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003712:	d10a      	bne.n	800372a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	605a      	str	r2, [r3, #4]
  }
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af02      	add	r7, sp, #8
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003768:	f7fd fc60 	bl	800102c <HAL_GetTick>
 800376c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b08      	cmp	r3, #8
 800377a:	d10e      	bne.n	800379a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800377c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f831 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e027      	b.n	80037ea <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d10e      	bne.n	80037c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f81b 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e011      	b.n	80037ea <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b09c      	sub	sp, #112	; 0x70
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4613      	mov	r3, r2
 8003800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003802:	e0a7      	b.n	8003954 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	f000 80a3 	beq.w	8003954 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fd fc0d 	bl	800102c <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <UART_WaitOnFlagUntilTimeout+0x32>
 800381e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003820:	2b00      	cmp	r3, #0
 8003822:	d13f      	bne.n	80038a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003838:	667b      	str	r3, [r7, #100]	; 0x64
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003844:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003848:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e6      	bne.n	8003824 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3308      	adds	r3, #8
 800385c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	663b      	str	r3, [r7, #96]	; 0x60
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3308      	adds	r3, #8
 8003874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003876:	64ba      	str	r2, [r7, #72]	; 0x48
 8003878:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800387c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e5      	bne.n	8003856 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e068      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d050      	beq.n	8003954 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c0:	d148      	bne.n	8003954 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
 80038ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e6      	bne.n	80038cc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3308      	adds	r3, #8
 8003904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	613b      	str	r3, [r7, #16]
   return(result);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	66bb      	str	r3, [r7, #104]	; 0x68
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800391e:	623a      	str	r2, [r7, #32]
 8003920:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	69f9      	ldr	r1, [r7, #28]
 8003924:	6a3a      	ldr	r2, [r7, #32]
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	61bb      	str	r3, [r7, #24]
   return(result);
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e010      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69da      	ldr	r2, [r3, #28]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4013      	ands	r3, r2
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	429a      	cmp	r2, r3
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	429a      	cmp	r2, r3
 8003970:	f43f af48 	beq.w	8003804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3770      	adds	r7, #112	; 0x70
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003980:	b480      	push	{r7}
 8003982:	b097      	sub	sp, #92	; 0x5c
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	4613      	mov	r3, r2
 800398c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	88fa      	ldrh	r2, [r7, #6]
 8003998:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	88fa      	ldrh	r2, [r7, #6]
 80039a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b2:	d10e      	bne.n	80039d2 <UART_Start_Receive_IT+0x52>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <UART_Start_Receive_IT+0x48>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80039c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039c6:	e02d      	b.n	8003a24 <UART_Start_Receive_IT+0xa4>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	22ff      	movs	r2, #255	; 0xff
 80039cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039d0:	e028      	b.n	8003a24 <UART_Start_Receive_IT+0xa4>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10d      	bne.n	80039f6 <UART_Start_Receive_IT+0x76>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d104      	bne.n	80039ec <UART_Start_Receive_IT+0x6c>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	22ff      	movs	r2, #255	; 0xff
 80039e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039ea:	e01b      	b.n	8003a24 <UART_Start_Receive_IT+0xa4>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	227f      	movs	r2, #127	; 0x7f
 80039f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039f4:	e016      	b.n	8003a24 <UART_Start_Receive_IT+0xa4>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fe:	d10d      	bne.n	8003a1c <UART_Start_Receive_IT+0x9c>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d104      	bne.n	8003a12 <UART_Start_Receive_IT+0x92>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	227f      	movs	r2, #127	; 0x7f
 8003a0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a10:	e008      	b.n	8003a24 <UART_Start_Receive_IT+0xa4>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	223f      	movs	r2, #63	; 0x3f
 8003a16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a1a:	e003      	b.n	8003a24 <UART_Start_Receive_IT+0xa4>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2222      	movs	r2, #34	; 0x22
 8003a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3308      	adds	r3, #8
 8003a52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a54:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a56:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e5      	bne.n	8003a34 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a70:	d107      	bne.n	8003a82 <UART_Start_Receive_IT+0x102>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4a21      	ldr	r2, [pc, #132]	; (8003b04 <UART_Start_Receive_IT+0x184>)
 8003a7e:	669a      	str	r2, [r3, #104]	; 0x68
 8003a80:	e002      	b.n	8003a88 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <UART_Start_Receive_IT+0x188>)
 8003a86:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d019      	beq.n	8003ac4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aae:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e6      	bne.n	8003a90 <UART_Start_Receive_IT+0x110>
 8003ac2:	e018      	b.n	8003af6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f043 0320 	orr.w	r3, r3, #32
 8003ad8:	653b      	str	r3, [r7, #80]	; 0x50
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	69f9      	ldr	r1, [r7, #28]
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	61bb      	str	r3, [r7, #24]
   return(result);
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e6      	bne.n	8003ac4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	375c      	adds	r7, #92	; 0x5c
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	08003dbb 	.word	0x08003dbb
 8003b08:	08003c55 	.word	0x08003c55

08003b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b095      	sub	sp, #84	; 0x54
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b32:	643b      	str	r3, [r7, #64]	; 0x40
 8003b34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e6      	bne.n	8003b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3308      	adds	r3, #8
 8003b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e5      	bne.n	8003b46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d118      	bne.n	8003bb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f023 0310 	bic.w	r3, r3, #16
 8003b96:	647b      	str	r3, [r7, #68]	; 0x44
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6979      	ldr	r1, [r7, #20]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	613b      	str	r3, [r7, #16]
   return(result);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e6      	bne.n	8003b82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003bc8:	bf00      	nop
 8003bca:	3754      	adds	r7, #84	; 0x54
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f7ff fa8a 	bl	800310c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6979      	ldr	r1, [r7, #20]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	613b      	str	r3, [r7, #16]
   return(result);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e6      	bne.n	8003c08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff fa56 	bl	80030f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c4c:	bf00      	nop
 8003c4e:	3720      	adds	r7, #32
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b096      	sub	sp, #88	; 0x58
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c62:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6c:	2b22      	cmp	r3, #34	; 0x22
 8003c6e:	f040 8098 	bne.w	8003da2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c7c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003c80:	b2d9      	uxtb	r1, r3
 8003c82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d17b      	bne.n	8003db2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cce:	653b      	str	r3, [r7, #80]	; 0x50
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e6      	bne.n	8003cba <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	623b      	str	r3, [r7, #32]
   return(result);
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3308      	adds	r3, #8
 8003d0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d0c:	633a      	str	r2, [r7, #48]	; 0x30
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e5      	bne.n	8003cec <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d12e      	bne.n	8003d9a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0310 	bic.w	r3, r3, #16
 8003d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	69b9      	ldr	r1, [r7, #24]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e6      	bne.n	8003d42 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	2b10      	cmp	r3, #16
 8003d80:	d103      	bne.n	8003d8a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2210      	movs	r2, #16
 8003d88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d90:	4619      	mov	r1, r3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff f9c4 	bl	8003120 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d98:	e00b      	b.n	8003db2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fc fc98 	bl	80006d0 <HAL_UART_RxCpltCallback>
}
 8003da0:	e007      	b.n	8003db2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699a      	ldr	r2, [r3, #24]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0208 	orr.w	r2, r2, #8
 8003db0:	619a      	str	r2, [r3, #24]
}
 8003db2:	bf00      	nop
 8003db4:	3758      	adds	r7, #88	; 0x58
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b096      	sub	sp, #88	; 0x58
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003dc8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd2:	2b22      	cmp	r3, #34	; 0x22
 8003dd4:	f040 8098 	bne.w	8003f08 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003de8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003dec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003df0:	4013      	ands	r3, r2
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfc:	1c9a      	adds	r2, r3, #2
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d17b      	bne.n	8003f18 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e3e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e6      	bne.n	8003e20 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3308      	adds	r3, #8
 8003e58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e5      	bne.n	8003e52 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d12e      	bne.n	8003f00 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f023 0310 	bic.w	r3, r3, #16
 8003ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec6:	61bb      	str	r3, [r7, #24]
 8003ec8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6979      	ldr	r1, [r7, #20]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e6      	bne.n	8003ea8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d103      	bne.n	8003ef0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2210      	movs	r2, #16
 8003eee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff f911 	bl	8003120 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003efe:	e00b      	b.n	8003f18 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fc fbe5 	bl	80006d0 <HAL_UART_RxCpltCallback>
}
 8003f06:	e007      	b.n	8003f18 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0208 	orr.w	r2, r2, #8
 8003f16:	619a      	str	r2, [r3, #24]
}
 8003f18:	bf00      	nop
 8003f1a:	3758      	adds	r7, #88	; 0x58
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <memset>:
 8003f20:	4402      	add	r2, r0
 8003f22:	4603      	mov	r3, r0
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d100      	bne.n	8003f2a <memset+0xa>
 8003f28:	4770      	bx	lr
 8003f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f2e:	e7f9      	b.n	8003f24 <memset+0x4>

08003f30 <__libc_init_array>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	4d0d      	ldr	r5, [pc, #52]	; (8003f68 <__libc_init_array+0x38>)
 8003f34:	4c0d      	ldr	r4, [pc, #52]	; (8003f6c <__libc_init_array+0x3c>)
 8003f36:	1b64      	subs	r4, r4, r5
 8003f38:	10a4      	asrs	r4, r4, #2
 8003f3a:	2600      	movs	r6, #0
 8003f3c:	42a6      	cmp	r6, r4
 8003f3e:	d109      	bne.n	8003f54 <__libc_init_array+0x24>
 8003f40:	4d0b      	ldr	r5, [pc, #44]	; (8003f70 <__libc_init_array+0x40>)
 8003f42:	4c0c      	ldr	r4, [pc, #48]	; (8003f74 <__libc_init_array+0x44>)
 8003f44:	f000 f820 	bl	8003f88 <_init>
 8003f48:	1b64      	subs	r4, r4, r5
 8003f4a:	10a4      	asrs	r4, r4, #2
 8003f4c:	2600      	movs	r6, #0
 8003f4e:	42a6      	cmp	r6, r4
 8003f50:	d105      	bne.n	8003f5e <__libc_init_array+0x2e>
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
 8003f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f58:	4798      	blx	r3
 8003f5a:	3601      	adds	r6, #1
 8003f5c:	e7ee      	b.n	8003f3c <__libc_init_array+0xc>
 8003f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f62:	4798      	blx	r3
 8003f64:	3601      	adds	r6, #1
 8003f66:	e7f2      	b.n	8003f4e <__libc_init_array+0x1e>
 8003f68:	08004010 	.word	0x08004010
 8003f6c:	08004010 	.word	0x08004010
 8003f70:	08004010 	.word	0x08004010
 8003f74:	08004014 	.word	0x08004014

08003f78 <strcpy>:
 8003f78:	4603      	mov	r3, r0
 8003f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f7e:	f803 2b01 	strb.w	r2, [r3], #1
 8003f82:	2a00      	cmp	r2, #0
 8003f84:	d1f9      	bne.n	8003f7a <strcpy+0x2>
 8003f86:	4770      	bx	lr

08003f88 <_init>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr

08003f94 <_fini>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	bf00      	nop
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr
