
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ed0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002604c  080090d0  080090d0  000190d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f11c  0802f11c  000401e0  2**0
                  CONTENTS
  4 .ARM          00000008  0802f11c  0802f11c  0003f11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f124  0802f124  000401e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f124  0802f124  0003f124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802f128  0802f128  0003f128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0802f12c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001e0  0802f30c  000401e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  0802f30c  00040364  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000401e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d7d  00000000  00000000  0004020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d5  00000000  00000000  00055f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00059260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  0005a460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002abd5  00000000  00000000  0005b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b2a  00000000  00000000  000860bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffd2e  00000000  00000000  0009cbe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019c915  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000590c  00000000  00000000  0019c968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080090b8 	.word	0x080090b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080090b8 	.word	0x080090b8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08e      	sub	sp, #56	; 0x38
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fe:	4b8d      	ldr	r3, [pc, #564]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a8c      	ldr	r2, [pc, #560]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000604:	f043 0310 	orr.w	r3, r3, #16
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b8a      	ldr	r3, [pc, #552]	; (8000834 <MX_GPIO_Init+0x24c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0310 	and.w	r3, r3, #16
 8000612:	623b      	str	r3, [r7, #32]
 8000614:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b87      	ldr	r3, [pc, #540]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a86      	ldr	r2, [pc, #536]	; (8000834 <MX_GPIO_Init+0x24c>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b84      	ldr	r3, [pc, #528]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	61fb      	str	r3, [r7, #28]
 800062c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062e:	4b81      	ldr	r3, [pc, #516]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a80      	ldr	r2, [pc, #512]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000634:	f043 0320 	orr.w	r3, r3, #32
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b7e      	ldr	r3, [pc, #504]	; (8000834 <MX_GPIO_Init+0x24c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0320 	and.w	r3, r3, #32
 8000642:	61bb      	str	r3, [r7, #24]
 8000644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	4b7b      	ldr	r3, [pc, #492]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a7a      	ldr	r2, [pc, #488]	; (8000834 <MX_GPIO_Init+0x24c>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b78      	ldr	r3, [pc, #480]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b75      	ldr	r3, [pc, #468]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a74      	ldr	r2, [pc, #464]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b72      	ldr	r3, [pc, #456]	; (8000834 <MX_GPIO_Init+0x24c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b6f      	ldr	r3, [pc, #444]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a6e      	ldr	r2, [pc, #440]	; (8000834 <MX_GPIO_Init+0x24c>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b6c      	ldr	r3, [pc, #432]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	4b69      	ldr	r3, [pc, #420]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a68      	ldr	r2, [pc, #416]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b66      	ldr	r3, [pc, #408]	; (8000834 <MX_GPIO_Init+0x24c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a6:	4b63      	ldr	r3, [pc, #396]	; (8000834 <MX_GPIO_Init+0x24c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a62      	ldr	r2, [pc, #392]	; (8000834 <MX_GPIO_Init+0x24c>)
 80006ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b60      	ldr	r3, [pc, #384]	; (8000834 <MX_GPIO_Init+0x24c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2168      	movs	r1, #104	; 0x68
 80006c2:	485d      	ldr	r0, [pc, #372]	; (8000838 <MX_GPIO_Init+0x250>)
 80006c4:	f003 f9d0 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006ce:	485b      	ldr	r0, [pc, #364]	; (800083c <MX_GPIO_Init+0x254>)
 80006d0:	f003 f9ca 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	4859      	ldr	r0, [pc, #356]	; (8000840 <MX_GPIO_Init+0x258>)
 80006da:	f003 f9c5 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006e4:	4857      	ldr	r0, [pc, #348]	; (8000844 <MX_GPIO_Init+0x25c>)
 80006e6:	f003 f9bf 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80006ea:	2314      	movs	r3, #20
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	4619      	mov	r1, r3
 80006fc:	484e      	ldr	r0, [pc, #312]	; (8000838 <MX_GPIO_Init+0x250>)
 80006fe:	f002 ffef 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000702:	2368      	movs	r3, #104	; 0x68
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	4619      	mov	r1, r3
 8000718:	4847      	ldr	r0, [pc, #284]	; (8000838 <MX_GPIO_Init+0x250>)
 800071a:	f002 ffe1 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 800071e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	4619      	mov	r1, r3
 8000732:	4844      	ldr	r0, [pc, #272]	; (8000844 <MX_GPIO_Init+0x25c>)
 8000734:	f002 ffd4 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000738:	2332      	movs	r3, #50	; 0x32
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000748:	230b      	movs	r3, #11
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	4619      	mov	r1, r3
 8000752:	483c      	ldr	r0, [pc, #240]	; (8000844 <MX_GPIO_Init+0x25c>)
 8000754:	f002 ffc4 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000758:	2386      	movs	r3, #134	; 0x86
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000768:	230b      	movs	r3, #11
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000770:	4619      	mov	r1, r3
 8000772:	4835      	ldr	r0, [pc, #212]	; (8000848 <MX_GPIO_Init+0x260>)
 8000774:	f002 ffb4 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078a:	230b      	movs	r3, #11
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	4619      	mov	r1, r3
 8000794:	4829      	ldr	r0, [pc, #164]	; (800083c <MX_GPIO_Init+0x254>)
 8000796:	f002 ffa3 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800079a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4822      	ldr	r0, [pc, #136]	; (800083c <MX_GPIO_Init+0x254>)
 80007b4:	f002 ff94 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007b8:	2340      	movs	r3, #64	; 0x40
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	481c      	ldr	r0, [pc, #112]	; (8000840 <MX_GPIO_Init+0x258>)
 80007d0:	f002 ff86 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e4:	4619      	mov	r1, r3
 80007e6:	4816      	ldr	r0, [pc, #88]	; (8000840 <MX_GPIO_Init+0x258>)
 80007e8:	f002 ff7a 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80007ec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000802:	4619      	mov	r1, r3
 8000804:	480f      	ldr	r0, [pc, #60]	; (8000844 <MX_GPIO_Init+0x25c>)
 8000806:	f002 ff6b 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800080a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800081c:	230b      	movs	r3, #11
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_GPIO_Init+0x258>)
 8000828:	f002 ff5a 	bl	80036e0 <HAL_GPIO_Init>

}
 800082c:	bf00      	nop
 800082e:	3738      	adds	r7, #56	; 0x38
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40021000 	.word	0x40021000
 800083c:	40020400 	.word	0x40020400
 8000840:	40021800 	.word	0x40021800
 8000844:	40020800 	.word	0x40020800
 8000848:	40020000 	.word	0x40020000

0800084c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000850:	f3bf 8f4f 	dsb	sy
}
 8000854:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000856:	f3bf 8f6f 	isb	sy
}
 800085a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <SCB_EnableICache+0x48>)
 800085e:	2200      	movs	r2, #0
 8000860:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000864:	f3bf 8f4f 	dsb	sy
}
 8000868:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800086a:	f3bf 8f6f 	isb	sy
}
 800086e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <SCB_EnableICache+0x48>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <SCB_EnableICache+0x48>)
 8000876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800087c:	f3bf 8f4f 	dsb	sy
}
 8000880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000882:	f3bf 8f6f 	isb	sy
}
 8000886:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <SCB_EnableDCache+0x84>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008a6:	f3bf 8f4f 	dsb	sy
}
 80008aa:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <SCB_EnableDCache+0x84>)
 80008ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008b2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	0b5b      	lsrs	r3, r3, #13
 80008b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008bc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	08db      	lsrs	r3, r3, #3
 80008c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008c6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	015a      	lsls	r2, r3, #5
 80008cc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008d0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d6:	4911      	ldr	r1, [pc, #68]	; (800091c <SCB_EnableDCache+0x84>)
 80008d8:	4313      	orrs	r3, r2
 80008da:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1e5a      	subs	r2, r3, #1
 80008e2:	60ba      	str	r2, [r7, #8]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1ef      	bne.n	80008c8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	60fa      	str	r2, [r7, #12]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1e5      	bne.n	80008be <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80008f2:	f3bf 8f4f 	dsb	sy
}
 80008f6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <SCB_EnableDCache+0x84>)
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <SCB_EnableDCache+0x84>)
 80008fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000902:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000904:	f3bf 8f4f 	dsb	sy
}
 8000908:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800090a:	f3bf 8f6f 	isb	sy
}
 800090e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b0c7      	sub	sp, #284	; 0x11c
 8000924:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000926:	f7ff ff91 	bl	800084c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800092a:	f7ff ffb5 	bl	8000898 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f002 fd61 	bl	80033f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 ff73 	bl	800181c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f7ff fe57 	bl	80005e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800093a:	f001 fa5b 	bl	8001df4 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 800093e:	f001 f83d 	bl	80019bc <MX_SPI5_Init>
  MX_TIM1_Init();
 8000942:	f001 f9e3 	bl	8001d0c <MX_TIM1_Init>
  MX_RNG_Init();
 8000946:	f001 f805 	bl	8001954 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 800094a:	f002 f891 	bl	8002a70 <ILI9341_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //----------------------------------------------------------PERFORMANCE TEST
	  		ILI9341_Fill_Screen(WHITE);
 800094e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000952:	f002 fa35 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000956:	2001      	movs	r0, #1
 8000958:	f002 f82c 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("FPS TEST, 40 loop 2 screens", 10, 10, BLACK, 1, WHITE);
 800095c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	2301      	movs	r3, #1
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2300      	movs	r3, #0
 8000968:	220a      	movs	r2, #10
 800096a:	210a      	movs	r1, #10
 800096c:	4890      	ldr	r0, [pc, #576]	; (8000bb0 <main+0x290>)
 800096e:	f001 fd97 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000972:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000976:	f002 fda9 	bl	80034cc <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 800097a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800097e:	f002 fa1f 	bl	8002dc0 <ILI9341_Fill_Screen>

	  		uint32_t Timer_Counter = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  		for(uint32_t j = 0; j < 2; j++)
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800098e:	e02a      	b.n	80009e6 <main+0xc6>
	  		{
	  			HAL_TIM_Base_Start(&htim1);
 8000990:	4888      	ldr	r0, [pc, #544]	; (8000bb4 <main+0x294>)
 8000992:	f004 fe1b 	bl	80055cc <HAL_TIM_Base_Start>
	  			for(uint16_t i = 0; i < 10; i++)
 8000996:	2300      	movs	r3, #0
 8000998:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 800099c:	e00b      	b.n	80009b6 <main+0x96>
	  			{
	  				ILI9341_Fill_Screen(WHITE);
 800099e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009a2:	f002 fa0d 	bl	8002dc0 <ILI9341_Fill_Screen>
	  				ILI9341_Fill_Screen(BLACK);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f002 fa0a 	bl	8002dc0 <ILI9341_Fill_Screen>
	  			for(uint16_t i = 0; i < 10; i++)
 80009ac:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80009b0:	3301      	adds	r3, #1
 80009b2:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 80009b6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80009ba:	2b09      	cmp	r3, #9
 80009bc:	d9ef      	bls.n	800099e <main+0x7e>
	  			}

	  			//20.000 per second!
	  			HAL_TIM_Base_Stop(&htim1);
 80009be:	487d      	ldr	r0, [pc, #500]	; (8000bb4 <main+0x294>)
 80009c0:	f004 fe74 	bl	80056ac <HAL_TIM_Base_Stop>
	  			Timer_Counter += __HAL_TIM_GET_COUNTER(&htim1);
 80009c4:	4b7b      	ldr	r3, [pc, #492]	; (8000bb4 <main+0x294>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80009ce:	4413      	add	r3, r2
 80009d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  			__HAL_TIM_SET_COUNTER(&htim1, 0);
 80009d4:	4b77      	ldr	r3, [pc, #476]	; (8000bb4 <main+0x294>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
	  		for(uint32_t j = 0; j < 2; j++)
 80009dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80009e0:	3301      	adds	r3, #1
 80009e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80009e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d9d0      	bls.n	8000990 <main+0x70>
	  		}
	  		Timer_Counter /= 2;
 80009ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80009f2:	085b      	lsrs	r3, r3, #1
 80009f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	  		char counter_buff[30];
	  		ILI9341_Fill_Screen(WHITE);
 80009f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009fc:	f002 f9e0 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f001 ffd7 	bl	80029b4 <ILI9341_Set_Rotation>
	  		sprintf(counter_buff, "Timer counter value: %ld", Timer_Counter*2);
 8000a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a0a:	005a      	lsls	r2, r3, #1
 8000a0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a10:	4969      	ldr	r1, [pc, #420]	; (8000bb8 <main+0x298>)
 8000a12:	4618      	mov	r0, r3
 8000a14:	f006 f98e 	bl	8006d34 <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 10, BLACK, 1, WHITE);
 8000a18:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a20:	9301      	str	r3, [sp, #4]
 8000a22:	2301      	movs	r3, #1
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	2300      	movs	r3, #0
 8000a28:	220a      	movs	r2, #10
 8000a2a:	210a      	movs	r1, #10
 8000a2c:	f001 fd38 	bl	80024a0 <ILI9341_Draw_Text>

	  		double seconds_passed = 2*((float)Timer_Counter / 20000);
 8000a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a34:	ee07 3a90 	vmov	s15, r3
 8000a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a3c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8000bbc <main+0x29c>
 8000a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a4c:	ed87 7b36 	vstr	d7, [r7, #216]	; 0xd8
	  		sprintf(counter_buff, "Time: %.3f Sec", seconds_passed);
 8000a50:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000a54:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8000a58:	4959      	ldr	r1, [pc, #356]	; (8000bc0 <main+0x2a0>)
 8000a5a:	f006 f96b 	bl	8006d34 <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 30, BLACK, 2, WHITE);
 8000a5e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	2302      	movs	r3, #2
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	221e      	movs	r2, #30
 8000a70:	210a      	movs	r1, #10
 8000a72:	f001 fd15 	bl	80024a0 <ILI9341_Draw_Text>

	  		double timer_float = 20/(((float)Timer_Counter)/20000);	//Frames per sec
 8000a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a82:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8000bbc <main+0x29c>
 8000a86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a8a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8000a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a96:	ed87 7b34 	vstr	d7, [r7, #208]	; 0xd0

	  		sprintf(counter_buff, "FPS:  %.2f", timer_float);
 8000a9a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000a9e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8000aa2:	4948      	ldr	r1, [pc, #288]	; (8000bc4 <main+0x2a4>)
 8000aa4:	f006 f946 	bl	8006d34 <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 50, BLACK, 2, WHITE);
 8000aa8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2232      	movs	r2, #50	; 0x32
 8000aba:	210a      	movs	r1, #10
 8000abc:	f001 fcf0 	bl	80024a0 <ILI9341_Draw_Text>
	  		double MB_PS = timer_float*240*320*2/1000000;
 8000ac0:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8000ac4:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000b90 <main+0x270>
 8000ac8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000acc:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000b98 <main+0x278>
 8000ad0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ad4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000ad8:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8000ba0 <main+0x280>
 8000adc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ae0:	ed87 7b32 	vstr	d7, [r7, #200]	; 0xc8
	  		sprintf(counter_buff, "MB/S: %.2f", MB_PS);
 8000ae4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000ae8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8000aec:	4936      	ldr	r1, [pc, #216]	; (8000bc8 <main+0x2a8>)
 8000aee:	f006 f921 	bl	8006d34 <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 70, BLACK, 2, WHITE);
 8000af2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	2302      	movs	r3, #2
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2300      	movs	r3, #0
 8000b02:	2246      	movs	r2, #70	; 0x46
 8000b04:	210a      	movs	r1, #10
 8000b06:	f001 fccb 	bl	80024a0 <ILI9341_Draw_Text>
	  		double SPI_utilized_percentage = (MB_PS/(6.25 ))*100;		//50mbits / 8 bits
 8000b0a:	ed97 6b32 	vldr	d6, [r7, #200]	; 0xc8
 8000b0e:	eeb1 5b09 	vmov.f64	d5, #25	; 0x40c80000  6.250
 8000b12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b16:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8000ba8 <main+0x288>
 8000b1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b1e:	ed87 7b30 	vstr	d7, [r7, #192]	; 0xc0
	  		sprintf(counter_buff, "SPI Utilized: %.2f", SPI_utilized_percentage);
 8000b22:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000b26:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000b2a:	4928      	ldr	r1, [pc, #160]	; (8000bcc <main+0x2ac>)
 8000b2c:	f006 f902 	bl	8006d34 <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 90, BLACK, 2, WHITE);
 8000b30:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	225a      	movs	r2, #90	; 0x5a
 8000b42:	210a      	movs	r1, #10
 8000b44:	f001 fcac 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(10000);
 8000b48:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b4c:	f002 fcbe 	bl	80034cc <HAL_Delay>
	  		static uint16_t y = 0;

	  		char Temp_Buffer_text[40];

	  //----------------------------------------------------------COUNTING MULTIPLE SEGMENTS
	  		ILI9341_Fill_Screen(WHITE);
 8000b50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b54:	f002 f934 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f001 ff2b 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Counting multiple segments at once", 10, 10, BLACK, 1, WHITE);
 8000b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	2301      	movs	r3, #1
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	220a      	movs	r2, #10
 8000b6c:	210a      	movs	r1, #10
 8000b6e:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <main+0x2b0>)
 8000b70:	f001 fc96 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000b74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b78:	f002 fca8 	bl	80034cc <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000b7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b80:	f002 f91e 	bl	8002dc0 <ILI9341_Fill_Screen>


	  		for(uint16_t i = 0; i <= 10; i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 8000b8a:	e0ab      	b.n	8000ce4 <main+0x3c4>
 8000b8c:	f3af 8000 	nop.w
 8000b90:	00000000 	.word	0x00000000
 8000b94:	406e0000 	.word	0x406e0000
 8000b98:	00000000 	.word	0x00000000
 8000b9c:	40740000 	.word	0x40740000
 8000ba0:	00000000 	.word	0x00000000
 8000ba4:	412e8480 	.word	0x412e8480
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	40590000 	.word	0x40590000
 8000bb0:	080090d0 	.word	0x080090d0
 8000bb4:	20000280 	.word	0x20000280
 8000bb8:	080090ec 	.word	0x080090ec
 8000bbc:	469c4000 	.word	0x469c4000
 8000bc0:	08009108 	.word	0x08009108
 8000bc4:	08009118 	.word	0x08009118
 8000bc8:	08009124 	.word	0x08009124
 8000bcc:	08009130 	.word	0x08009130
 8000bd0:	08009144 	.word	0x08009144
	  		{
	  		sprintf(Temp_Buffer_text, "Counting: %d", i);
 8000bd4:	f8b7 2104 	ldrh.w	r2, [r7, #260]	; 0x104
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	49d9      	ldr	r1, [pc, #868]	; (8000f40 <main+0x620>)
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f006 f8a9 	bl	8006d34 <siprintf>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 2, WHITE);
 8000be2:	1d38      	adds	r0, r7, #4
 8000be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	2302      	movs	r3, #2
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	220a      	movs	r2, #10
 8000bf2:	210a      	movs	r1, #10
 8000bf4:	f001 fc54 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 30, BLUE, 2, WHITE);
 8000bf8:	1d38      	adds	r0, r7, #4
 8000bfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	2302      	movs	r3, #2
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	231f      	movs	r3, #31
 8000c06:	221e      	movs	r2, #30
 8000c08:	210a      	movs	r1, #10
 8000c0a:	f001 fc49 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 50, RED, 2, WHITE);
 8000c0e:	1d38      	adds	r0, r7, #4
 8000c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	2302      	movs	r3, #2
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c1e:	2232      	movs	r2, #50	; 0x32
 8000c20:	210a      	movs	r1, #10
 8000c22:	f001 fc3d 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 70, GREEN, 2, WHITE);
 8000c26:	1d38      	adds	r0, r7, #4
 8000c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	2302      	movs	r3, #2
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c36:	2246      	movs	r2, #70	; 0x46
 8000c38:	210a      	movs	r1, #10
 8000c3a:	f001 fc31 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 90, BLACK, 2, WHITE);
 8000c3e:	1d38      	adds	r0, r7, #4
 8000c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	2302      	movs	r3, #2
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	225a      	movs	r2, #90	; 0x5a
 8000c4e:	210a      	movs	r1, #10
 8000c50:	f001 fc26 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 110, BLUE, 2, WHITE);
 8000c54:	1d38      	adds	r0, r7, #4
 8000c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	231f      	movs	r3, #31
 8000c62:	226e      	movs	r2, #110	; 0x6e
 8000c64:	210a      	movs	r1, #10
 8000c66:	f001 fc1b 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 130, RED, 2, WHITE);
 8000c6a:	1d38      	adds	r0, r7, #4
 8000c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	2302      	movs	r3, #2
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c7a:	2282      	movs	r2, #130	; 0x82
 8000c7c:	210a      	movs	r1, #10
 8000c7e:	f001 fc0f 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 150, GREEN, 2, WHITE);
 8000c82:	1d38      	adds	r0, r7, #4
 8000c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c92:	2296      	movs	r2, #150	; 0x96
 8000c94:	210a      	movs	r1, #10
 8000c96:	f001 fc03 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 170, WHITE, 2, BLACK);
 8000c9a:	1d38      	adds	r0, r7, #4
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	9301      	str	r3, [sp, #4]
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ca8:	22aa      	movs	r2, #170	; 0xaa
 8000caa:	210a      	movs	r1, #10
 8000cac:	f001 fbf8 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 190, BLUE, 2, BLACK);
 8000cb0:	1d38      	adds	r0, r7, #4
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9301      	str	r3, [sp, #4]
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	231f      	movs	r3, #31
 8000cbc:	22be      	movs	r2, #190	; 0xbe
 8000cbe:	210a      	movs	r1, #10
 8000cc0:	f001 fbee 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 210, RED, 2, BLACK);
 8000cc4:	1d38      	adds	r0, r7, #4
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	2302      	movs	r3, #2
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000cd2:	22d2      	movs	r2, #210	; 0xd2
 8000cd4:	210a      	movs	r1, #10
 8000cd6:	f001 fbe3 	bl	80024a0 <ILI9341_Draw_Text>
	  		for(uint16_t i = 0; i <= 10; i++)
 8000cda:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8000cde:	3301      	adds	r3, #1
 8000ce0:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 8000ce4:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8000ce8:	2b0a      	cmp	r3, #10
 8000cea:	f67f af73 	bls.w	8000bd4 <main+0x2b4>
	  		}

	  		HAL_Delay(1000);
 8000cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf2:	f002 fbeb 	bl	80034cc <HAL_Delay>

	  //----------------------------------------------------------COUNTING SINGLE SEGMENT
	  		ILI9341_Fill_Screen(WHITE);
 8000cf6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cfa:	f002 f861 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f001 fe58 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Counting single segment", 10, 10, BLACK, 1, WHITE);
 8000d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	220a      	movs	r2, #10
 8000d12:	210a      	movs	r1, #10
 8000d14:	488b      	ldr	r0, [pc, #556]	; (8000f44 <main+0x624>)
 8000d16:	f001 fbc3 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000d1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d1e:	f002 fbd5 	bl	80034cc <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000d22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d26:	f002 f84b 	bl	8002dc0 <ILI9341_Fill_Screen>

	  		for(uint16_t i = 0; i <= 100; i++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 8000d30:	e016      	b.n	8000d60 <main+0x440>
	  		{
	  		sprintf(Temp_Buffer_text, "Counting: %d", i);
 8000d32:	f8b7 2102 	ldrh.w	r2, [r7, #258]	; 0x102
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4981      	ldr	r1, [pc, #516]	; (8000f40 <main+0x620>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f005 fffa 	bl	8006d34 <siprintf>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 3, WHITE);
 8000d40:	1d38      	adds	r0, r7, #4
 8000d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	2303      	movs	r3, #3
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	220a      	movs	r2, #10
 8000d50:	210a      	movs	r1, #10
 8000d52:	f001 fba5 	bl	80024a0 <ILI9341_Draw_Text>
	  		for(uint16_t i = 0; i <= 100; i++)
 8000d56:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 8000d60:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000d64:	2b64      	cmp	r3, #100	; 0x64
 8000d66:	d9e4      	bls.n	8000d32 <main+0x412>
	  		}

	  		HAL_Delay(1000);
 8000d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d6c:	f002 fbae 	bl	80034cc <HAL_Delay>

	  //----------------------------------------------------------ALIGNMENT TEST
	  		ILI9341_Fill_Screen(WHITE);
 8000d70:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d74:	f002 f824 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f001 fe1b 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Rectangle alignment check", 10, 10, BLACK, 1, WHITE);
 8000d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	2301      	movs	r3, #1
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	220a      	movs	r2, #10
 8000d8c:	210a      	movs	r1, #10
 8000d8e:	486e      	ldr	r0, [pc, #440]	; (8000f48 <main+0x628>)
 8000d90:	f001 fb86 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000d94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d98:	f002 fb98 	bl	80034cc <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000d9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000da0:	f002 f80e 	bl	8002dc0 <ILI9341_Fill_Screen>

	  		ILI9341_Draw_Hollow_Rectangle_Coord(50, 50, 100, 100, BLACK);
 8000da4:	2300      	movs	r3, #0
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2364      	movs	r3, #100	; 0x64
 8000daa:	2264      	movs	r2, #100	; 0x64
 8000dac:	2132      	movs	r1, #50	; 0x32
 8000dae:	2032      	movs	r0, #50	; 0x32
 8000db0:	f001 f9fb 	bl	80021aa <ILI9341_Draw_Hollow_Rectangle_Coord>
	  		ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 50, 50, BLACK);
 8000db4:	2300      	movs	r3, #0
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2332      	movs	r3, #50	; 0x32
 8000dba:	2232      	movs	r2, #50	; 0x32
 8000dbc:	2114      	movs	r1, #20
 8000dbe:	2014      	movs	r0, #20
 8000dc0:	f001 fa74 	bl	80022ac <ILI9341_Draw_Filled_Rectangle_Coord>
	  		ILI9341_Draw_Hollow_Rectangle_Coord(10, 10, 19, 19, BLACK);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2313      	movs	r3, #19
 8000dca:	2213      	movs	r2, #19
 8000dcc:	210a      	movs	r1, #10
 8000dce:	200a      	movs	r0, #10
 8000dd0:	f001 f9eb 	bl	80021aa <ILI9341_Draw_Hollow_Rectangle_Coord>
	  		HAL_Delay(1000);
 8000dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd8:	f002 fb78 	bl	80034cc <HAL_Delay>

	  //----------------------------------------------------------LINES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8000ddc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000de0:	f001 ffee 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f001 fde5 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8000dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	2301      	movs	r3, #1
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2300      	movs	r3, #0
 8000df6:	220a      	movs	r2, #10
 8000df8:	210a      	movs	r1, #10
 8000dfa:	4854      	ldr	r0, [pc, #336]	; (8000f4c <main+0x62c>)
 8000dfc:	f001 fb50 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Horizontal and Vertical lines", 10, 20, BLACK, 1, WHITE);
 8000e00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	2301      	movs	r3, #1
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2214      	movs	r2, #20
 8000e0e:	210a      	movs	r1, #10
 8000e10:	484f      	ldr	r0, [pc, #316]	; (8000f50 <main+0x630>)
 8000e12:	f001 fb45 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000e16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e1a:	f002 fb57 	bl	80034cc <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000e1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e22:	f001 ffcd 	bl	8002dc0 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 30000; i++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000e2c:	e054      	b.n	8000ed8 <main+0x5b8>
	  		{
	  			uint32_t random_num = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	67bb      	str	r3, [r7, #120]	; 0x78
	  			uint16_t xr = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  			uint16_t yr = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	  			uint16_t radiusr = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	  			uint16_t colourr = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000e4a:	4842      	ldr	r0, [pc, #264]	; (8000f54 <main+0x634>)
 8000e4c:	f003 ffd7 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8000e50:	67b8      	str	r0, [r7, #120]	; 0x78
	  			xr = random_num;
 8000e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000e58:	483e      	ldr	r0, [pc, #248]	; (8000f54 <main+0x634>)
 8000e5a:	f003 ffd0 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8000e5e:	67b8      	str	r0, [r7, #120]	; 0x78
	  			yr = random_num;
 8000e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e62:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000e66:	483b      	ldr	r0, [pc, #236]	; (8000f54 <main+0x634>)
 8000e68:	f003 ffc9 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8000e6c:	67b8      	str	r0, [r7, #120]	; 0x78
	  			radiusr = random_num;
 8000e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e70:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000e74:	4837      	ldr	r0, [pc, #220]	; (8000f54 <main+0x634>)
 8000e76:	f003 ffc2 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8000e7a:	67b8      	str	r0, [r7, #120]	; 0x78
	  			colourr = random_num;
 8000e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e7e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

	  			xr &= 0x01FF;
 8000e82:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e8a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  			yr &= 0x01FF;
 8000e8e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e96:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	  			radiusr &= 0x001F;
 8000e9a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000e9e:	f003 031f 	and.w	r3, r3, #31
 8000ea2:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Horizontal_Line(xr, yr, radiusr, colourr);
 8000ea6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000eaa:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8000eae:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8000eb2:	f8b7 0076 	ldrh.w	r0, [r7, #118]	; 0x76
 8000eb6:	f002 f8df 	bl	8003078 <ILI9341_Draw_Horizontal_Line>
	  			ILI9341_Draw_Vertical_Line(xr, yr, radiusr, colourr);
 8000eba:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000ebe:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8000ec2:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8000ec6:	f8b7 0076 	ldrh.w	r0, [r7, #118]	; 0x76
 8000eca:	f002 f919 	bl	8003100 <ILI9341_Draw_Vertical_Line>
	  		for(uint32_t i = 0; i < 30000; i++)
 8000ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000edc:	f247 522f 	movw	r2, #29999	; 0x752f
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d9a4      	bls.n	8000e2e <main+0x50e>
	  		}

	  		HAL_Delay(1000);
 8000ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee8:	f002 faf0 	bl	80034cc <HAL_Delay>

	  //----------------------------------------------------------HOLLOW CIRCLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8000eec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ef0:	f001 ff66 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f001 fd5d 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8000efa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	2301      	movs	r3, #1
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2300      	movs	r3, #0
 8000f06:	220a      	movs	r2, #10
 8000f08:	210a      	movs	r1, #10
 8000f0a:	4810      	ldr	r0, [pc, #64]	; (8000f4c <main+0x62c>)
 8000f0c:	f001 fac8 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Circles", 10, 20, BLACK, 1, WHITE);
 8000f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	2301      	movs	r3, #1
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2214      	movs	r2, #20
 8000f1e:	210a      	movs	r1, #10
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <main+0x638>)
 8000f22:	f001 fabd 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000f26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f2a:	f002 facf 	bl	80034cc <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000f2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f32:	f001 ff45 	bl	8002dc0 <ILI9341_Fill_Screen>


	  		for(uint32_t i = 0; i < 3000; i++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000f3c:	e064      	b.n	8001008 <main+0x6e8>
 8000f3e:	bf00      	nop
 8000f40:	08009168 	.word	0x08009168
 8000f44:	08009178 	.word	0x08009178
 8000f48:	08009190 	.word	0x08009190
 8000f4c:	080091ac 	.word	0x080091ac
 8000f50:	080091c8 	.word	0x080091c8
 8000f54:	2000020c 	.word	0x2000020c
 8000f58:	080091e8 	.word	0x080091e8
	  		{
	  			uint32_t random_num = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  			uint16_t xr = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	  			uint16_t yr = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	  			uint16_t radiusr = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  			uint16_t colourr = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000f7a:	48cb      	ldr	r0, [pc, #812]	; (80012a8 <main+0x988>)
 8000f7c:	f003 ff3f 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8000f80:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  			xr = random_num;
 8000f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f88:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000f8c:	48c6      	ldr	r0, [pc, #792]	; (80012a8 <main+0x988>)
 8000f8e:	f003 ff36 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8000f92:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  			yr = random_num;
 8000f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f9a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000f9e:	48c2      	ldr	r0, [pc, #776]	; (80012a8 <main+0x988>)
 8000fa0:	f003 ff2d 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8000fa4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  			radiusr = random_num;
 8000fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fac:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000fb0:	48bd      	ldr	r0, [pc, #756]	; (80012a8 <main+0x988>)
 8000fb2:	f003 ff24 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8000fb6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  			colourr = random_num;
 8000fba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fbe:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

	  			xr &= 0x01FF;
 8000fc2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8000fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fca:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	  			yr &= 0x01FF;
 8000fce:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fd6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	  			radiusr &= 0x001F;
 8000fda:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Hollow_Circle(xr, yr, radiusr*2, colourr);
 8000fe6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8000ff2:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8000ff6:	f8b7 0082 	ldrh.w	r0, [r7, #130]	; 0x82
 8000ffa:	f000 ff98 	bl	8001f2e <ILI9341_Draw_Hollow_Circle>
	  		for(uint32_t i = 0; i < 3000; i++)
 8000ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001002:	3301      	adds	r3, #1
 8001004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001008:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800100c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001010:	4293      	cmp	r3, r2
 8001012:	d9a3      	bls.n	8000f5c <main+0x63c>
	  		}
	  		HAL_Delay(1000);
 8001014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001018:	f002 fa58 	bl	80034cc <HAL_Delay>

	  //----------------------------------------------------------FILLED CIRCLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 800101c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001020:	f001 fece 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001024:	2001      	movs	r0, #1
 8001026:	f001 fcc5 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 800102a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	2301      	movs	r3, #1
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2300      	movs	r3, #0
 8001036:	220a      	movs	r2, #10
 8001038:	210a      	movs	r1, #10
 800103a:	489c      	ldr	r0, [pc, #624]	; (80012ac <main+0x98c>)
 800103c:	f001 fa30 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 8001040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	2301      	movs	r3, #1
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2300      	movs	r3, #0
 800104c:	2214      	movs	r2, #20
 800104e:	210a      	movs	r1, #10
 8001050:	4897      	ldr	r0, [pc, #604]	; (80012b0 <main+0x990>)
 8001052:	f001 fa25 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8001056:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800105a:	f002 fa37 	bl	80034cc <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 800105e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001062:	f001 fead 	bl	8002dc0 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 1000; i++)
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800106c:	e055      	b.n	800111a <main+0x7fa>
	  		{
	  			uint32_t random_num = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  			uint16_t xr = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  			uint16_t yr = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  			uint16_t radiusr = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  			uint16_t colourr = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800108c:	4886      	ldr	r0, [pc, #536]	; (80012a8 <main+0x988>)
 800108e:	f003 feb6 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8001092:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  			xr = random_num;
 8001096:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800109a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800109e:	4882      	ldr	r0, [pc, #520]	; (80012a8 <main+0x988>)
 80010a0:	f003 fead 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 80010a4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  			yr = random_num;
 80010a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010ac:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80010b0:	487d      	ldr	r0, [pc, #500]	; (80012a8 <main+0x988>)
 80010b2:	f003 fea4 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 80010b6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  			radiusr = random_num;
 80010ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80010c2:	4879      	ldr	r0, [pc, #484]	; (80012a8 <main+0x988>)
 80010c4:	f003 fe9b 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 80010c8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  			colourr = random_num;
 80010cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010d0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	  			xr &= 0x01FF;
 80010d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80010d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010dc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  			yr &= 0x01FF;
 80010e0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80010e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010e8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  			radiusr &= 0x001F;
 80010ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80010f0:	f003 031f 	and.w	r3, r3, #31
 80010f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 80010f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80010fc:	085b      	lsrs	r3, r3, #1
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001104:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 8001108:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 800110c:	f000 ffc5 	bl	800209a <ILI9341_Draw_Filled_Circle>
	  		for(uint32_t i = 0; i < 1000; i++)
 8001110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001114:	3301      	adds	r3, #1
 8001116:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800111a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800111e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001122:	d3a4      	bcc.n	800106e <main+0x74e>
	  		}
	  		HAL_Delay(1000);
 8001124:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001128:	f002 f9d0 	bl	80034cc <HAL_Delay>

	  //----------------------------------------------------------HOLLOW RECTANGLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 800112c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001130:	f001 fe46 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001134:	2001      	movs	r0, #1
 8001136:	f001 fc3d 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 800113a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	2301      	movs	r3, #1
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2300      	movs	r3, #0
 8001146:	220a      	movs	r2, #10
 8001148:	210a      	movs	r1, #10
 800114a:	4858      	ldr	r0, [pc, #352]	; (80012ac <main+0x98c>)
 800114c:	f001 f9a8 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Rectangles", 10, 20, BLACK, 1, WHITE);
 8001150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	2301      	movs	r3, #1
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2300      	movs	r3, #0
 800115c:	2214      	movs	r2, #20
 800115e:	210a      	movs	r1, #10
 8001160:	4854      	ldr	r0, [pc, #336]	; (80012b4 <main+0x994>)
 8001162:	f001 f99d 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8001166:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800116a:	f002 f9af 	bl	80034cc <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 800116e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001172:	f001 fe25 	bl	8002dc0 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 20000; i++)
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800117c:	e060      	b.n	8001240 <main+0x920>
	  		{
	  			uint32_t random_num = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  			uint16_t xr = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	  			uint16_t yr = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	  			uint16_t radiusr = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  			uint16_t colourr = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800119c:	4842      	ldr	r0, [pc, #264]	; (80012a8 <main+0x988>)
 800119e:	f003 fe2e 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 80011a2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  			xr = random_num;
 80011a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011aa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80011ae:	483e      	ldr	r0, [pc, #248]	; (80012a8 <main+0x988>)
 80011b0:	f003 fe25 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 80011b4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  			yr = random_num;
 80011b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011bc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80011c0:	4839      	ldr	r0, [pc, #228]	; (80012a8 <main+0x988>)
 80011c2:	f003 fe1c 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 80011c6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  			radiusr = random_num;
 80011ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80011d2:	4835      	ldr	r0, [pc, #212]	; (80012a8 <main+0x988>)
 80011d4:	f003 fe13 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 80011d8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  			colourr = random_num;
 80011dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011e0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

	  			xr &= 0x01FF;
 80011e4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80011e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011ec:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	  			yr &= 0x01FF;
 80011f0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80011f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011f8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	  			radiusr &= 0x001F;
 80011fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Hollow_Rectangle_Coord(xr, yr, xr+radiusr, yr+radiusr, colourr);
 8001208:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800120c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001210:	4413      	add	r3, r2
 8001212:	b29c      	uxth	r4, r3
 8001214:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8001218:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800121c:	4413      	add	r3, r2
 800121e:	b29a      	uxth	r2, r3
 8001220:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8001224:	f8b7 009a 	ldrh.w	r0, [r7, #154]	; 0x9a
 8001228:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	4613      	mov	r3, r2
 8001230:	4622      	mov	r2, r4
 8001232:	f000 ffba 	bl	80021aa <ILI9341_Draw_Hollow_Rectangle_Coord>
	  		for(uint32_t i = 0; i < 20000; i++)
 8001236:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800123a:	3301      	adds	r3, #1
 800123c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001240:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001244:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001248:	4293      	cmp	r3, r2
 800124a:	d998      	bls.n	800117e <main+0x85e>
	  		}
	  		HAL_Delay(1000);
 800124c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001250:	f002 f93c 	bl	80034cc <HAL_Delay>

	  //----------------------------------------------------------FILLED RECTANGLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8001254:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001258:	f001 fdb2 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800125c:	2001      	movs	r0, #1
 800125e:	f001 fba9 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8001262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	2301      	movs	r3, #1
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2300      	movs	r3, #0
 800126e:	220a      	movs	r2, #10
 8001270:	210a      	movs	r1, #10
 8001272:	480e      	ldr	r0, [pc, #56]	; (80012ac <main+0x98c>)
 8001274:	f001 f914 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Filled Rectangles", 10, 20, BLACK, 1, WHITE);
 8001278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	2301      	movs	r3, #1
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2300      	movs	r3, #0
 8001284:	2214      	movs	r2, #20
 8001286:	210a      	movs	r1, #10
 8001288:	480b      	ldr	r0, [pc, #44]	; (80012b8 <main+0x998>)
 800128a:	f001 f909 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 800128e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001292:	f002 f91b 	bl	80034cc <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8001296:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800129a:	f001 fd91 	bl	8002dc0 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 20000; i++)
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80012a4:	e062      	b.n	800136c <main+0xa4c>
 80012a6:	bf00      	nop
 80012a8:	2000020c 	.word	0x2000020c
 80012ac:	080091ac 	.word	0x080091ac
 80012b0:	080091f0 	.word	0x080091f0
 80012b4:	08009200 	.word	0x08009200
 80012b8:	0800920c 	.word	0x0800920c
	  		{
	  			uint32_t random_num = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  			uint16_t xr = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	  			uint16_t yr = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  			uint16_t radiusr = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  			uint16_t colourr = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80012da:	48b9      	ldr	r0, [pc, #740]	; (80015c0 <main+0xca0>)
 80012dc:	f003 fd8f 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 80012e0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  			xr = random_num;
 80012e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012e8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80012ec:	48b4      	ldr	r0, [pc, #720]	; (80015c0 <main+0xca0>)
 80012ee:	f003 fd86 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 80012f2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  			yr = random_num;
 80012f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80012fe:	48b0      	ldr	r0, [pc, #704]	; (80015c0 <main+0xca0>)
 8001300:	f003 fd7d 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8001304:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  			radiusr = random_num;
 8001308:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800130c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001310:	48ab      	ldr	r0, [pc, #684]	; (80015c0 <main+0xca0>)
 8001312:	f003 fd74 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8001316:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  			colourr = random_num;
 800131a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800131e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

	  			xr &= 0x01FF;
 8001322:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800132a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	  			yr &= 0x01FF;
 800132e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001336:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  			radiusr &= 0x001F;
 800133a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Rectangle(xr, yr, radiusr, radiusr, colourr);
 8001346:	f8b7 40a2 	ldrh.w	r4, [r7, #162]	; 0xa2
 800134a:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 800134e:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8001352:	f8b7 00a6 	ldrh.w	r0, [r7, #166]	; 0xa6
 8001356:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	4623      	mov	r3, r4
 800135e:	f001 fe2f 	bl	8002fc0 <ILI9341_Draw_Rectangle>
	  		for(uint32_t i = 0; i < 20000; i++)
 8001362:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001366:	3301      	adds	r3, #1
 8001368:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800136c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001370:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001374:	4293      	cmp	r3, r2
 8001376:	d9a1      	bls.n	80012bc <main+0x99c>
	  		}
	  		HAL_Delay(1000);
 8001378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800137c:	f002 f8a6 	bl	80034cc <HAL_Delay>

	  //----------------------------------------------------------INDIVIDUAL PIXEL EXAMPLE

	  		ILI9341_Fill_Screen(WHITE);
 8001380:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001384:	f001 fd1c 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001388:	2001      	movs	r0, #1
 800138a:	f001 fb13 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Slow draw by selecting", 10, 10, BLACK, 1, WHITE);
 800138e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	2301      	movs	r3, #1
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2300      	movs	r3, #0
 800139a:	220a      	movs	r2, #10
 800139c:	210a      	movs	r1, #10
 800139e:	4889      	ldr	r0, [pc, #548]	; (80015c4 <main+0xca4>)
 80013a0:	f001 f87e 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("and adressing pixels", 10, 20, BLACK, 1, WHITE);
 80013a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	2301      	movs	r3, #1
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2300      	movs	r3, #0
 80013b0:	2214      	movs	r2, #20
 80013b2:	210a      	movs	r1, #10
 80013b4:	4884      	ldr	r0, [pc, #528]	; (80015c8 <main+0xca8>)
 80013b6:	f001 f873 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80013ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013be:	f002 f885 	bl	80034cc <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 80013c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013c6:	f001 fcfb 	bl	8002dc0 <ILI9341_Fill_Screen>


	  		x = 0;
 80013ca:	4b80      	ldr	r3, [pc, #512]	; (80015cc <main+0xcac>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	801a      	strh	r2, [r3, #0]
	  		y = 0;
 80013d0:	4b7f      	ldr	r3, [pc, #508]	; (80015d0 <main+0xcb0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	801a      	strh	r2, [r3, #0]
	  		while (y < 240)
 80013d6:	e026      	b.n	8001426 <main+0xb06>
	  		{
	  		while ((x < 320) && (y < 240))
	  		{

	  			if(x % 2)
 80013d8:	4b7c      	ldr	r3, [pc, #496]	; (80015cc <main+0xcac>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <main+0xad6>
	  			{
	  				ILI9341_Draw_Pixel(x, y, BLACK);
 80013e6:	4b79      	ldr	r3, [pc, #484]	; (80015cc <main+0xcac>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4a79      	ldr	r2, [pc, #484]	; (80015d0 <main+0xcb0>)
 80013ec:	8811      	ldrh	r1, [r2, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f001 fd0b 	bl	8002e0c <ILI9341_Draw_Pixel>
	  			}

	  			x++;
 80013f6:	4b75      	ldr	r3, [pc, #468]	; (80015cc <main+0xcac>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b73      	ldr	r3, [pc, #460]	; (80015cc <main+0xcac>)
 8001400:	801a      	strh	r2, [r3, #0]
	  		while ((x < 320) && (y < 240))
 8001402:	4b72      	ldr	r3, [pc, #456]	; (80015cc <main+0xcac>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800140a:	d203      	bcs.n	8001414 <main+0xaf4>
 800140c:	4b70      	ldr	r3, [pc, #448]	; (80015d0 <main+0xcb0>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	2bef      	cmp	r3, #239	; 0xef
 8001412:	d9e1      	bls.n	80013d8 <main+0xab8>
	  		}

	  			y++;
 8001414:	4b6e      	ldr	r3, [pc, #440]	; (80015d0 <main+0xcb0>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	b29a      	uxth	r2, r3
 800141c:	4b6c      	ldr	r3, [pc, #432]	; (80015d0 <main+0xcb0>)
 800141e:	801a      	strh	r2, [r3, #0]
	  			x = 0;
 8001420:	4b6a      	ldr	r3, [pc, #424]	; (80015cc <main+0xcac>)
 8001422:	2200      	movs	r2, #0
 8001424:	801a      	strh	r2, [r3, #0]
	  		while (y < 240)
 8001426:	4b6a      	ldr	r3, [pc, #424]	; (80015d0 <main+0xcb0>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	2bef      	cmp	r3, #239	; 0xef
 800142c:	d9e9      	bls.n	8001402 <main+0xae2>
	  		}

	  		x = 0;
 800142e:	4b67      	ldr	r3, [pc, #412]	; (80015cc <main+0xcac>)
 8001430:	2200      	movs	r2, #0
 8001432:	801a      	strh	r2, [r3, #0]
	  		y = 0;
 8001434:	4b66      	ldr	r3, [pc, #408]	; (80015d0 <main+0xcb0>)
 8001436:	2200      	movs	r2, #0
 8001438:	801a      	strh	r2, [r3, #0]


	  		while (y < 240)
 800143a:	e026      	b.n	800148a <main+0xb6a>
	  		{
	  		while ((x < 320) && (y < 240))
	  		{

	  			if(y % 2)
 800143c:	4b64      	ldr	r3, [pc, #400]	; (80015d0 <main+0xcb0>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	b29b      	uxth	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <main+0xb3a>
	  			{
	  				ILI9341_Draw_Pixel(x, y, BLACK);
 800144a:	4b60      	ldr	r3, [pc, #384]	; (80015cc <main+0xcac>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	4a60      	ldr	r2, [pc, #384]	; (80015d0 <main+0xcb0>)
 8001450:	8811      	ldrh	r1, [r2, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f001 fcd9 	bl	8002e0c <ILI9341_Draw_Pixel>
	  			}

	  			x++;
 800145a:	4b5c      	ldr	r3, [pc, #368]	; (80015cc <main+0xcac>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b5a      	ldr	r3, [pc, #360]	; (80015cc <main+0xcac>)
 8001464:	801a      	strh	r2, [r3, #0]
	  		while ((x < 320) && (y < 240))
 8001466:	4b59      	ldr	r3, [pc, #356]	; (80015cc <main+0xcac>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800146e:	d203      	bcs.n	8001478 <main+0xb58>
 8001470:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <main+0xcb0>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	2bef      	cmp	r3, #239	; 0xef
 8001476:	d9e1      	bls.n	800143c <main+0xb1c>
	  		}

	  			y++;
 8001478:	4b55      	ldr	r3, [pc, #340]	; (80015d0 <main+0xcb0>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <main+0xcb0>)
 8001482:	801a      	strh	r2, [r3, #0]
	  			x = 0;
 8001484:	4b51      	ldr	r3, [pc, #324]	; (80015cc <main+0xcac>)
 8001486:	2200      	movs	r2, #0
 8001488:	801a      	strh	r2, [r3, #0]
	  		while (y < 240)
 800148a:	4b51      	ldr	r3, [pc, #324]	; (80015d0 <main+0xcb0>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	2bef      	cmp	r3, #239	; 0xef
 8001490:	d9e9      	bls.n	8001466 <main+0xb46>
	  		}
	  		HAL_Delay(2000);
 8001492:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001496:	f002 f819 	bl	80034cc <HAL_Delay>

	  //----------------------------------------------------------INDIVIDUAL PIXEL EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 800149a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800149e:	f001 fc8f 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f001 fa86 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Random position and colour", 10, 10, BLACK, 1, WHITE);
 80014a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	2301      	movs	r3, #1
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2300      	movs	r3, #0
 80014b4:	220a      	movs	r2, #10
 80014b6:	210a      	movs	r1, #10
 80014b8:	4846      	ldr	r0, [pc, #280]	; (80015d4 <main+0xcb4>)
 80014ba:	f000 fff1 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("500000 pixels", 10, 20, BLACK, 1, WHITE);
 80014be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	2301      	movs	r3, #1
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2300      	movs	r3, #0
 80014ca:	2214      	movs	r2, #20
 80014cc:	210a      	movs	r1, #10
 80014ce:	4842      	ldr	r0, [pc, #264]	; (80015d8 <main+0xcb8>)
 80014d0:	f000 ffe6 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80014d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014d8:	f001 fff8 	bl	80034cc <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 80014dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014e0:	f001 fc6e 	bl	8002dc0 <ILI9341_Fill_Screen>


	  		for(uint32_t i = 0; i < 500000; i++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80014ea:	e03a      	b.n	8001562 <main+0xc42>
	  		{
	  			uint32_t random_num = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	  			uint16_t xr = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  			uint16_t yr = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80014fe:	4830      	ldr	r0, [pc, #192]	; (80015c0 <main+0xca0>)
 8001500:	f003 fc7d 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8001504:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	  			xr = random_num;
 8001508:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800150c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001510:	482b      	ldr	r0, [pc, #172]	; (80015c0 <main+0xca0>)
 8001512:	f003 fc74 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8001516:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	  			yr = random_num;
 800151a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800151e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  			uint16_t color = HAL_RNG_GetRandomNumber(&hrng);
 8001522:	4827      	ldr	r0, [pc, #156]	; (80015c0 <main+0xca0>)
 8001524:	f003 fc6b 	bl	8004dfe <HAL_RNG_GetRandomNumber>
 8001528:	4603      	mov	r3, r0
 800152a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

	  			xr &= 0x01FF;
 800152e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8001532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001536:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  			yr &= 0x01FF;
 800153a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800153e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001542:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  			ILI9341_Draw_Pixel(xr, yr, color);
 8001546:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800154a:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 800154e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8001552:	4618      	mov	r0, r3
 8001554:	f001 fc5a 	bl	8002e0c <ILI9341_Draw_Pixel>
	  		for(uint32_t i = 0; i < 500000; i++)
 8001558:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800155c:	3301      	adds	r3, #1
 800155e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001562:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001566:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <main+0xcbc>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d9bf      	bls.n	80014ec <main+0xbcc>
	  		}
	  		HAL_Delay(2000);
 800156c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001570:	f001 ffac 	bl	80034cc <HAL_Delay>

	  //----------------------------------------------------------565 COLOUR EXAMPLE, Grayscale
	  		ILI9341_Fill_Screen(WHITE);
 8001574:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001578:	f001 fc22 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800157c:	2001      	movs	r0, #1
 800157e:	f001 fa19 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
 8001582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	2301      	movs	r3, #1
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2300      	movs	r3, #0
 800158e:	220a      	movs	r2, #10
 8001590:	210a      	movs	r1, #10
 8001592:	4813      	ldr	r0, [pc, #76]	; (80015e0 <main+0xcc0>)
 8001594:	f000 ff84 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);
 8001598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	2301      	movs	r3, #1
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2300      	movs	r3, #0
 80015a4:	2214      	movs	r2, #20
 80015a6:	210a      	movs	r1, #10
 80015a8:	480e      	ldr	r0, [pc, #56]	; (80015e4 <main+0xcc4>)
 80015aa:	f000 ff79 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80015ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015b2:	f001 ff8b 	bl	80034cc <HAL_Delay>


	  		for(uint16_t i = 0; i <= (320); i++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
 80015bc:	e05a      	b.n	8001674 <main+0xd54>
 80015be:	bf00      	nop
 80015c0:	2000020c 	.word	0x2000020c
 80015c4:	08009220 	.word	0x08009220
 80015c8:	08009238 	.word	0x08009238
 80015cc:	200001fc 	.word	0x200001fc
 80015d0:	200001fe 	.word	0x200001fe
 80015d4:	08009250 	.word	0x08009250
 80015d8:	0800926c 	.word	0x0800926c
 80015dc:	0007a11f 	.word	0x0007a11f
 80015e0:	0800927c 	.word	0x0800927c
 80015e4:	0800928c 	.word	0x0800928c
	  		{
	  			uint16_t Red = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	  			uint16_t Green = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	  			uint16_t Blue = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

	  			Red = i/(10);
 80015fa:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 80015fe:	4a7d      	ldr	r2, [pc, #500]	; (80017f4 <main+0xed4>)
 8001600:	fba2 2303 	umull	r2, r3, r2, r3
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	  			Red <<= 11;
 800160a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800160e:	02db      	lsls	r3, r3, #11
 8001610:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	  			Green = i/(5);
 8001614:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001618:	4a76      	ldr	r2, [pc, #472]	; (80017f4 <main+0xed4>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	  			Green <<= 5;
 8001624:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001628:	015b      	lsls	r3, r3, #5
 800162a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	  			Blue = i/(10);
 800162e:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001632:	4a70      	ldr	r2, [pc, #448]	; (80017f4 <main+0xed4>)
 8001634:	fba2 2303 	umull	r2, r3, r2, r3
 8001638:	08db      	lsrs	r3, r3, #3
 800163a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba



	  			uint16_t RGB_color = Red + Green + Blue;
 800163e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001642:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001646:	4413      	add	r3, r2
 8001648:	b29a      	uxth	r2, r3
 800164a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800164e:	4413      	add	r3, r2
 8001650:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
	  			ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color);
 8001654:	4b68      	ldr	r3, [pc, #416]	; (80017f8 <main+0xed8>)
 8001656:	8819      	ldrh	r1, [r3, #0]
 8001658:	f8b7 00e6 	ldrh.w	r0, [r7, #230]	; 0xe6
 800165c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	23f0      	movs	r3, #240	; 0xf0
 8001664:	2201      	movs	r2, #1
 8001666:	f001 fcab 	bl	8002fc0 <ILI9341_Draw_Rectangle>
	  		for(uint16_t i = 0; i <= (320); i++)
 800166a:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 800166e:	3301      	adds	r3, #1
 8001670:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
 8001674:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001678:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800167c:	d9b4      	bls.n	80015e8 <main+0xcc8>

	  		}
	  		HAL_Delay(2000);
 800167e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001682:	f001 ff23 	bl	80034cc <HAL_Delay>

	  //----------------------------------------------------------IMAGE EXAMPLE, Snow Tiger
	  		ILI9341_Fill_Screen(WHITE);
 8001686:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800168a:	f001 fb99 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800168e:	2001      	movs	r0, #1
 8001690:	f001 f990 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("RGB Picture", 10, 10, BLACK, 1, WHITE);
 8001694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	2301      	movs	r3, #1
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2300      	movs	r3, #0
 80016a0:	220a      	movs	r2, #10
 80016a2:	210a      	movs	r1, #10
 80016a4:	4855      	ldr	r0, [pc, #340]	; (80017fc <main+0xedc>)
 80016a6:	f000 fefb 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("TIGER", 10, 20, BLACK, 1, WHITE);
 80016aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2300      	movs	r3, #0
 80016b6:	2214      	movs	r2, #20
 80016b8:	210a      	movs	r1, #10
 80016ba:	4851      	ldr	r0, [pc, #324]	; (8001800 <main+0xee0>)
 80016bc:	f000 fef0 	bl	80024a0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80016c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016c4:	f001 ff02 	bl	80034cc <HAL_Delay>
	  		ILI9341_Draw_Image((const char*)snow_tiger, SCREEN_VERTICAL_2);
 80016c8:	2102      	movs	r1, #2
 80016ca:	484e      	ldr	r0, [pc, #312]	; (8001804 <main+0xee4>)
 80016cc:	f000 ff18 	bl	8002500 <ILI9341_Draw_Image>
	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f001 f96f 	bl	80029b4 <ILI9341_Set_Rotation>
	  		HAL_Delay(5000);
 80016d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80016da:	f001 fef7 	bl	80034cc <HAL_Delay>


	  //----------------------------------------------------------TOUCHSCREEN EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 80016de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016e2:	f001 fb6d 	bl	8002dc0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f001 f964 	bl	80029b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Touchscreen", 10, 10, BLACK, 2, WHITE);
 80016ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	2302      	movs	r3, #2
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2300      	movs	r3, #0
 80016f8:	220a      	movs	r2, #10
 80016fa:	210a      	movs	r1, #10
 80016fc:	4842      	ldr	r0, [pc, #264]	; (8001808 <main+0xee8>)
 80016fe:	f000 fecf 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Touch to draw", 10, 30, BLACK, 2, WHITE);
 8001702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	2302      	movs	r3, #2
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2300      	movs	r3, #0
 800170e:	221e      	movs	r2, #30
 8001710:	210a      	movs	r1, #10
 8001712:	483e      	ldr	r0, [pc, #248]	; (800180c <main+0xeec>)
 8001714:	f000 fec4 	bl	80024a0 <ILI9341_Draw_Text>
	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001718:	2000      	movs	r0, #0
 800171a:	f001 f94b 	bl	80029b4 <ILI9341_Set_Rotation>


	  		while(1)
	  		{
	  			HAL_Delay(20);
 800171e:	2014      	movs	r0, #20
 8001720:	f001 fed4 	bl	80034cc <HAL_Delay>

	  			if(TP_Touchpad_Pressed())
 8001724:	f001 fe56 	bl	80033d4 <TP_Touchpad_Pressed>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d05a      	beq.n	80017e4 <main+0xec4>
	          {

	  					uint16_t x_pos = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	  					uint16_t y_pos = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2


	  					HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 800173a:	2201      	movs	r2, #1
 800173c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001740:	4833      	ldr	r0, [pc, #204]	; (8001810 <main+0xef0>)
 8001742:	f002 f991 	bl	8003a68 <HAL_GPIO_WritePin>

	            uint16_t position_array[2];

	  					if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001746:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fd80 	bl	8003250 <TP_Read_Coordinates>
 8001750:	4603      	mov	r3, r0
 8001752:	2b01      	cmp	r3, #1
 8001754:	d13d      	bne.n	80017d2 <main+0xeb2>
	  					{
	  					x_pos = position_array[0];
 8001756:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800175a:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	  					y_pos = position_array[1];
 800175e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001762:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	  					ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);
 8001766:	f8b7 10e2 	ldrh.w	r1, [r7, #226]	; 0xe2
 800176a:	f8b7 00e4 	ldrh.w	r0, [r7, #228]	; 0xe4
 800176e:	2300      	movs	r3, #0
 8001770:	2202      	movs	r2, #2
 8001772:	f000 fc92 	bl	800209a <ILI9341_Draw_Filled_Circle>

	  					ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001776:	2001      	movs	r0, #1
 8001778:	f001 f91c 	bl	80029b4 <ILI9341_Set_Rotation>
	  					char counter_buff[30];
	  					sprintf(counter_buff, "POS X: %.3d", x_pos);
 800177c:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 8001780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001784:	4923      	ldr	r1, [pc, #140]	; (8001814 <main+0xef4>)
 8001786:	4618      	mov	r0, r3
 8001788:	f005 fad4 	bl	8006d34 <siprintf>
	  					ILI9341_Draw_Text(counter_buff, 10, 80, BLACK, 2, WHITE);
 800178c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	2302      	movs	r3, #2
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2300      	movs	r3, #0
 800179c:	2250      	movs	r2, #80	; 0x50
 800179e:	210a      	movs	r1, #10
 80017a0:	f000 fe7e 	bl	80024a0 <ILI9341_Draw_Text>
	  					sprintf(counter_buff, "POS Y: %.3d", y_pos);
 80017a4:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 80017a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ac:	491a      	ldr	r1, [pc, #104]	; (8001818 <main+0xef8>)
 80017ae:	4618      	mov	r0, r3
 80017b0:	f005 fac0 	bl	8006d34 <siprintf>
	  					ILI9341_Draw_Text(counter_buff, 10, 120, BLACK, 2, WHITE);
 80017b4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80017b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	2302      	movs	r3, #2
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	2300      	movs	r3, #0
 80017c4:	2278      	movs	r2, #120	; 0x78
 80017c6:	210a      	movs	r1, #10
 80017c8:	f000 fe6a 	bl	80024a0 <ILI9341_Draw_Text>
	  					ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f001 f8f1 	bl	80029b4 <ILI9341_Set_Rotation>
	  					}

	  					ILI9341_Draw_Pixel(x_pos, y_pos, BLACK);
 80017d2:	f8b7 10e2 	ldrh.w	r1, [r7, #226]	; 0xe2
 80017d6:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80017da:	2200      	movs	r2, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f001 fb15 	bl	8002e0c <ILI9341_Draw_Pixel>
 80017e2:	e79c      	b.n	800171e <main+0xdfe>

	          }
	  			else
	  			{
	  				HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80017ea:	4809      	ldr	r0, [pc, #36]	; (8001810 <main+0xef0>)
 80017ec:	f002 f93c 	bl	8003a68 <HAL_GPIO_WritePin>
	  			HAL_Delay(20);
 80017f0:	e795      	b.n	800171e <main+0xdfe>
 80017f2:	bf00      	nop
 80017f4:	cccccccd 	.word	0xcccccccd
 80017f8:	200001fc 	.word	0x200001fc
 80017fc:	08009298 	.word	0x08009298
 8001800:	080092a4 	.word	0x080092a4
 8001804:	080092e0 	.word	0x080092e0
 8001808:	080092ac 	.word	0x080092ac
 800180c:	080092b8 	.word	0x080092b8
 8001810:	40020400 	.word	0x40020400
 8001814:	080092c8 	.word	0x080092c8
 8001818:	080092d4 	.word	0x080092d4

0800181c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b0b8      	sub	sp, #224	; 0xe0
 8001820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001822:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001826:	2234      	movs	r2, #52	; 0x34
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f004 fe36 	bl	800649c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001830:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	2290      	movs	r2, #144	; 0x90
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f004 fe27 	bl	800649c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800184e:	f002 f925 	bl	8003a9c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <SystemClock_Config+0x124>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a3a      	ldr	r2, [pc, #232]	; (8001940 <SystemClock_Config+0x124>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b38      	ldr	r3, [pc, #224]	; (8001940 <SystemClock_Config+0x124>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800186a:	4b36      	ldr	r3, [pc, #216]	; (8001944 <SystemClock_Config+0x128>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a35      	ldr	r2, [pc, #212]	; (8001944 <SystemClock_Config+0x128>)
 8001870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b33      	ldr	r3, [pc, #204]	; (8001944 <SystemClock_Config+0x128>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001882:	2301      	movs	r3, #1
 8001884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001888:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800188c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800189a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800189e:	2304      	movs	r3, #4
 80018a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 80018a4:	23c8      	movs	r3, #200	; 0xc8
 80018a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018aa:	2302      	movs	r3, #2
 80018ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80018b0:	2309      	movs	r3, #9
 80018b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 f94b 	bl	8003b5c <HAL_RCC_OscConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80018cc:	f000 f83e 	bl	800194c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018d0:	f002 f8f4 	bl	8003abc <HAL_PWREx_EnableOverDrive>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018da:	f000 f837 	bl	800194c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018de:	230f      	movs	r3, #15
 80018e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001900:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001904:	2106      	movs	r1, #6
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fbd6 	bl	80040b8 <HAL_RCC_ClockConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001912:	f000 f81b 	bl	800194c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <SystemClock_Config+0x12c>)
 8001918:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800191a:	2300      	movs	r3, #0
 800191c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4618      	mov	r0, r3
 800192a:	f002 fdc7 	bl	80044bc <HAL_RCCEx_PeriphCLKConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001934:	f000 f80a 	bl	800194c <Error_Handler>
  }
}
 8001938:	bf00      	nop
 800193a:	37e0      	adds	r7, #224	; 0xe0
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	40007000 	.word	0x40007000
 8001948:	00200100 	.word	0x00200100

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001950:	e7fe      	b.n	8001950 <Error_Handler+0x4>
	...

08001954 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_RNG_Init+0x20>)
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <MX_RNG_Init+0x24>)
 800195c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_RNG_Init+0x20>)
 8001960:	f003 f9d4 	bl	8004d0c <HAL_RNG_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800196a:	f7ff ffef 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000020c 	.word	0x2000020c
 8001978:	50060800 	.word	0x50060800

0800197c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_RNG_MspInit+0x38>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10b      	bne.n	80019a6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_RNG_MspInit+0x3c>)
 8001990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <HAL_RNG_MspInit+0x3c>)
 8001994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001998:	6353      	str	r3, [r2, #52]	; 0x34
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <HAL_RNG_MspInit+0x3c>)
 800199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	50060800 	.word	0x50060800
 80019b8:	40023800 	.word	0x40023800

080019bc <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <MX_SPI5_Init+0x74>)
 80019c2:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <MX_SPI5_Init+0x78>)
 80019c4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_SPI5_Init+0x74>)
 80019c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019cc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <MX_SPI5_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_SPI5_Init+0x74>)
 80019d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019da:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_SPI5_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <MX_SPI5_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_SPI5_Init+0x74>)
 80019ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ee:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_SPI5_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_SPI5_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_SPI5_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <MX_SPI5_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_SPI5_Init+0x74>)
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <MX_SPI5_Init+0x74>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_SPI5_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_SPI5_Init+0x74>)
 8001a1c:	f003 fa04 	bl	8004e28 <HAL_SPI_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001a26:	f7ff ff91 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2000021c 	.word	0x2000021c
 8001a34:	40015000 	.word	0x40015000

08001a38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <HAL_SPI_MspInit+0x7c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d128      	bne.n	8001aac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_SPI_MspInit+0x80>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a16      	ldr	r2, [pc, #88]	; (8001ab8 <HAL_SPI_MspInit+0x80>)
 8001a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_SPI_MspInit+0x80>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_SPI_MspInit+0x80>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_SPI_MspInit+0x80>)
 8001a78:	f043 0320 	orr.w	r3, r3, #32
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_SPI_MspInit+0x80>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a8a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a9c:	2305      	movs	r3, #5
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <HAL_SPI_MspInit+0x84>)
 8001aa8:	f001 fe1a 	bl	80036e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001aac:	bf00      	nop
 8001aae:	3728      	adds	r7, #40	; 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40015000 	.word	0x40015000
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40021400 	.word	0x40021400

08001ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_MspInit+0x44>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <HAL_MspInit+0x44>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_MspInit+0x44>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_MspInit+0x44>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_MspInit+0x44>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_MspInit+0x44>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800

08001b08 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0c:	f001 fcbe 	bl	800348c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	return 1;
 8001b18:	2301      	movs	r3, #1
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_kill>:

int _kill(int pid, int sig)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b2e:	f004 fc8b 	bl	8006448 <__errno>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2216      	movs	r2, #22
 8001b36:	601a      	str	r2, [r3, #0]
	return -1;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_exit>:

void _exit (int status)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ffe7 	bl	8001b24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b56:	e7fe      	b.n	8001b56 <_exit+0x12>

08001b58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	e00a      	b.n	8001b80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b6a:	f3af 8000 	nop.w
 8001b6e:	4601      	mov	r1, r0
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	60ba      	str	r2, [r7, #8]
 8001b76:	b2ca      	uxtb	r2, r1
 8001b78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dbf0      	blt.n	8001b6a <_read+0x12>
	}

return len;
 8001b88:	687b      	ldr	r3, [r7, #4]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e009      	b.n	8001bb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbf1      	blt.n	8001ba4 <_write+0x12>
	}
	return len;
 8001bc0:	687b      	ldr	r3, [r7, #4]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_close>:

int _close(int file)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_isatty>:

int _isatty(int file)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	return 1;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
	return 0;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c3c:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <_sbrk+0x5c>)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <_sbrk+0x60>)
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <_sbrk+0x64>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <_sbrk+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d207      	bcs.n	8001c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c64:	f004 fbf0 	bl	8006448 <__errno>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	e009      	b.n	8001c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <_sbrk+0x64>)
 8001c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20080000 	.word	0x20080000
 8001c94:	00000400 	.word	0x00000400
 8001c98:	20000200 	.word	0x20000200
 8001c9c:	20000368 	.word	0x20000368

08001ca0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca4:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <SystemInit+0x5c>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <SystemInit+0x5c>)
 8001cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <SystemInit+0x60>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <SystemInit+0x60>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <SystemInit+0x60>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <SystemInit+0x60>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	490d      	ldr	r1, [pc, #52]	; (8001d00 <SystemInit+0x60>)
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <SystemInit+0x64>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <SystemInit+0x60>)
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <SystemInit+0x68>)
 8001cd6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <SystemInit+0x60>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <SystemInit+0x60>)
 8001cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <SystemInit+0x60>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <SystemInit+0x5c>)
 8001cec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cf0:	609a      	str	r2, [r3, #8]
#endif
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00
 8001d00:	40023800 	.word	0x40023800
 8001d04:	fef6ffff 	.word	0xfef6ffff
 8001d08:	24003010 	.word	0x24003010

08001d0c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <MX_TIM1_Init+0xa0>)
 8001d2c:	4a20      	ldr	r2, [pc, #128]	; (8001db0 <MX_TIM1_Init+0xa4>)
 8001d2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <MX_TIM1_Init+0xa0>)
 8001d32:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <MX_TIM1_Init+0xa0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_TIM1_Init+0xa0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <MX_TIM1_Init+0xa0>)
 8001d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <MX_TIM1_Init+0xa0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <MX_TIM1_Init+0xa0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d58:	4814      	ldr	r0, [pc, #80]	; (8001dac <MX_TIM1_Init+0xa0>)
 8001d5a:	f003 fbdf 	bl	800551c <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001d64:	f7ff fdf2 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	4619      	mov	r1, r3
 8001d74:	480d      	ldr	r0, [pc, #52]	; (8001dac <MX_TIM1_Init+0xa0>)
 8001d76:	f003 fcc1 	bl	80056fc <HAL_TIM_ConfigClockSource>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001d80:	f7ff fde4 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	4619      	mov	r1, r3
 8001d94:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_TIM1_Init+0xa0>)
 8001d96:	f003 feb1 	bl	8005afc <HAL_TIMEx_MasterConfigSynchronization>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001da0:	f7ff fdd4 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000280 	.word	0x20000280
 8001db0:	40010000 	.word	0x40010000

08001db4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <HAL_TIM_Base_MspInit+0x38>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10b      	bne.n	8001dde <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_TIM_Base_MspInit+0x3c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_TIM_Base_MspInit+0x3c>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <HAL_TIM_Base_MspInit+0x3c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40010000 	.word	0x40010000
 8001df0:	40023800 	.word	0x40023800

08001df4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001dfa:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <MX_USART3_UART_Init+0x5c>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e38:	f003 feee 	bl	8005c18 <HAL_UART_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e42:	f7ff fd83 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200002cc 	.word	0x200002cc
 8001e50:	40004800 	.word	0x40004800

08001e54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <HAL_UART_MspInit+0x7c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d128      	bne.n	8001ec8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <HAL_UART_MspInit+0x80>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a16      	ldr	r2, [pc, #88]	; (8001ed4 <HAL_UART_MspInit+0x80>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_UART_MspInit+0x80>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_UART_MspInit+0x80>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <HAL_UART_MspInit+0x80>)
 8001e94:	f043 0308 	orr.w	r3, r3, #8
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_UART_MspInit+0x80>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ea6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eb8:	2307      	movs	r3, #7
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <HAL_UART_MspInit+0x84>)
 8001ec4:	f001 fc0c 	bl	80036e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3728      	adds	r7, #40	; 0x28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40004800 	.word	0x40004800
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020c00 	.word	0x40020c00

08001edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ee0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ee2:	e003      	b.n	8001eec <LoopCopyDataInit>

08001ee4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ee6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ee8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001eea:	3104      	adds	r1, #4

08001eec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001eec:	480b      	ldr	r0, [pc, #44]	; (8001f1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ef0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ef2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ef4:	d3f6      	bcc.n	8001ee4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ef8:	e002      	b.n	8001f00 <LoopFillZerobss>

08001efa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001efa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001efc:	f842 3b04 	str.w	r3, [r2], #4

08001f00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f04:	d3f9      	bcc.n	8001efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f06:	f7ff fecb 	bl	8001ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f004 faa3 	bl	8006454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0e:	f7fe fd07 	bl	8000920 <main>
  bx  lr    
 8001f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f14:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001f18:	0802f12c 	.word	0x0802f12c
  ldr  r0, =_sdata
 8001f1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f20:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001f24:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001f28:	20000364 	.word	0x20000364

08001f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC_IRQHandler>

08001f2e <ILI9341_Draw_Hollow_Circle>:
#include "5x5_font.h"
#include "spi.h"

/*Draw hollow circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Hollow_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001f2e:	b590      	push	{r4, r7, lr}
 8001f30:	b089      	sub	sp, #36	; 0x24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4604      	mov	r4, r0
 8001f36:	4608      	mov	r0, r1
 8001f38:	4611      	mov	r1, r2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4623      	mov	r3, r4
 8001f3e:	80fb      	strh	r3, [r7, #6]
 8001f40:	4603      	mov	r3, r0
 8001f42:	80bb      	strh	r3, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	803b      	strh	r3, [r7, #0]
	int x = Radius-1;
 8001f4c:	887b      	ldrh	r3, [r7, #2]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	61fb      	str	r3, [r7, #28]
    int y = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
    int dx = 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
    int dy = 1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	613b      	str	r3, [r7, #16]
    int err = dx - (Radius << 1);
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	60fb      	str	r3, [r7, #12]

    while (x >= y)
 8001f68:	e08d      	b.n	8002086 <ILI9341_Draw_Hollow_Circle+0x158>
    {
        ILI9341_Draw_Pixel(X + x, Y + y, Colour);
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	4413      	add	r3, r2
 8001f72:	b298      	uxth	r0, r3
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	88bb      	ldrh	r3, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	883a      	ldrh	r2, [r7, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f000 ff43 	bl	8002e0c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b298      	uxth	r0, r3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	88bb      	ldrh	r3, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	883a      	ldrh	r2, [r7, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f000 ff35 	bl	8002e0c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y + x, Colour);
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	88fa      	ldrh	r2, [r7, #6]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	b298      	uxth	r0, r3
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	88bb      	ldrh	r3, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	883a      	ldrh	r2, [r7, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f000 ff27 	bl	8002e0c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y + y, Colour);
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	88fa      	ldrh	r2, [r7, #6]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	b298      	uxth	r0, r3
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	88bb      	ldrh	r3, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	883a      	ldrh	r2, [r7, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f000 ff19 	bl	8002e0c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y - y, Colour);
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	88fa      	ldrh	r2, [r7, #6]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	b298      	uxth	r0, r3
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	88ba      	ldrh	r2, [r7, #4]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	883a      	ldrh	r2, [r7, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f000 ff0b 	bl	8002e0c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y - x, Colour);
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	88fa      	ldrh	r2, [r7, #6]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	b298      	uxth	r0, r3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	b29b      	uxth	r3, r3
 8002004:	88ba      	ldrh	r2, [r7, #4]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	b29b      	uxth	r3, r3
 800200a:	883a      	ldrh	r2, [r7, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	f000 fefd 	bl	8002e0c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y - x, Colour);
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	b29a      	uxth	r2, r3
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	4413      	add	r3, r2
 800201a:	b298      	uxth	r0, r3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	b29b      	uxth	r3, r3
 8002020:	88ba      	ldrh	r2, [r7, #4]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	b29b      	uxth	r3, r3
 8002026:	883a      	ldrh	r2, [r7, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	f000 feef 	bl	8002e0c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + x, Y - y, Colour);
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	b29a      	uxth	r2, r3
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	4413      	add	r3, r2
 8002036:	b298      	uxth	r0, r3
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	b29b      	uxth	r3, r3
 800203c:	88ba      	ldrh	r2, [r7, #4]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	b29b      	uxth	r3, r3
 8002042:	883a      	ldrh	r2, [r7, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	f000 fee1 	bl	8002e0c <ILI9341_Draw_Pixel>

        if (err <= 0)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	dc09      	bgt.n	8002064 <ILI9341_Draw_Hollow_Circle+0x136>
        {
            y++;
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	3301      	adds	r3, #1
 8002054:	61bb      	str	r3, [r7, #24]
            err += dy;
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4413      	add	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
            dy += 2;
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	3302      	adds	r3, #2
 8002062:	613b      	str	r3, [r7, #16]
        }
        if (err > 0)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	dd0d      	ble.n	8002086 <ILI9341_Draw_Hollow_Circle+0x158>
        {
            x--;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3b01      	subs	r3, #1
 800206e:	61fb      	str	r3, [r7, #28]
            dx += 2;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	3302      	adds	r3, #2
 8002074:	617b      	str	r3, [r7, #20]
            err += (-Radius << 1) + dx;
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	425b      	negs	r3, r3
 800207a:	005a      	lsls	r2, r3, #1
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	4413      	add	r3, r2
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
    while (x >= y)
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	429a      	cmp	r2, r3
 800208c:	f6bf af6d 	bge.w	8001f6a <ILI9341_Draw_Hollow_Circle+0x3c>
        }
    }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd90      	pop	{r4, r7, pc}

0800209a <ILI9341_Draw_Filled_Circle>:

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 800209a:	b590      	push	{r4, r7, lr}
 800209c:	b08b      	sub	sp, #44	; 0x2c
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4604      	mov	r4, r0
 80020a2:	4608      	mov	r0, r1
 80020a4:	4611      	mov	r1, r2
 80020a6:	461a      	mov	r2, r3
 80020a8:	4623      	mov	r3, r4
 80020aa:	80fb      	strh	r3, [r7, #6]
 80020ac:	4603      	mov	r3, r0
 80020ae:	80bb      	strh	r3, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80020c0:	887b      	ldrh	r3, [r7, #2]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	f1c3 0301 	rsb	r3, r3, #1
 80020c8:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80020d2:	e061      	b.n	8002198 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80020d4:	88fa      	ldrh	r2, [r7, #6]
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	e018      	b.n	8002110 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	b298      	uxth	r0, r3
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	88bb      	ldrh	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	883a      	ldrh	r2, [r7, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	f000 fe8c 	bl	8002e0c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	b298      	uxth	r0, r3
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	88ba      	ldrh	r2, [r7, #4]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	b29b      	uxth	r3, r3
 8002102:	883a      	ldrh	r2, [r7, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f000 fe81 	bl	8002e0c <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	3301      	adds	r3, #1
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	88fa      	ldrh	r2, [r7, #6]
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	dde0      	ble.n	80020de <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800211c:	88fa      	ldrh	r2, [r7, #6]
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e018      	b.n	8002158 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	b298      	uxth	r0, r3
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	b29a      	uxth	r2, r3
 800212e:	88bb      	ldrh	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	b29b      	uxth	r3, r3
 8002134:	883a      	ldrh	r2, [r7, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	f000 fe68 	bl	8002e0c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	b298      	uxth	r0, r3
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	b29b      	uxth	r3, r3
 8002144:	88ba      	ldrh	r2, [r7, #4]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	b29b      	uxth	r3, r3
 800214a:	883a      	ldrh	r2, [r7, #0]
 800214c:	4619      	mov	r1, r3
 800214e:	f000 fe5d 	bl	8002e0c <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3301      	adds	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	88fa      	ldrh	r2, [r7, #6]
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	4413      	add	r3, r2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	429a      	cmp	r2, r3
 8002162:	dde0      	ble.n	8002126 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	3301      	adds	r3, #1
 8002168:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	4413      	add	r3, r2
 8002170:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	3302      	adds	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	005a      	lsls	r2, r3, #1
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	4413      	add	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	dd09      	ble.n	8002198 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	3b01      	subs	r3, #1
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3302      	adds	r3, #2
 8002196:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8002198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	429a      	cmp	r2, r3
 800219e:	da99      	bge.n	80020d4 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	372c      	adds	r7, #44	; 0x2c
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd90      	pop	{r4, r7, pc}

080021aa <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80021aa:	b590      	push	{r4, r7, lr}
 80021ac:	b087      	sub	sp, #28
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4604      	mov	r4, r0
 80021b2:	4608      	mov	r0, r1
 80021b4:	4611      	mov	r1, r2
 80021b6:	461a      	mov	r2, r3
 80021b8:	4623      	mov	r3, r4
 80021ba:	80fb      	strh	r3, [r7, #6]
 80021bc:	4603      	mov	r3, r0
 80021be:	80bb      	strh	r3, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	ee07 3a90 	vmov	s15, r3
 80021e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ec:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 80021f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fc:	d501      	bpl.n	8002202 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 80021fe:	2301      	movs	r3, #1
 8002200:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8002208:	883a      	ldrh	r2, [r7, #0]
 800220a:	88bb      	ldrh	r3, [r7, #4]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002216:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 800221a:	edd7 7a03 	vldr	s15, [r7, #12]
 800221e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002226:	d501      	bpl.n	800222c <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8002228:	2301      	movs	r3, #1
 800222a:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d104      	bne.n	800223c <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	82fb      	strh	r3, [r7, #22]
 800223a:	e003      	b.n	8002244 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8002244:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002246:	8afa      	ldrh	r2, [r7, #22]
 8002248:	88b9      	ldrh	r1, [r7, #4]
 800224a:	88f8      	ldrh	r0, [r7, #6]
 800224c:	f000 ff14 	bl	8003078 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8002250:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002252:	8afa      	ldrh	r2, [r7, #22]
 8002254:	8839      	ldrh	r1, [r7, #0]
 8002256:	88f8      	ldrh	r0, [r7, #6]
 8002258:	f000 ff0e 	bl	8003078 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 800225c:	7cbb      	ldrb	r3, [r7, #18]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d104      	bne.n	800226c <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 8002262:	883a      	ldrh	r2, [r7, #0]
 8002264:	88bb      	ldrh	r3, [r7, #4]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	82bb      	strh	r3, [r7, #20]
 800226a:	e003      	b.n	8002274 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 800226c:	88ba      	ldrh	r2, [r7, #4]
 800226e:	883b      	ldrh	r3, [r7, #0]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8002274:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002276:	8aba      	ldrh	r2, [r7, #20]
 8002278:	88b9      	ldrh	r1, [r7, #4]
 800227a:	88f8      	ldrh	r0, [r7, #6]
 800227c:	f000 ff40 	bl	8003100 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8002280:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002282:	8aba      	ldrh	r2, [r7, #20]
 8002284:	88b9      	ldrh	r1, [r7, #4]
 8002286:	8878      	ldrh	r0, [r7, #2]
 8002288:	f000 ff3a 	bl	8003100 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 800228c:	8afb      	ldrh	r3, [r7, #22]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 8002292:	8abb      	ldrh	r3, [r7, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8002298:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800229a:	8839      	ldrh	r1, [r7, #0]
 800229c:	887b      	ldrh	r3, [r7, #2]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fdb4 	bl	8002e0c <ILI9341_Draw_Pixel>
	}
	
}
 80022a4:	bf00      	nop
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd90      	pop	{r4, r7, pc}

080022ac <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	4604      	mov	r4, r0
 80022b4:	4608      	mov	r0, r1
 80022b6:	4611      	mov	r1, r2
 80022b8:	461a      	mov	r2, r3
 80022ba:	4623      	mov	r3, r4
 80022bc:	80fb      	strh	r3, [r7, #6]
 80022be:	4603      	mov	r3, r0
 80022c0:	80bb      	strh	r3, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	807b      	strh	r3, [r7, #2]
 80022c6:	4613      	mov	r3, r2
 80022c8:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da01      	bge.n	80022f8 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 80022f4:	2301      	movs	r3, #1
 80022f6:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 80022fc:	883a      	ldrh	r2, [r7, #0]
 80022fe:	88bb      	ldrh	r3, [r7, #4]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	da01      	bge.n	800230e <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 800230a:	2301      	movs	r3, #1
 800230c:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8002314:	887a      	ldrh	r2, [r7, #2]
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	823b      	strh	r3, [r7, #16]
 8002320:	e005      	b.n	800232e <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	887b      	ldrh	r3, [r7, #2]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 800232a:	887b      	ldrh	r3, [r7, #2]
 800232c:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 800232e:	7cbb      	ldrb	r3, [r7, #18]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d106      	bne.n	8002342 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8002334:	883a      	ldrh	r2, [r7, #0]
 8002336:	88bb      	ldrh	r3, [r7, #4]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 800233c:	88bb      	ldrh	r3, [r7, #4]
 800233e:	81fb      	strh	r3, [r7, #14]
 8002340:	e005      	b.n	800234e <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8002342:	88ba      	ldrh	r2, [r7, #4]
 8002344:	883b      	ldrh	r3, [r7, #0]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 800234a:	883b      	ldrh	r3, [r7, #0]
 800234c:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 800234e:	8abc      	ldrh	r4, [r7, #20]
 8002350:	8afa      	ldrh	r2, [r7, #22]
 8002352:	89f9      	ldrh	r1, [r7, #14]
 8002354:	8a38      	ldrh	r0, [r7, #16]
 8002356:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	4623      	mov	r3, r4
 800235c:	f000 fe30 	bl	8002fc0 <ILI9341_Draw_Rectangle>
}
 8002360:	bf00      	nop
 8002362:	371c      	adds	r7, #28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd90      	pop	{r4, r7, pc}

08002368 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af02      	add	r7, sp, #8
 800236e:	4604      	mov	r4, r0
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	4623      	mov	r3, r4
 8002378:	71fb      	strb	r3, [r7, #7]
 800237a:	4603      	mov	r3, r0
 800237c:	71bb      	strb	r3, [r7, #6]
 800237e:	460b      	mov	r3, r1
 8002380:	717b      	strb	r3, [r7, #5]
 8002382:	4613      	mov	r3, r2
 8002384:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	2b1f      	cmp	r3, #31
 800238e:	d802      	bhi.n	8002396 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	71fb      	strb	r3, [r7, #7]
 8002394:	e002      	b.n	800239c <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	3b20      	subs	r3, #32
 800239a:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800239c:	2300      	movs	r3, #0
 800239e:	753b      	strb	r3, [r7, #20]
 80023a0:	e012      	b.n	80023c8 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80023a2:	7dfa      	ldrb	r2, [r7, #23]
 80023a4:	7d38      	ldrb	r0, [r7, #20]
 80023a6:	7d39      	ldrb	r1, [r7, #20]
 80023a8:	4c3c      	ldr	r4, [pc, #240]	; (800249c <ILI9341_Draw_Char+0x134>)
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4423      	add	r3, r4
 80023b4:	4403      	add	r3, r0
 80023b6:	781a      	ldrb	r2, [r3, #0]
 80023b8:	f107 0318 	add.w	r3, r7, #24
 80023bc:	440b      	add	r3, r1
 80023be:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80023c2:	7d3b      	ldrb	r3, [r7, #20]
 80023c4:	3301      	adds	r3, #1
 80023c6:	753b      	strb	r3, [r7, #20]
 80023c8:	7d3b      	ldrb	r3, [r7, #20]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d9e9      	bls.n	80023a2 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80023ce:	79bb      	ldrb	r3, [r7, #6]
 80023d0:	b298      	uxth	r0, r3
 80023d2:	797b      	ldrb	r3, [r7, #5]
 80023d4:	b299      	uxth	r1, r3
 80023d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023d8:	461a      	mov	r2, r3
 80023da:	0052      	lsls	r2, r2, #1
 80023dc:	4413      	add	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	b29c      	uxth	r4, r3
 80023e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	4623      	mov	r3, r4
 80023ee:	f000 fde7 	bl	8002fc0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80023f2:	2300      	movs	r3, #0
 80023f4:	757b      	strb	r3, [r7, #21]
 80023f6:	e048      	b.n	800248a <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80023f8:	2300      	movs	r3, #0
 80023fa:	75bb      	strb	r3, [r7, #22]
 80023fc:	e03f      	b.n	800247e <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 80023fe:	7d7b      	ldrb	r3, [r7, #21]
 8002400:	f107 0218 	add.w	r2, r7, #24
 8002404:	4413      	add	r3, r2
 8002406:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800240a:	461a      	mov	r2, r3
 800240c:	7dbb      	ldrb	r3, [r7, #22]
 800240e:	fa42 f303 	asr.w	r3, r2, r3
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d02e      	beq.n	8002478 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 800241a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800241c:	2b01      	cmp	r3, #1
 800241e:	d110      	bne.n	8002442 <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8002420:	79bb      	ldrb	r3, [r7, #6]
 8002422:	b29a      	uxth	r2, r3
 8002424:	7d7b      	ldrb	r3, [r7, #21]
 8002426:	b29b      	uxth	r3, r3
 8002428:	4413      	add	r3, r2
 800242a:	b298      	uxth	r0, r3
 800242c:	797b      	ldrb	r3, [r7, #5]
 800242e:	b29a      	uxth	r2, r3
 8002430:	7dbb      	ldrb	r3, [r7, #22]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4413      	add	r3, r2
 8002436:	b29b      	uxth	r3, r3
 8002438:	887a      	ldrh	r2, [r7, #2]
 800243a:	4619      	mov	r1, r3
 800243c:	f000 fce6 	bl	8002e0c <ILI9341_Draw_Pixel>
 8002440:	e01a      	b.n	8002478 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8002442:	79bb      	ldrb	r3, [r7, #6]
 8002444:	b29a      	uxth	r2, r3
 8002446:	7d7b      	ldrb	r3, [r7, #21]
 8002448:	b29b      	uxth	r3, r3
 800244a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800244c:	fb11 f303 	smulbb	r3, r1, r3
 8002450:	b29b      	uxth	r3, r3
 8002452:	4413      	add	r3, r2
 8002454:	b298      	uxth	r0, r3
 8002456:	797b      	ldrb	r3, [r7, #5]
 8002458:	b29a      	uxth	r2, r3
 800245a:	7dbb      	ldrb	r3, [r7, #22]
 800245c:	b29b      	uxth	r3, r3
 800245e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002460:	fb11 f303 	smulbb	r3, r1, r3
 8002464:	b29b      	uxth	r3, r3
 8002466:	4413      	add	r3, r2
 8002468:	b299      	uxth	r1, r3
 800246a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800246c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	4623      	mov	r3, r4
 8002474:	f000 fda4 	bl	8002fc0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002478:	7dbb      	ldrb	r3, [r7, #22]
 800247a:	3301      	adds	r3, #1
 800247c:	75bb      	strb	r3, [r7, #22]
 800247e:	7dbb      	ldrb	r3, [r7, #22]
 8002480:	2b07      	cmp	r3, #7
 8002482:	d9bc      	bls.n	80023fe <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002484:	7d7b      	ldrb	r3, [r7, #21]
 8002486:	3301      	adds	r3, #1
 8002488:	757b      	strb	r3, [r7, #21]
 800248a:	7d7b      	ldrb	r3, [r7, #21]
 800248c:	2b05      	cmp	r3, #5
 800248e:	d9b3      	bls.n	80023f8 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd90      	pop	{r4, r7, pc}
 800249a:	bf00      	nop
 800249c:	0802eaf8 	.word	0x0802eaf8

080024a0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	461a      	mov	r2, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	70fb      	strb	r3, [r7, #3]
 80024b2:	460b      	mov	r3, r1
 80024b4:	70bb      	strb	r3, [r7, #2]
 80024b6:	4613      	mov	r3, r2
 80024b8:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80024ba:	e017      	b.n	80024ec <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	7818      	ldrb	r0, [r3, #0]
 80024c4:	883c      	ldrh	r4, [r7, #0]
 80024c6:	78ba      	ldrb	r2, [r7, #2]
 80024c8:	78f9      	ldrb	r1, [r7, #3]
 80024ca:	8bbb      	ldrh	r3, [r7, #28]
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	8b3b      	ldrh	r3, [r7, #24]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	4623      	mov	r3, r4
 80024d4:	f7ff ff48 	bl	8002368 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80024d8:	8b3b      	ldrh	r3, [r7, #24]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	0052      	lsls	r2, r2, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	4413      	add	r3, r2
 80024ea:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e3      	bne.n	80024bc <ILI9341_Draw_Text+0x1c>
    }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd90      	pop	{r4, r7, pc}
	...

08002500 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8002506:	af00      	add	r7, sp, #0
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	6018      	str	r0, [r3, #0]
 800250c:	460a      	mov	r2, r1
 800250e:	1cfb      	adds	r3, r7, #3
 8002510:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 8002512:	1cfb      	adds	r3, r7, #3
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d159      	bne.n	80025ce <ILI9341_Draw_Image+0xce>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800251a:	2001      	movs	r0, #1
 800251c:	f000 fa4a 	bl	80029b4 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8002520:	23f0      	movs	r3, #240	; 0xf0
 8002522:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002526:	2100      	movs	r1, #0
 8002528:	2000      	movs	r0, #0
 800252a:	f000 f9d9 	bl	80028e0 <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800252e:	2201      	movs	r2, #1
 8002530:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002534:	48b5      	ldr	r0, [pc, #724]	; (800280c <ILI9341_Draw_Image+0x30c>)
 8002536:	f001 fa97 	bl	8003a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800253a:	2200      	movs	r2, #0
 800253c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002540:	48b2      	ldr	r0, [pc, #712]	; (800280c <ILI9341_Draw_Image+0x30c>)
 8002542:	f001 fa91 	bl	8003a68 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002552:	e030      	b.n	80025b6 <ILI9341_Draw_Image+0xb6>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800255a:	e014      	b.n	8002586 <ILI9341_Draw_Image+0x86>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 800255c:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8002560:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002564:	4413      	add	r3, r2
 8002566:	1d3a      	adds	r2, r7, #4
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	4413      	add	r3, r2
 800256c:	7819      	ldrb	r1, [r3, #0]
 800256e:	f107 020c 	add.w	r2, r7, #12
 8002572:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002576:	4413      	add	r3, r2
 8002578:	460a      	mov	r2, r1
 800257a:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800257c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002580:	3301      	adds	r3, #1
 8002582:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002586:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800258a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800258e:	d3e5      	bcc.n	800255c <ILI9341_Draw_Image+0x5c>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002590:	f107 010c 	add.w	r1, r7, #12
 8002594:	230a      	movs	r3, #10
 8002596:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800259a:	489d      	ldr	r0, [pc, #628]	; (8002810 <ILI9341_Draw_Image+0x310>)
 800259c:	f002 fcef 	bl	8004f7e <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 80025a0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80025a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80025a8:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80025ac:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80025b0:	3301      	adds	r3, #1
 80025b2:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 80025b6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80025ba:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80025be:	d9c9      	bls.n	8002554 <ILI9341_Draw_Image+0x54>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80025c0:	2201      	movs	r2, #1
 80025c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025c6:	4891      	ldr	r0, [pc, #580]	; (800280c <ILI9341_Draw_Image+0x30c>)
 80025c8:	f001 fa4e 	bl	8003a68 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 80025cc:	e118      	b.n	8002800 <ILI9341_Draw_Image+0x300>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 80025ce:	1cfb      	adds	r3, r7, #3
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d159      	bne.n	800268a <ILI9341_Draw_Image+0x18a>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80025d6:	2003      	movs	r0, #3
 80025d8:	f000 f9ec 	bl	80029b4 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 80025dc:	23f0      	movs	r3, #240	; 0xf0
 80025de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025e2:	2100      	movs	r1, #0
 80025e4:	2000      	movs	r0, #0
 80025e6:	f000 f97b 	bl	80028e0 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80025ea:	2201      	movs	r2, #1
 80025ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025f0:	4886      	ldr	r0, [pc, #536]	; (800280c <ILI9341_Draw_Image+0x30c>)
 80025f2:	f001 fa39 	bl	8003a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80025f6:	2200      	movs	r2, #0
 80025f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025fc:	4883      	ldr	r0, [pc, #524]	; (800280c <ILI9341_Draw_Image+0x30c>)
 80025fe:	f001 fa33 	bl	8003a68 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800260e:	e030      	b.n	8002672 <ILI9341_Draw_Image+0x172>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002610:	2300      	movs	r3, #0
 8002612:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002616:	e014      	b.n	8002642 <ILI9341_Draw_Image+0x142>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002618:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800261c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002620:	4413      	add	r3, r2
 8002622:	1d3a      	adds	r2, r7, #4
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	4413      	add	r3, r2
 8002628:	7819      	ldrb	r1, [r3, #0]
 800262a:	f107 020c 	add.w	r2, r7, #12
 800262e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002632:	4413      	add	r3, r2
 8002634:	460a      	mov	r2, r1
 8002636:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002638:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800263c:	3301      	adds	r3, #1
 800263e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002642:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002646:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800264a:	d3e5      	bcc.n	8002618 <ILI9341_Draw_Image+0x118>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 800264c:	f107 010c 	add.w	r1, r7, #12
 8002650:	230a      	movs	r3, #10
 8002652:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002656:	486e      	ldr	r0, [pc, #440]	; (8002810 <ILI9341_Draw_Image+0x310>)
 8002658:	f002 fc91 	bl	8004f7e <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 800265c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002660:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002664:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002668:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800266c:	3301      	adds	r3, #1
 800266e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002672:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002676:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800267a:	d9c9      	bls.n	8002610 <ILI9341_Draw_Image+0x110>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800267c:	2201      	movs	r2, #1
 800267e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002682:	4862      	ldr	r0, [pc, #392]	; (800280c <ILI9341_Draw_Image+0x30c>)
 8002684:	f001 f9f0 	bl	8003a68 <HAL_GPIO_WritePin>
}
 8002688:	e0ba      	b.n	8002800 <ILI9341_Draw_Image+0x300>
	else if(Orientation == SCREEN_VERTICAL_2)
 800268a:	1cfb      	adds	r3, r7, #3
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d159      	bne.n	8002746 <ILI9341_Draw_Image+0x246>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8002692:	2002      	movs	r0, #2
 8002694:	f000 f98e 	bl	80029b4 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8002698:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800269c:	22f0      	movs	r2, #240	; 0xf0
 800269e:	2100      	movs	r1, #0
 80026a0:	2000      	movs	r0, #0
 80026a2:	f000 f91d 	bl	80028e0 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80026a6:	2201      	movs	r2, #1
 80026a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ac:	4857      	ldr	r0, [pc, #348]	; (800280c <ILI9341_Draw_Image+0x30c>)
 80026ae:	f001 f9db 	bl	8003a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80026b2:	2200      	movs	r2, #0
 80026b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026b8:	4854      	ldr	r0, [pc, #336]	; (800280c <ILI9341_Draw_Image+0x30c>)
 80026ba:	f001 f9d5 	bl	8003a68 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80026ca:	e030      	b.n	800272e <ILI9341_Draw_Image+0x22e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80026d2:	e014      	b.n	80026fe <ILI9341_Draw_Image+0x1fe>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 80026d4:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80026d8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80026dc:	4413      	add	r3, r2
 80026de:	1d3a      	adds	r2, r7, #4
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	7819      	ldrb	r1, [r3, #0]
 80026e6:	f107 020c 	add.w	r2, r7, #12
 80026ea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80026ee:	4413      	add	r3, r2
 80026f0:	460a      	mov	r2, r1
 80026f2:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80026f4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80026f8:	3301      	adds	r3, #1
 80026fa:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80026fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002702:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002706:	d3e5      	bcc.n	80026d4 <ILI9341_Draw_Image+0x1d4>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002708:	f107 010c 	add.w	r1, r7, #12
 800270c:	230a      	movs	r3, #10
 800270e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002712:	483f      	ldr	r0, [pc, #252]	; (8002810 <ILI9341_Draw_Image+0x310>)
 8002714:	f002 fc33 	bl	8004f7e <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002718:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800271c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002720:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002724:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002728:	3301      	adds	r3, #1
 800272a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800272e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002732:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002736:	d9c9      	bls.n	80026cc <ILI9341_Draw_Image+0x1cc>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002738:	2201      	movs	r2, #1
 800273a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800273e:	4833      	ldr	r0, [pc, #204]	; (800280c <ILI9341_Draw_Image+0x30c>)
 8002740:	f001 f992 	bl	8003a68 <HAL_GPIO_WritePin>
}
 8002744:	e05c      	b.n	8002800 <ILI9341_Draw_Image+0x300>
	else if(Orientation == SCREEN_VERTICAL_1)
 8002746:	1cfb      	adds	r3, r7, #3
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d158      	bne.n	8002800 <ILI9341_Draw_Image+0x300>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800274e:	2000      	movs	r0, #0
 8002750:	f000 f930 	bl	80029b4 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8002754:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002758:	22f0      	movs	r2, #240	; 0xf0
 800275a:	2100      	movs	r1, #0
 800275c:	2000      	movs	r0, #0
 800275e:	f000 f8bf 	bl	80028e0 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002762:	2201      	movs	r2, #1
 8002764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002768:	4828      	ldr	r0, [pc, #160]	; (800280c <ILI9341_Draw_Image+0x30c>)
 800276a:	f001 f97d 	bl	8003a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800276e:	2200      	movs	r2, #0
 8002770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002774:	4825      	ldr	r0, [pc, #148]	; (800280c <ILI9341_Draw_Image+0x30c>)
 8002776:	f001 f977 	bl	8003a68 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002786:	e030      	b.n	80027ea <ILI9341_Draw_Image+0x2ea>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 800278e:	e014      	b.n	80027ba <ILI9341_Draw_Image+0x2ba>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002790:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8002794:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002798:	4413      	add	r3, r2
 800279a:	1d3a      	adds	r2, r7, #4
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	7819      	ldrb	r1, [r3, #0]
 80027a2:	f107 020c 	add.w	r2, r7, #12
 80027a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027aa:	4413      	add	r3, r2
 80027ac:	460a      	mov	r2, r1
 80027ae:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80027b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027b4:	3301      	adds	r3, #1
 80027b6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80027ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027c2:	d3e5      	bcc.n	8002790 <ILI9341_Draw_Image+0x290>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 80027c4:	f107 010c 	add.w	r1, r7, #12
 80027c8:	230a      	movs	r3, #10
 80027ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80027ce:	4810      	ldr	r0, [pc, #64]	; (8002810 <ILI9341_Draw_Image+0x310>)
 80027d0:	f002 fbd5 	bl	8004f7e <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 80027d4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80027d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80027dc:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80027e0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80027e4:	3301      	adds	r3, #1
 80027e6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80027ea:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80027ee:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80027f2:	d9c9      	bls.n	8002788 <ILI9341_Draw_Image+0x288>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80027f4:	2201      	movs	r2, #1
 80027f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027fa:	4804      	ldr	r0, [pc, #16]	; (800280c <ILI9341_Draw_Image+0x30c>)
 80027fc:	f001 f934 	bl	8003a68 <HAL_GPIO_WritePin>
}
 8002800:	bf00      	nop
 8002802:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40020800 	.word	0x40020800
 8002810:	2000021c 	.word	0x2000021c

08002814 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8002818:	f7ff f8d0 	bl	80019bc <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 800281c:	f7fd fee4 	bl	80005e8 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002820:	2200      	movs	r2, #0
 8002822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002826:	4802      	ldr	r0, [pc, #8]	; (8002830 <ILI9341_SPI_Init+0x1c>)
 8002828:	f001 f91e 	bl	8003a68 <HAL_GPIO_WritePin>
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40020800 	.word	0x40020800

08002834 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800283e:	1df9      	adds	r1, r7, #7
 8002840:	2301      	movs	r3, #1
 8002842:	2201      	movs	r2, #1
 8002844:	4803      	ldr	r0, [pc, #12]	; (8002854 <ILI9341_SPI_Send+0x20>)
 8002846:	f002 fb9a 	bl	8004f7e <HAL_SPI_Transmit>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000021c 	.word	0x2000021c

08002858 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002862:	2200      	movs	r2, #0
 8002864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002868:	480b      	ldr	r0, [pc, #44]	; (8002898 <ILI9341_Write_Command+0x40>)
 800286a:	f001 f8fd 	bl	8003a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800286e:	2200      	movs	r2, #0
 8002870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002874:	4808      	ldr	r0, [pc, #32]	; (8002898 <ILI9341_Write_Command+0x40>)
 8002876:	f001 f8f7 	bl	8003a68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ffd9 	bl	8002834 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002882:	2201      	movs	r2, #1
 8002884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002888:	4803      	ldr	r0, [pc, #12]	; (8002898 <ILI9341_Write_Command+0x40>)
 800288a:	f001 f8ed 	bl	8003a68 <HAL_GPIO_WritePin>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40020800 	.word	0x40020800

0800289c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80028a6:	2201      	movs	r2, #1
 80028a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028ac:	480b      	ldr	r0, [pc, #44]	; (80028dc <ILI9341_Write_Data+0x40>)
 80028ae:	f001 f8db 	bl	8003a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80028b2:	2200      	movs	r2, #0
 80028b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028b8:	4808      	ldr	r0, [pc, #32]	; (80028dc <ILI9341_Write_Data+0x40>)
 80028ba:	f001 f8d5 	bl	8003a68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ffb7 	bl	8002834 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80028c6:	2201      	movs	r2, #1
 80028c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028cc:	4803      	ldr	r0, [pc, #12]	; (80028dc <ILI9341_Write_Data+0x40>)
 80028ce:	f001 f8cb 	bl	8003a68 <HAL_GPIO_WritePin>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40020800 	.word	0x40020800

080028e0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4604      	mov	r4, r0
 80028e8:	4608      	mov	r0, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	461a      	mov	r2, r3
 80028ee:	4623      	mov	r3, r4
 80028f0:	80fb      	strh	r3, [r7, #6]
 80028f2:	4603      	mov	r3, r0
 80028f4:	80bb      	strh	r3, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	807b      	strh	r3, [r7, #2]
 80028fa:	4613      	mov	r3, r2
 80028fc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80028fe:	202a      	movs	r0, #42	; 0x2a
 8002900:	f7ff ffaa 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	b29b      	uxth	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ffc5 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ffc0 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800291c:	887b      	ldrh	r3, [r7, #2]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	b29b      	uxth	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ffb9 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff ffb4 	bl	800289c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002934:	202b      	movs	r0, #43	; 0x2b
 8002936:	f7ff ff8f 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800293a:	88bb      	ldrh	r3, [r7, #4]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	b29b      	uxth	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff ffaa 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002948:	88bb      	ldrh	r3, [r7, #4]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ffa5 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002952:	883b      	ldrh	r3, [r7, #0]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	b29b      	uxth	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff9e 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002960:	883b      	ldrh	r3, [r7, #0]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff99 	bl	800289c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800296a:	202c      	movs	r0, #44	; 0x2c
 800296c:	f7ff ff74 	bl	8002858 <ILI9341_Write_Command>
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bd90      	pop	{r4, r7, pc}

08002978 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800297c:	2201      	movs	r2, #1
 800297e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002982:	480b      	ldr	r0, [pc, #44]	; (80029b0 <ILI9341_Reset+0x38>)
 8002984:	f001 f870 	bl	8003a68 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002988:	20c8      	movs	r0, #200	; 0xc8
 800298a:	f000 fd9f 	bl	80034cc <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800298e:	2200      	movs	r2, #0
 8002990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002994:	4806      	ldr	r0, [pc, #24]	; (80029b0 <ILI9341_Reset+0x38>)
 8002996:	f001 f867 	bl	8003a68 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800299a:	20c8      	movs	r0, #200	; 0xc8
 800299c:	f000 fd96 	bl	80034cc <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80029a0:	2201      	movs	r2, #1
 80029a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029a6:	4802      	ldr	r0, [pc, #8]	; (80029b0 <ILI9341_Reset+0x38>)
 80029a8:	f001 f85e 	bl	8003a68 <HAL_GPIO_WritePin>
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40020800 	.word	0x40020800

080029b4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80029c2:	2036      	movs	r0, #54	; 0x36
 80029c4:	f7ff ff48 	bl	8002858 <ILI9341_Write_Command>
HAL_Delay(1);
 80029c8:	2001      	movs	r0, #1
 80029ca:	f000 fd7f 	bl	80034cc <HAL_Delay>
	
switch(screen_rotation) 
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d837      	bhi.n	8002a44 <ILI9341_Set_Rotation+0x90>
 80029d4:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <ILI9341_Set_Rotation+0x28>)
 80029d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029da:	bf00      	nop
 80029dc:	080029ed 	.word	0x080029ed
 80029e0:	08002a03 	.word	0x08002a03
 80029e4:	08002a19 	.word	0x08002a19
 80029e8:	08002a2f 	.word	0x08002a2f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80029ec:	2048      	movs	r0, #72	; 0x48
 80029ee:	f7ff ff55 	bl	800289c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80029f2:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <ILI9341_Set_Rotation+0x9c>)
 80029f4:	22f0      	movs	r2, #240	; 0xf0
 80029f6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <ILI9341_Set_Rotation+0xa0>)
 80029fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80029fe:	801a      	strh	r2, [r3, #0]
			break;
 8002a00:	e021      	b.n	8002a46 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002a02:	2028      	movs	r0, #40	; 0x28
 8002a04:	f7ff ff4a 	bl	800289c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <ILI9341_Set_Rotation+0x9c>)
 8002a0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a0e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <ILI9341_Set_Rotation+0xa0>)
 8002a12:	22f0      	movs	r2, #240	; 0xf0
 8002a14:	801a      	strh	r2, [r3, #0]
			break;
 8002a16:	e016      	b.n	8002a46 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002a18:	2088      	movs	r0, #136	; 0x88
 8002a1a:	f7ff ff3f 	bl	800289c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <ILI9341_Set_Rotation+0x9c>)
 8002a20:	22f0      	movs	r2, #240	; 0xf0
 8002a22:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <ILI9341_Set_Rotation+0xa0>)
 8002a26:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a2a:	801a      	strh	r2, [r3, #0]
			break;
 8002a2c:	e00b      	b.n	8002a46 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002a2e:	20e8      	movs	r0, #232	; 0xe8
 8002a30:	f7ff ff34 	bl	800289c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <ILI9341_Set_Rotation+0x9c>)
 8002a36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a3a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <ILI9341_Set_Rotation+0xa0>)
 8002a3e:	22f0      	movs	r2, #240	; 0xf0
 8002a40:	801a      	strh	r2, [r3, #0]
			break;
 8002a42:	e000      	b.n	8002a46 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002a44:	bf00      	nop
	}
}
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000006 	.word	0x20000006
 8002a54:	20000004 	.word	0x20000004

08002a58 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a62:	4802      	ldr	r0, [pc, #8]	; (8002a6c <ILI9341_Enable+0x14>)
 8002a64:	f001 f800 	bl	8003a68 <HAL_GPIO_WritePin>
}
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40020800 	.word	0x40020800

08002a70 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002a74:	f7ff fff0 	bl	8002a58 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002a78:	f7ff fecc 	bl	8002814 <ILI9341_SPI_Init>
ILI9341_Reset();
 8002a7c:	f7ff ff7c 	bl	8002978 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002a80:	2001      	movs	r0, #1
 8002a82:	f7ff fee9 	bl	8002858 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a8a:	f000 fd1f 	bl	80034cc <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002a8e:	20cb      	movs	r0, #203	; 0xcb
 8002a90:	f7ff fee2 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002a94:	2039      	movs	r0, #57	; 0x39
 8002a96:	f7ff ff01 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002a9a:	202c      	movs	r0, #44	; 0x2c
 8002a9c:	f7ff fefe 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7ff fefb 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002aa6:	2034      	movs	r0, #52	; 0x34
 8002aa8:	f7ff fef8 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002aac:	2002      	movs	r0, #2
 8002aae:	f7ff fef5 	bl	800289c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002ab2:	20cf      	movs	r0, #207	; 0xcf
 8002ab4:	f7ff fed0 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f7ff feef 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002abe:	20c1      	movs	r0, #193	; 0xc1
 8002ac0:	f7ff feec 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002ac4:	2030      	movs	r0, #48	; 0x30
 8002ac6:	f7ff fee9 	bl	800289c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002aca:	20e8      	movs	r0, #232	; 0xe8
 8002acc:	f7ff fec4 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002ad0:	2085      	movs	r0, #133	; 0x85
 8002ad2:	f7ff fee3 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7ff fee0 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002adc:	2078      	movs	r0, #120	; 0x78
 8002ade:	f7ff fedd 	bl	800289c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002ae2:	20ea      	movs	r0, #234	; 0xea
 8002ae4:	f7ff feb8 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7ff fed7 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7ff fed4 	bl	800289c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002af4:	20ed      	movs	r0, #237	; 0xed
 8002af6:	f7ff feaf 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002afa:	2064      	movs	r0, #100	; 0x64
 8002afc:	f7ff fece 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002b00:	2003      	movs	r0, #3
 8002b02:	f7ff fecb 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002b06:	2012      	movs	r0, #18
 8002b08:	f7ff fec8 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002b0c:	2081      	movs	r0, #129	; 0x81
 8002b0e:	f7ff fec5 	bl	800289c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002b12:	20f7      	movs	r0, #247	; 0xf7
 8002b14:	f7ff fea0 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002b18:	2020      	movs	r0, #32
 8002b1a:	f7ff febf 	bl	800289c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002b1e:	20c0      	movs	r0, #192	; 0xc0
 8002b20:	f7ff fe9a 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002b24:	2023      	movs	r0, #35	; 0x23
 8002b26:	f7ff feb9 	bl	800289c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002b2a:	20c1      	movs	r0, #193	; 0xc1
 8002b2c:	f7ff fe94 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002b30:	2010      	movs	r0, #16
 8002b32:	f7ff feb3 	bl	800289c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002b36:	20c5      	movs	r0, #197	; 0xc5
 8002b38:	f7ff fe8e 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002b3c:	203e      	movs	r0, #62	; 0x3e
 8002b3e:	f7ff fead 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002b42:	2028      	movs	r0, #40	; 0x28
 8002b44:	f7ff feaa 	bl	800289c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002b48:	20c7      	movs	r0, #199	; 0xc7
 8002b4a:	f7ff fe85 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002b4e:	2086      	movs	r0, #134	; 0x86
 8002b50:	f7ff fea4 	bl	800289c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002b54:	2036      	movs	r0, #54	; 0x36
 8002b56:	f7ff fe7f 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002b5a:	2048      	movs	r0, #72	; 0x48
 8002b5c:	f7ff fe9e 	bl	800289c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002b60:	203a      	movs	r0, #58	; 0x3a
 8002b62:	f7ff fe79 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002b66:	2055      	movs	r0, #85	; 0x55
 8002b68:	f7ff fe98 	bl	800289c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002b6c:	20b1      	movs	r0, #177	; 0xb1
 8002b6e:	f7ff fe73 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7ff fe92 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002b78:	2018      	movs	r0, #24
 8002b7a:	f7ff fe8f 	bl	800289c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002b7e:	20b6      	movs	r0, #182	; 0xb6
 8002b80:	f7ff fe6a 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002b84:	2008      	movs	r0, #8
 8002b86:	f7ff fe89 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002b8a:	2082      	movs	r0, #130	; 0x82
 8002b8c:	f7ff fe86 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002b90:	2027      	movs	r0, #39	; 0x27
 8002b92:	f7ff fe83 	bl	800289c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002b96:	20f2      	movs	r0, #242	; 0xf2
 8002b98:	f7ff fe5e 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7ff fe7d 	bl	800289c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002ba2:	2026      	movs	r0, #38	; 0x26
 8002ba4:	f7ff fe58 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002ba8:	2001      	movs	r0, #1
 8002baa:	f7ff fe77 	bl	800289c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002bae:	20e0      	movs	r0, #224	; 0xe0
 8002bb0:	f7ff fe52 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002bb4:	200f      	movs	r0, #15
 8002bb6:	f7ff fe71 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002bba:	2031      	movs	r0, #49	; 0x31
 8002bbc:	f7ff fe6e 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002bc0:	202b      	movs	r0, #43	; 0x2b
 8002bc2:	f7ff fe6b 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002bc6:	200c      	movs	r0, #12
 8002bc8:	f7ff fe68 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002bcc:	200e      	movs	r0, #14
 8002bce:	f7ff fe65 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002bd2:	2008      	movs	r0, #8
 8002bd4:	f7ff fe62 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002bd8:	204e      	movs	r0, #78	; 0x4e
 8002bda:	f7ff fe5f 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002bde:	20f1      	movs	r0, #241	; 0xf1
 8002be0:	f7ff fe5c 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002be4:	2037      	movs	r0, #55	; 0x37
 8002be6:	f7ff fe59 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002bea:	2007      	movs	r0, #7
 8002bec:	f7ff fe56 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002bf0:	2010      	movs	r0, #16
 8002bf2:	f7ff fe53 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002bf6:	2003      	movs	r0, #3
 8002bf8:	f7ff fe50 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002bfc:	200e      	movs	r0, #14
 8002bfe:	f7ff fe4d 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002c02:	2009      	movs	r0, #9
 8002c04:	f7ff fe4a 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7ff fe47 	bl	800289c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002c0e:	20e1      	movs	r0, #225	; 0xe1
 8002c10:	f7ff fe22 	bl	8002858 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7ff fe41 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c1a:	200e      	movs	r0, #14
 8002c1c:	f7ff fe3e 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002c20:	2014      	movs	r0, #20
 8002c22:	f7ff fe3b 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002c26:	2003      	movs	r0, #3
 8002c28:	f7ff fe38 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002c2c:	2011      	movs	r0, #17
 8002c2e:	f7ff fe35 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002c32:	2007      	movs	r0, #7
 8002c34:	f7ff fe32 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002c38:	2031      	movs	r0, #49	; 0x31
 8002c3a:	f7ff fe2f 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002c3e:	20c1      	movs	r0, #193	; 0xc1
 8002c40:	f7ff fe2c 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002c44:	2048      	movs	r0, #72	; 0x48
 8002c46:	f7ff fe29 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002c4a:	2008      	movs	r0, #8
 8002c4c:	f7ff fe26 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002c50:	200f      	movs	r0, #15
 8002c52:	f7ff fe23 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002c56:	200c      	movs	r0, #12
 8002c58:	f7ff fe20 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002c5c:	2031      	movs	r0, #49	; 0x31
 8002c5e:	f7ff fe1d 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002c62:	2036      	movs	r0, #54	; 0x36
 8002c64:	f7ff fe1a 	bl	800289c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002c68:	200f      	movs	r0, #15
 8002c6a:	f7ff fe17 	bl	800289c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002c6e:	2011      	movs	r0, #17
 8002c70:	f7ff fdf2 	bl	8002858 <ILI9341_Write_Command>
HAL_Delay(120);
 8002c74:	2078      	movs	r0, #120	; 0x78
 8002c76:	f000 fc29 	bl	80034cc <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002c7a:	2029      	movs	r0, #41	; 0x29
 8002c7c:	f7ff fdec 	bl	8002858 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7ff fe97 	bl	80029b4 <ILI9341_Set_Rotation>
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002c8c:	b5b0      	push	{r4, r5, r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	6039      	str	r1, [r7, #0]
 8002c96:	80fb      	strh	r3, [r7, #6]
 8002c98:	466b      	mov	r3, sp
 8002c9a:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ca8:	d202      	bcs.n	8002cb0 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
 8002cae:	e002      	b.n	8002cb6 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002cb0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cbc:	483e      	ldr	r0, [pc, #248]	; (8002db8 <ILI9341_Draw_Colour_Burst+0x12c>)
 8002cbe:	f000 fed3 	bl	8003a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cc8:	483b      	ldr	r0, [pc, #236]	; (8002db8 <ILI9341_Draw_Colour_Burst+0x12c>)
 8002cca:	f000 fecd 	bl	8003a68 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002cd8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002cda:	4623      	mov	r3, r4
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f04f 0100 	mov.w	r1, #0
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	00cb      	lsls	r3, r1, #3
 8002cf0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002cf4:	00c2      	lsls	r2, r0, #3
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	00cb      	lsls	r3, r1, #3
 8002d06:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d0a:	00c2      	lsls	r2, r0, #3
 8002d0c:	1de3      	adds	r3, r4, #7
 8002d0e:	08db      	lsrs	r3, r3, #3
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	ebad 0d03 	sub.w	sp, sp, r3
 8002d16:	466b      	mov	r3, sp
 8002d18:	3300      	adds	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d20:	e00e      	b.n	8002d40 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	4413      	add	r3, r2
 8002d28:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d2c:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	3301      	adds	r3, #1
 8002d32:	88fa      	ldrh	r2, [r7, #6]
 8002d34:	b2d1      	uxtb	r1, r2
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d3ec      	bcc.n	8002d22 <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d56:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d62:	fb01 f202 	mul.w	r2, r1, r2
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d010      	beq.n	8002d92 <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d74:	e009      	b.n	8002d8a <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002d76:	69b9      	ldr	r1, [r7, #24]
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	230a      	movs	r3, #10
 8002d7e:	480f      	ldr	r0, [pc, #60]	; (8002dbc <ILI9341_Draw_Colour_Burst+0x130>)
 8002d80:	f002 f8fd 	bl	8004f7e <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	3301      	adds	r3, #1
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d3f1      	bcc.n	8002d76 <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002d92:	69b9      	ldr	r1, [r7, #24]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	230a      	movs	r3, #10
 8002d9a:	4808      	ldr	r0, [pc, #32]	; (8002dbc <ILI9341_Draw_Colour_Burst+0x130>)
 8002d9c:	f002 f8ef 	bl	8004f7e <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002da0:	2201      	movs	r2, #1
 8002da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002da6:	4804      	ldr	r0, [pc, #16]	; (8002db8 <ILI9341_Draw_Colour_Burst+0x12c>)
 8002da8:	f000 fe5e 	bl	8003a68 <HAL_GPIO_WritePin>
 8002dac:	46ad      	mov	sp, r5
}
 8002dae:	bf00      	nop
 8002db0:	3730      	adds	r7, #48	; 0x30
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bdb0      	pop	{r4, r5, r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40020800 	.word	0x40020800
 8002dbc:	2000021c 	.word	0x2000021c

08002dc0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <ILI9341_Fill_Screen+0x44>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <ILI9341_Fill_Screen+0x48>)
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7ff fd81 	bl	80028e0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <ILI9341_Fill_Screen+0x44>)
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <ILI9341_Fill_Screen+0x48>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	fb03 f302 	mul.w	r3, r3, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ff48 	bl	8002c8c <ILI9341_Draw_Colour_Burst>
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000006 	.word	0x20000006
 8002e08:	20000004 	.word	0x20000004

08002e0c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	80fb      	strh	r3, [r7, #6]
 8002e16:	460b      	mov	r3, r1
 8002e18:	80bb      	strh	r3, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002e1e:	4b64      	ldr	r3, [pc, #400]	; (8002fb0 <ILI9341_Draw_Pixel+0x1a4>)
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	88fa      	ldrh	r2, [r7, #6]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	f080 80be 	bcs.w	8002fa8 <ILI9341_Draw_Pixel+0x19c>
 8002e2c:	4b61      	ldr	r3, [pc, #388]	; (8002fb4 <ILI9341_Draw_Pixel+0x1a8>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	88ba      	ldrh	r2, [r7, #4]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	f080 80b7 	bcs.w	8002fa8 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e40:	485d      	ldr	r0, [pc, #372]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002e42:	f000 fe11 	bl	8003a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e46:	2200      	movs	r2, #0
 8002e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e4c:	485a      	ldr	r0, [pc, #360]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002e4e:	f000 fe0b 	bl	8003a68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002e52:	202a      	movs	r0, #42	; 0x2a
 8002e54:	f7ff fcee 	bl	8002834 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e5e:	4856      	ldr	r0, [pc, #344]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002e60:	f000 fe02 	bl	8003a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002e64:	2201      	movs	r2, #1
 8002e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e6a:	4853      	ldr	r0, [pc, #332]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002e6c:	f000 fdfc 	bl	8003a68 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002e70:	2200      	movs	r2, #0
 8002e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e76:	4850      	ldr	r0, [pc, #320]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002e78:	f000 fdf6 	bl	8003a68 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	753b      	strb	r3, [r7, #20]
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	757b      	strb	r3, [r7, #21]
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	121b      	asrs	r3, r3, #8
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	75bb      	strb	r3, [r7, #22]
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002ea0:	f107 0114 	add.w	r1, r7, #20
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	4844      	ldr	r0, [pc, #272]	; (8002fbc <ILI9341_Draw_Pixel+0x1b0>)
 8002eaa:	f002 f868 	bl	8004f7e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eb4:	4840      	ldr	r0, [pc, #256]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002eb6:	f000 fdd7 	bl	8003a68 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ec0:	483d      	ldr	r0, [pc, #244]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002ec2:	f000 fdd1 	bl	8003a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ecc:	483a      	ldr	r0, [pc, #232]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002ece:	f000 fdcb 	bl	8003a68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002ed2:	202b      	movs	r0, #43	; 0x2b
 8002ed4:	f7ff fcae 	bl	8002834 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ede:	4836      	ldr	r0, [pc, #216]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002ee0:	f000 fdc2 	bl	8003a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eea:	4833      	ldr	r0, [pc, #204]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002eec:	f000 fdbc 	bl	8003a68 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ef6:	4830      	ldr	r0, [pc, #192]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002ef8:	f000 fdb6 	bl	8003a68 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002efc:	88bb      	ldrh	r3, [r7, #4]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	743b      	strb	r3, [r7, #16]
 8002f06:	88bb      	ldrh	r3, [r7, #4]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	747b      	strb	r3, [r7, #17]
 8002f0c:	88bb      	ldrh	r3, [r7, #4]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	121b      	asrs	r3, r3, #8
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	74bb      	strb	r3, [r7, #18]
 8002f16:	88bb      	ldrh	r3, [r7, #4]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002f20:	f107 0110 	add.w	r1, r7, #16
 8002f24:	2301      	movs	r3, #1
 8002f26:	2204      	movs	r2, #4
 8002f28:	4824      	ldr	r0, [pc, #144]	; (8002fbc <ILI9341_Draw_Pixel+0x1b0>)
 8002f2a:	f002 f828 	bl	8004f7e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f34:	4820      	ldr	r0, [pc, #128]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002f36:	f000 fd97 	bl	8003a68 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f40:	481d      	ldr	r0, [pc, #116]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002f42:	f000 fd91 	bl	8003a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002f46:	2200      	movs	r2, #0
 8002f48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f4c:	481a      	ldr	r0, [pc, #104]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002f4e:	f000 fd8b 	bl	8003a68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002f52:	202c      	movs	r0, #44	; 0x2c
 8002f54:	f7ff fc6e 	bl	8002834 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f5e:	4816      	ldr	r0, [pc, #88]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002f60:	f000 fd82 	bl	8003a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002f64:	2201      	movs	r2, #1
 8002f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f6a:	4813      	ldr	r0, [pc, #76]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002f6c:	f000 fd7c 	bl	8003a68 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f70:	2200      	movs	r2, #0
 8002f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f76:	4810      	ldr	r0, [pc, #64]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002f78:	f000 fd76 	bl	8003a68 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	733b      	strb	r3, [r7, #12]
 8002f86:	887b      	ldrh	r3, [r7, #2]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002f8c:	f107 010c 	add.w	r1, r7, #12
 8002f90:	2301      	movs	r3, #1
 8002f92:	2202      	movs	r2, #2
 8002f94:	4809      	ldr	r0, [pc, #36]	; (8002fbc <ILI9341_Draw_Pixel+0x1b0>)
 8002f96:	f001 fff2 	bl	8004f7e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fa0:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <ILI9341_Draw_Pixel+0x1ac>)
 8002fa2:	f000 fd61 	bl	8003a68 <HAL_GPIO_WritePin>
 8002fa6:	e000      	b.n	8002faa <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002fa8:	bf00      	nop
	
}
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000006 	.word	0x20000006
 8002fb4:	20000004 	.word	0x20000004
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	2000021c 	.word	0x2000021c

08002fc0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	4608      	mov	r0, r1
 8002fca:	4611      	mov	r1, r2
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4623      	mov	r3, r4
 8002fd0:	80fb      	strh	r3, [r7, #6]
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	80bb      	strh	r3, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	807b      	strh	r3, [r7, #2]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002fde:	4b24      	ldr	r3, [pc, #144]	; (8003070 <ILI9341_Draw_Rectangle+0xb0>)
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	88fa      	ldrh	r2, [r7, #6]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d23d      	bcs.n	8003066 <ILI9341_Draw_Rectangle+0xa6>
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <ILI9341_Draw_Rectangle+0xb4>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	88ba      	ldrh	r2, [r7, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d237      	bcs.n	8003066 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002ff6:	88fa      	ldrh	r2, [r7, #6]
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <ILI9341_Draw_Rectangle+0xb0>)
 8002ffe:	8812      	ldrh	r2, [r2, #0]
 8003000:	b292      	uxth	r2, r2
 8003002:	4293      	cmp	r3, r2
 8003004:	dd05      	ble.n	8003012 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <ILI9341_Draw_Rectangle+0xb0>)
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	b29a      	uxth	r2, r3
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8003012:	88ba      	ldrh	r2, [r7, #4]
 8003014:	883b      	ldrh	r3, [r7, #0]
 8003016:	4413      	add	r3, r2
 8003018:	4a16      	ldr	r2, [pc, #88]	; (8003074 <ILI9341_Draw_Rectangle+0xb4>)
 800301a:	8812      	ldrh	r2, [r2, #0]
 800301c:	b292      	uxth	r2, r2
 800301e:	4293      	cmp	r3, r2
 8003020:	dd05      	ble.n	800302e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <ILI9341_Draw_Rectangle+0xb4>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29a      	uxth	r2, r3
 8003028:	88bb      	ldrh	r3, [r7, #4]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800302e:	88fa      	ldrh	r2, [r7, #6]
 8003030:	887b      	ldrh	r3, [r7, #2]
 8003032:	4413      	add	r3, r2
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29c      	uxth	r4, r3
 800303a:	88ba      	ldrh	r2, [r7, #4]
 800303c:	883b      	ldrh	r3, [r7, #0]
 800303e:	4413      	add	r3, r2
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29b      	uxth	r3, r3
 8003046:	88b9      	ldrh	r1, [r7, #4]
 8003048:	88f8      	ldrh	r0, [r7, #6]
 800304a:	4622      	mov	r2, r4
 800304c:	f7ff fc48 	bl	80028e0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8003050:	883b      	ldrh	r3, [r7, #0]
 8003052:	887a      	ldrh	r2, [r7, #2]
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	461a      	mov	r2, r3
 800305a:	8b3b      	ldrh	r3, [r7, #24]
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fe14 	bl	8002c8c <ILI9341_Draw_Colour_Burst>
 8003064:	e000      	b.n	8003068 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003066:	bf00      	nop
}
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bd90      	pop	{r4, r7, pc}
 800306e:	bf00      	nop
 8003070:	20000006 	.word	0x20000006
 8003074:	20000004 	.word	0x20000004

08003078 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4604      	mov	r4, r0
 8003080:	4608      	mov	r0, r1
 8003082:	4611      	mov	r1, r2
 8003084:	461a      	mov	r2, r3
 8003086:	4623      	mov	r3, r4
 8003088:	80fb      	strh	r3, [r7, #6]
 800308a:	4603      	mov	r3, r0
 800308c:	80bb      	strh	r3, [r7, #4]
 800308e:	460b      	mov	r3, r1
 8003090:	807b      	strh	r3, [r7, #2]
 8003092:	4613      	mov	r3, r2
 8003094:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003096:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <ILI9341_Draw_Horizontal_Line+0x80>)
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	b29b      	uxth	r3, r3
 800309c:	88fa      	ldrh	r2, [r7, #6]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d225      	bcs.n	80030ee <ILI9341_Draw_Horizontal_Line+0x76>
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <ILI9341_Draw_Horizontal_Line+0x84>)
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	88ba      	ldrh	r2, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d21f      	bcs.n	80030ee <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	887b      	ldrh	r3, [r7, #2]
 80030b2:	4413      	add	r3, r2
 80030b4:	4a10      	ldr	r2, [pc, #64]	; (80030f8 <ILI9341_Draw_Horizontal_Line+0x80>)
 80030b6:	8812      	ldrh	r2, [r2, #0]
 80030b8:	b292      	uxth	r2, r2
 80030ba:	4293      	cmp	r3, r2
 80030bc:	dd05      	ble.n	80030ca <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <ILI9341_Draw_Horizontal_Line+0x80>)
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	887b      	ldrh	r3, [r7, #2]
 80030ce:	4413      	add	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	88bb      	ldrh	r3, [r7, #4]
 80030d8:	88b9      	ldrh	r1, [r7, #4]
 80030da:	88f8      	ldrh	r0, [r7, #6]
 80030dc:	f7ff fc00 	bl	80028e0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 80030e0:	887a      	ldrh	r2, [r7, #2]
 80030e2:	883b      	ldrh	r3, [r7, #0]
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fdd0 	bl	8002c8c <ILI9341_Draw_Colour_Burst>
 80030ec:	e000      	b.n	80030f0 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80030ee:	bf00      	nop
}
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd90      	pop	{r4, r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000006 	.word	0x20000006
 80030fc:	20000004 	.word	0x20000004

08003100 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4604      	mov	r4, r0
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	461a      	mov	r2, r3
 800310e:	4623      	mov	r3, r4
 8003110:	80fb      	strh	r3, [r7, #6]
 8003112:	4603      	mov	r3, r0
 8003114:	80bb      	strh	r3, [r7, #4]
 8003116:	460b      	mov	r3, r1
 8003118:	807b      	strh	r3, [r7, #2]
 800311a:	4613      	mov	r3, r2
 800311c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800311e:	4b18      	ldr	r3, [pc, #96]	; (8003180 <ILI9341_Draw_Vertical_Line+0x80>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	88fa      	ldrh	r2, [r7, #6]
 8003126:	429a      	cmp	r2, r3
 8003128:	d225      	bcs.n	8003176 <ILI9341_Draw_Vertical_Line+0x76>
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <ILI9341_Draw_Vertical_Line+0x84>)
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	b29b      	uxth	r3, r3
 8003130:	88ba      	ldrh	r2, [r7, #4]
 8003132:	429a      	cmp	r2, r3
 8003134:	d21f      	bcs.n	8003176 <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 8003136:	88ba      	ldrh	r2, [r7, #4]
 8003138:	887b      	ldrh	r3, [r7, #2]
 800313a:	4413      	add	r3, r2
 800313c:	4a11      	ldr	r2, [pc, #68]	; (8003184 <ILI9341_Draw_Vertical_Line+0x84>)
 800313e:	8812      	ldrh	r2, [r2, #0]
 8003140:	b292      	uxth	r2, r2
 8003142:	4293      	cmp	r3, r2
 8003144:	dd05      	ble.n	8003152 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 8003146:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <ILI9341_Draw_Vertical_Line+0x84>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29a      	uxth	r2, r3
 800314c:	88bb      	ldrh	r3, [r7, #4]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 8003152:	88ba      	ldrh	r2, [r7, #4]
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	4413      	add	r3, r2
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29b      	uxth	r3, r3
 800315e:	88fa      	ldrh	r2, [r7, #6]
 8003160:	88b9      	ldrh	r1, [r7, #4]
 8003162:	88f8      	ldrh	r0, [r7, #6]
 8003164:	f7ff fbbc 	bl	80028e0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 8003168:	887a      	ldrh	r2, [r7, #2]
 800316a:	883b      	ldrh	r3, [r7, #0]
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fd8c 	bl	8002c8c <ILI9341_Draw_Colour_Burst>
 8003174:	e000      	b.n	8003178 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003176:	bf00      	nop
}
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	bf00      	nop
 8003180:	20000006 	.word	0x20000006
 8003184:	20000004 	.word	0x20000004

08003188 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 800318e:	2310      	movs	r3, #16
 8003190:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8003196:	e019      	b.n	80031cc <TP_Read+0x44>
    {
        value <<= 1;
 8003198:	88bb      	ldrh	r3, [r7, #4]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800319e:	2201      	movs	r2, #1
 80031a0:	2108      	movs	r1, #8
 80031a2:	480e      	ldr	r0, [pc, #56]	; (80031dc <TP_Read+0x54>)
 80031a4:	f000 fc60 	bl	8003a68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80031a8:	2200      	movs	r2, #0
 80031aa:	2108      	movs	r1, #8
 80031ac:	480b      	ldr	r0, [pc, #44]	; (80031dc <TP_Read+0x54>)
 80031ae:	f000 fc5b 	bl	8003a68 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 80031b2:	2110      	movs	r1, #16
 80031b4:	4809      	ldr	r0, [pc, #36]	; (80031dc <TP_Read+0x54>)
 80031b6:	f000 fc3f 	bl	8003a38 <HAL_GPIO_ReadPin>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <TP_Read+0x3e>
        {
            value++;
 80031c0:	88bb      	ldrh	r3, [r7, #4]
 80031c2:	3301      	adds	r3, #1
 80031c4:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1e2      	bne.n	8003198 <TP_Read+0x10>
    };

    return value;
 80031d2:	88bb      	ldrh	r3, [r7, #4]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000

080031e0 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 80031ea:	2308      	movs	r3, #8
 80031ec:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 80031ee:	2200      	movs	r2, #0
 80031f0:	2108      	movs	r1, #8
 80031f2:	4815      	ldr	r0, [pc, #84]	; (8003248 <TP_Write+0x68>)
 80031f4:	f000 fc38 	bl	8003a68 <HAL_GPIO_WritePin>
	
    while(i > 0)
 80031f8:	e01e      	b.n	8003238 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	da05      	bge.n	800320e <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8003202:	2201      	movs	r2, #1
 8003204:	2120      	movs	r1, #32
 8003206:	4810      	ldr	r0, [pc, #64]	; (8003248 <TP_Write+0x68>)
 8003208:	f000 fc2e 	bl	8003a68 <HAL_GPIO_WritePin>
 800320c:	e004      	b.n	8003218 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 800320e:	2200      	movs	r2, #0
 8003210:	2120      	movs	r1, #32
 8003212:	480d      	ldr	r0, [pc, #52]	; (8003248 <TP_Write+0x68>)
 8003214:	f000 fc28 	bl	8003a68 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800321e:	2201      	movs	r2, #1
 8003220:	2108      	movs	r1, #8
 8003222:	4809      	ldr	r0, [pc, #36]	; (8003248 <TP_Write+0x68>)
 8003224:	f000 fc20 	bl	8003a68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8003228:	2200      	movs	r2, #0
 800322a:	2108      	movs	r1, #8
 800322c:	4806      	ldr	r0, [pc, #24]	; (8003248 <TP_Write+0x68>)
 800322e:	f000 fc1b 	bl	8003a68 <HAL_GPIO_WritePin>
        i--;
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	3b01      	subs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1dd      	bne.n	80031fa <TP_Write+0x1a>
    };
}
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	00000000 	.word	0x00000000

08003250 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8003258:	2201      	movs	r2, #1
 800325a:	2108      	movs	r1, #8
 800325c:	485a      	ldr	r0, [pc, #360]	; (80033c8 <TP_Read_Coordinates+0x178>)
 800325e:	f000 fc03 	bl	8003a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8003262:	2201      	movs	r2, #1
 8003264:	2120      	movs	r1, #32
 8003266:	4858      	ldr	r0, [pc, #352]	; (80033c8 <TP_Read_Coordinates+0x178>)
 8003268:	f000 fbfe 	bl	8003a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 800326c:	2201      	movs	r2, #1
 800326e:	2140      	movs	r1, #64	; 0x40
 8003270:	4855      	ldr	r0, [pc, #340]	; (80033c8 <TP_Read_Coordinates+0x178>)
 8003272:	f000 fbf9 	bl	8003a68 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8003276:	2300      	movs	r3, #0
 8003278:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 800327a:	2300      	movs	r3, #0
 800327c:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8003282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003286:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 800328c:	2200      	movs	r2, #0
 800328e:	2140      	movs	r1, #64	; 0x40
 8003290:	484d      	ldr	r0, [pc, #308]	; (80033c8 <TP_Read_Coordinates+0x178>)
 8003292:	f000 fbe9 	bl	8003a68 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003296:	e023      	b.n	80032e0 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8003298:	2090      	movs	r0, #144	; 0x90
 800329a:	f7ff ffa1 	bl	80031e0 <TP_Write>

				rawy = TP_Read();	
 800329e:	f7ff ff73 	bl	8003188 <TP_Read>
 80032a2:	4603      	mov	r3, r0
 80032a4:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 80032a6:	89fb      	ldrh	r3, [r7, #14]
 80032a8:	6a3a      	ldr	r2, [r7, #32]
 80032aa:	4413      	add	r3, r2
 80032ac:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 80032ae:	89fb      	ldrh	r3, [r7, #14]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4413      	add	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 80032b6:	20d0      	movs	r0, #208	; 0xd0
 80032b8:	f7ff ff92 	bl	80031e0 <TP_Write>
        rawx = TP_Read();
 80032bc:	f7ff ff64 	bl	8003188 <TP_Read>
 80032c0:	4603      	mov	r3, r0
 80032c2:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 80032c4:	89bb      	ldrh	r3, [r7, #12]
 80032c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c8:	4413      	add	r3, r2
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 80032cc:	89bb      	ldrh	r3, [r7, #12]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	61fb      	str	r3, [r7, #28]
        samples--;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
				counted_samples++;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	3301      	adds	r3, #1
 80032de:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d006      	beq.n	80032f4 <TP_Read_Coordinates+0xa4>
 80032e6:	2104      	movs	r1, #4
 80032e8:	4837      	ldr	r0, [pc, #220]	; (80033c8 <TP_Read_Coordinates+0x178>)
 80032ea:	f000 fba5 	bl	8003a38 <HAL_GPIO_ReadPin>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0d1      	beq.n	8003298 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80032f4:	2201      	movs	r2, #1
 80032f6:	2140      	movs	r1, #64	; 0x40
 80032f8:	4833      	ldr	r0, [pc, #204]	; (80033c8 <TP_Read_Coordinates+0x178>)
 80032fa:	f000 fbb5 	bl	8003a68 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003304:	d14d      	bne.n	80033a2 <TP_Read_Coordinates+0x152>
 8003306:	2104      	movs	r1, #4
 8003308:	482f      	ldr	r0, [pc, #188]	; (80033c8 <TP_Read_Coordinates+0x178>)
 800330a:	f000 fb95 	bl	8003a38 <HAL_GPIO_ReadPin>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d146      	bne.n	80033a2 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8003330:	89bb      	ldrh	r3, [r7, #12]
 8003332:	425b      	negs	r3, r3
 8003334:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8003336:	89fb      	ldrh	r3, [r7, #14]
 8003338:	425b      	negs	r3, r3
 800333a:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 800333c:	89ba      	ldrh	r2, [r7, #12]
 800333e:	4b23      	ldr	r3, [pc, #140]	; (80033cc <TP_Read_Coordinates+0x17c>)
 8003340:	fba3 1302 	umull	r1, r3, r3, r2
 8003344:	1ad2      	subs	r2, r2, r3
 8003346:	0852      	lsrs	r2, r2, #1
 8003348:	4413      	add	r3, r2
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	b29b      	uxth	r3, r3
 800334e:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800335a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80033c0 <TP_Read_Coordinates+0x170>
 800335e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003362:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003366:	ee17 3a90 	vmov	r3, s15
 800336a:	b29a      	uxth	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8003370:	89fb      	ldrh	r3, [r7, #14]
 8003372:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <TP_Read_Coordinates+0x180>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	09db      	lsrs	r3, r3, #7
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b0f      	subs	r3, #15
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003386:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80033c0 <TP_Read_Coordinates+0x170>
 800338a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3302      	adds	r3, #2
 8003392:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003396:	ee17 2a90 	vmov	r2, s15
 800339a:	b292      	uxth	r2, r2
 800339c:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 800339e:	2301      	movs	r3, #1
 80033a0:	e007      	b.n	80033b2 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3302      	adds	r3, #2
 80033ac:	2200      	movs	r2, #0
 80033ae:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 80033b0:	2300      	movs	r3, #0
		}
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3728      	adds	r7, #40	; 0x28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	f3af 8000 	nop.w
 80033c0:	28f5c28f 	.word	0x28f5c28f
 80033c4:	3ff28f5c 	.word	0x3ff28f5c
 80033c8:	40021000 	.word	0x40021000
 80033cc:	e01e01e1 	.word	0xe01e01e1
 80033d0:	a0a0a0a1 	.word	0xa0a0a0a1

080033d4 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 80033d8:	2104      	movs	r1, #4
 80033da:	4805      	ldr	r0, [pc, #20]	; (80033f0 <TP_Touchpad_Pressed+0x1c>)
 80033dc:	f000 fb2c 	bl	8003a38 <HAL_GPIO_ReadPin>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 80033ea:	2300      	movs	r3, #0
	}
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000

080033f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_Init+0x34>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <HAL_Init+0x34>)
 80033fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003402:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <HAL_Init+0x34>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a07      	ldr	r2, [pc, #28]	; (8003428 <HAL_Init+0x34>)
 800340a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003410:	2003      	movs	r0, #3
 8003412:	f000 f931 	bl	8003678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003416:	2000      	movs	r0, #0
 8003418:	f000 f808 	bl	800342c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800341c:	f7fe fb50 	bl	8001ac0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40023c00 	.word	0x40023c00

0800342c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_InitTick+0x54>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <HAL_InitTick+0x58>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4619      	mov	r1, r3
 800343e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003442:	fbb3 f3f1 	udiv	r3, r3, r1
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f93b 	bl	80036c6 <HAL_SYSTICK_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e00e      	b.n	8003478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b0f      	cmp	r3, #15
 800345e:	d80a      	bhi.n	8003476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003460:	2200      	movs	r2, #0
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	f000 f911 	bl	800368e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800346c:	4a06      	ldr	r2, [pc, #24]	; (8003488 <HAL_InitTick+0x5c>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e000      	b.n	8003478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
}
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000000 	.word	0x20000000
 8003484:	2000000c 	.word	0x2000000c
 8003488:	20000008 	.word	0x20000008

0800348c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_IncTick+0x20>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_IncTick+0x24>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4413      	add	r3, r2
 800349c:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <HAL_IncTick+0x24>)
 800349e:	6013      	str	r3, [r2, #0]
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	2000000c 	.word	0x2000000c
 80034b0:	20000350 	.word	0x20000350

080034b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return uwTick;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_GetTick+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000350 	.word	0x20000350

080034cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034d4:	f7ff ffee 	bl	80034b4 <HAL_GetTick>
 80034d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d005      	beq.n	80034f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <HAL_Delay+0x44>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034f2:	bf00      	nop
 80034f4:	f7ff ffde 	bl	80034b4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	429a      	cmp	r2, r3
 8003502:	d8f7      	bhi.n	80034f4 <HAL_Delay+0x28>
  {
  }
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	2000000c 	.word	0x2000000c

08003514 <__NVIC_SetPriorityGrouping>:
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <__NVIC_SetPriorityGrouping+0x40>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003530:	4013      	ands	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 800353e:	4313      	orrs	r3, r2
 8003540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003542:	4a04      	ldr	r2, [pc, #16]	; (8003554 <__NVIC_SetPriorityGrouping+0x40>)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	60d3      	str	r3, [r2, #12]
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000ed00 	.word	0xe000ed00
 8003558:	05fa0000 	.word	0x05fa0000

0800355c <__NVIC_GetPriorityGrouping>:
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <__NVIC_GetPriorityGrouping+0x18>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 0307 	and.w	r3, r3, #7
}
 800356a:	4618      	mov	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <__NVIC_SetPriority>:
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	6039      	str	r1, [r7, #0]
 8003582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	2b00      	cmp	r3, #0
 800358a:	db0a      	blt.n	80035a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	b2da      	uxtb	r2, r3
 8003590:	490c      	ldr	r1, [pc, #48]	; (80035c4 <__NVIC_SetPriority+0x4c>)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	0112      	lsls	r2, r2, #4
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	440b      	add	r3, r1
 800359c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035a0:	e00a      	b.n	80035b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	4908      	ldr	r1, [pc, #32]	; (80035c8 <__NVIC_SetPriority+0x50>)
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	3b04      	subs	r3, #4
 80035b0:	0112      	lsls	r2, r2, #4
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	440b      	add	r3, r1
 80035b6:	761a      	strb	r2, [r3, #24]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000e100 	.word	0xe000e100
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <NVIC_EncodePriority>:
{
 80035cc:	b480      	push	{r7}
 80035ce:	b089      	sub	sp, #36	; 0x24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f1c3 0307 	rsb	r3, r3, #7
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	bf28      	it	cs
 80035ea:	2304      	movcs	r3, #4
 80035ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2b06      	cmp	r3, #6
 80035f4:	d902      	bls.n	80035fc <NVIC_EncodePriority+0x30>
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3b03      	subs	r3, #3
 80035fa:	e000      	b.n	80035fe <NVIC_EncodePriority+0x32>
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003600:	f04f 32ff 	mov.w	r2, #4294967295
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43da      	mvns	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	401a      	ands	r2, r3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003614:	f04f 31ff 	mov.w	r1, #4294967295
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	fa01 f303 	lsl.w	r3, r1, r3
 800361e:	43d9      	mvns	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003624:	4313      	orrs	r3, r2
}
 8003626:	4618      	mov	r0, r3
 8003628:	3724      	adds	r7, #36	; 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3b01      	subs	r3, #1
 8003640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003644:	d301      	bcc.n	800364a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003646:	2301      	movs	r3, #1
 8003648:	e00f      	b.n	800366a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <SysTick_Config+0x40>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003652:	210f      	movs	r1, #15
 8003654:	f04f 30ff 	mov.w	r0, #4294967295
 8003658:	f7ff ff8e 	bl	8003578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <SysTick_Config+0x40>)
 800365e:	2200      	movs	r2, #0
 8003660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003662:	4b04      	ldr	r3, [pc, #16]	; (8003674 <SysTick_Config+0x40>)
 8003664:	2207      	movs	r2, #7
 8003666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	e000e010 	.word	0xe000e010

08003678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff ff47 	bl	8003514 <__NVIC_SetPriorityGrouping>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800368e:	b580      	push	{r7, lr}
 8003690:	b086      	sub	sp, #24
 8003692:	af00      	add	r7, sp, #0
 8003694:	4603      	mov	r3, r0
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036a0:	f7ff ff5c 	bl	800355c <__NVIC_GetPriorityGrouping>
 80036a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	6978      	ldr	r0, [r7, #20]
 80036ac:	f7ff ff8e 	bl	80035cc <NVIC_EncodePriority>
 80036b0:	4602      	mov	r2, r0
 80036b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff5d 	bl	8003578 <__NVIC_SetPriority>
}
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ffb0 	bl	8003634 <SysTick_Config>
 80036d4:	4603      	mov	r3, r0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e175      	b.n	80039ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003700:	2201      	movs	r2, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	f040 8164 	bne.w	80039e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d00b      	beq.n	800373e <HAL_GPIO_Init+0x5e>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d007      	beq.n	800373e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003732:	2b11      	cmp	r3, #17
 8003734:	d003      	beq.n	800373e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b12      	cmp	r3, #18
 800373c:	d130      	bne.n	80037a0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	2203      	movs	r2, #3
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003774:	2201      	movs	r2, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 0201 	and.w	r2, r3, #1
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	2203      	movs	r2, #3
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0x100>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b12      	cmp	r3, #18
 80037de:	d123      	bne.n	8003828 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	69b9      	ldr	r1, [r7, #24]
 8003824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80be 	beq.w	80039e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386a:	4b66      	ldr	r3, [pc, #408]	; (8003a04 <HAL_GPIO_Init+0x324>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4a65      	ldr	r2, [pc, #404]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003874:	6453      	str	r3, [r2, #68]	; 0x44
 8003876:	4b63      	ldr	r3, [pc, #396]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003882:	4a61      	ldr	r2, [pc, #388]	; (8003a08 <HAL_GPIO_Init+0x328>)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	3302      	adds	r3, #2
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a58      	ldr	r2, [pc, #352]	; (8003a0c <HAL_GPIO_Init+0x32c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d037      	beq.n	800391e <HAL_GPIO_Init+0x23e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a57      	ldr	r2, [pc, #348]	; (8003a10 <HAL_GPIO_Init+0x330>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d031      	beq.n	800391a <HAL_GPIO_Init+0x23a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a56      	ldr	r2, [pc, #344]	; (8003a14 <HAL_GPIO_Init+0x334>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d02b      	beq.n	8003916 <HAL_GPIO_Init+0x236>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a55      	ldr	r2, [pc, #340]	; (8003a18 <HAL_GPIO_Init+0x338>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d025      	beq.n	8003912 <HAL_GPIO_Init+0x232>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a54      	ldr	r2, [pc, #336]	; (8003a1c <HAL_GPIO_Init+0x33c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01f      	beq.n	800390e <HAL_GPIO_Init+0x22e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a53      	ldr	r2, [pc, #332]	; (8003a20 <HAL_GPIO_Init+0x340>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d019      	beq.n	800390a <HAL_GPIO_Init+0x22a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_GPIO_Init+0x344>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_GPIO_Init+0x226>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a51      	ldr	r2, [pc, #324]	; (8003a28 <HAL_GPIO_Init+0x348>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00d      	beq.n	8003902 <HAL_GPIO_Init+0x222>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a50      	ldr	r2, [pc, #320]	; (8003a2c <HAL_GPIO_Init+0x34c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <HAL_GPIO_Init+0x21e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a4f      	ldr	r2, [pc, #316]	; (8003a30 <HAL_GPIO_Init+0x350>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <HAL_GPIO_Init+0x21a>
 80038f6:	2309      	movs	r3, #9
 80038f8:	e012      	b.n	8003920 <HAL_GPIO_Init+0x240>
 80038fa:	230a      	movs	r3, #10
 80038fc:	e010      	b.n	8003920 <HAL_GPIO_Init+0x240>
 80038fe:	2308      	movs	r3, #8
 8003900:	e00e      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003902:	2307      	movs	r3, #7
 8003904:	e00c      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003906:	2306      	movs	r3, #6
 8003908:	e00a      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800390a:	2305      	movs	r3, #5
 800390c:	e008      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800390e:	2304      	movs	r3, #4
 8003910:	e006      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003912:	2303      	movs	r3, #3
 8003914:	e004      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003916:	2302      	movs	r3, #2
 8003918:	e002      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800391e:	2300      	movs	r3, #0
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	f002 0203 	and.w	r2, r2, #3
 8003926:	0092      	lsls	r2, r2, #2
 8003928:	4093      	lsls	r3, r2
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003930:	4935      	ldr	r1, [pc, #212]	; (8003a08 <HAL_GPIO_Init+0x328>)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	089b      	lsrs	r3, r3, #2
 8003936:	3302      	adds	r3, #2
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800393e:	4b3d      	ldr	r3, [pc, #244]	; (8003a34 <HAL_GPIO_Init+0x354>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003962:	4a34      	ldr	r2, [pc, #208]	; (8003a34 <HAL_GPIO_Init+0x354>)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003968:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <HAL_GPIO_Init+0x354>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800398c:	4a29      	ldr	r2, [pc, #164]	; (8003a34 <HAL_GPIO_Init+0x354>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003992:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <HAL_GPIO_Init+0x354>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039b6:	4a1f      	ldr	r2, [pc, #124]	; (8003a34 <HAL_GPIO_Init+0x354>)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039bc:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <HAL_GPIO_Init+0x354>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <HAL_GPIO_Init+0x354>)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3301      	adds	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b0f      	cmp	r3, #15
 80039f0:	f67f ae86 	bls.w	8003700 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	3724      	adds	r7, #36	; 0x24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40013800 	.word	0x40013800
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	40020400 	.word	0x40020400
 8003a14:	40020800 	.word	0x40020800
 8003a18:	40020c00 	.word	0x40020c00
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40021400 	.word	0x40021400
 8003a24:	40021800 	.word	0x40021800
 8003a28:	40021c00 	.word	0x40021c00
 8003a2c:	40022000 	.word	0x40022000
 8003a30:	40022400 	.word	0x40022400
 8003a34:	40013c00 	.word	0x40013c00

08003a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	e001      	b.n	8003a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
 8003a74:	4613      	mov	r3, r2
 8003a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a78:	787b      	ldrb	r3, [r7, #1]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a84:	e003      	b.n	8003a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a86:	887b      	ldrh	r3, [r7, #2]
 8003a88:	041a      	lsls	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	619a      	str	r2, [r3, #24]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aaa:	6013      	str	r3, [r2, #0]
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40007000 	.word	0x40007000

08003abc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac6:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	4a22      	ldr	r2, [pc, #136]	; (8003b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad2:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ade:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aea:	f7ff fce3 	bl	80034b4 <HAL_GetTick>
 8003aee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003af0:	e009      	b.n	8003b06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003af2:	f7ff fcdf 	bl	80034b4 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b00:	d901      	bls.n	8003b06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e022      	b.n	8003b4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b06:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b12:	d1ee      	bne.n	8003af2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b14:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0f      	ldr	r2, [pc, #60]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b20:	f7ff fcc8 	bl	80034b4 <HAL_GetTick>
 8003b24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b26:	e009      	b.n	8003b3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b28:	f7ff fcc4 	bl	80034b4 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b36:	d901      	bls.n	8003b3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e007      	b.n	8003b4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b48:	d1ee      	bne.n	8003b28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40007000 	.word	0x40007000

08003b5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b64:	2300      	movs	r3, #0
 8003b66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e29b      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8087 	beq.w	8003c8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b80:	4b96      	ldr	r3, [pc, #600]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d00c      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8c:	4b93      	ldr	r3, [pc, #588]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d112      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62>
 8003b98:	4b90      	ldr	r3, [pc, #576]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba4:	d10b      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba6:	4b8d      	ldr	r3, [pc, #564]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d06c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x130>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d168      	bne.n	8003c8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e275      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x7a>
 8003bc8:	4b84      	ldr	r3, [pc, #528]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a83      	ldr	r2, [pc, #524]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	e02e      	b.n	8003c34 <HAL_RCC_OscConfig+0xd8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x9c>
 8003bde:	4b7f      	ldr	r3, [pc, #508]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a7e      	ldr	r2, [pc, #504]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b7c      	ldr	r3, [pc, #496]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a7b      	ldr	r2, [pc, #492]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e01d      	b.n	8003c34 <HAL_RCC_OscConfig+0xd8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0xc0>
 8003c02:	4b76      	ldr	r3, [pc, #472]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a75      	ldr	r2, [pc, #468]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b73      	ldr	r3, [pc, #460]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a72      	ldr	r2, [pc, #456]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0xd8>
 8003c1c:	4b6f      	ldr	r3, [pc, #444]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6e      	ldr	r2, [pc, #440]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b6c      	ldr	r3, [pc, #432]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a6b      	ldr	r2, [pc, #428]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7ff fc3a 	bl	80034b4 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c44:	f7ff fc36 	bl	80034b4 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e229      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b61      	ldr	r3, [pc, #388]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0xe8>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7ff fc26 	bl	80034b4 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7ff fc22 	bl	80034b4 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e215      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	4b57      	ldr	r3, [pc, #348]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x110>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d069      	beq.n	8003d6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c9a:	4b50      	ldr	r3, [pc, #320]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca6:	4b4d      	ldr	r3, [pc, #308]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d11c      	bne.n	8003cec <HAL_RCC_OscConfig+0x190>
 8003cb2:	4b4a      	ldr	r3, [pc, #296]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d116      	bne.n	8003cec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cbe:	4b47      	ldr	r3, [pc, #284]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x17a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e1e9      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	493d      	ldr	r1, [pc, #244]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	e040      	b.n	8003d6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d023      	beq.n	8003d3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf4:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a38      	ldr	r2, [pc, #224]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7ff fbd8 	bl	80034b4 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d08:	f7ff fbd4 	bl	80034b4 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e1c7      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1a:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4929      	ldr	r1, [pc, #164]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
 8003d3a:	e018      	b.n	8003d6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3c:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7ff fbb4 	bl	80034b4 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d50:	f7ff fbb0 	bl	80034b4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e1a3      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d038      	beq.n	8003dec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d019      	beq.n	8003db6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d86:	4a15      	ldr	r2, [pc, #84]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8e:	f7ff fb91 	bl	80034b4 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d96:	f7ff fb8d 	bl	80034b4 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e180      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x23a>
 8003db4:	e01a      	b.n	8003dec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <HAL_RCC_OscConfig+0x280>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc2:	f7ff fb77 	bl	80034b4 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dca:	f7ff fb73 	bl	80034b4 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d903      	bls.n	8003de0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e166      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
 8003ddc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	4b92      	ldr	r3, [pc, #584]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ee      	bne.n	8003dca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80a4 	beq.w	8003f42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b8c      	ldr	r3, [pc, #560]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	4b89      	ldr	r3, [pc, #548]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	4a88      	ldr	r2, [pc, #544]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6413      	str	r3, [r2, #64]	; 0x40
 8003e12:	4b86      	ldr	r3, [pc, #536]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e22:	4b83      	ldr	r3, [pc, #524]	; (8004030 <HAL_RCC_OscConfig+0x4d4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d118      	bne.n	8003e60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e2e:	4b80      	ldr	r3, [pc, #512]	; (8004030 <HAL_RCC_OscConfig+0x4d4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a7f      	ldr	r2, [pc, #508]	; (8004030 <HAL_RCC_OscConfig+0x4d4>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7ff fb3b 	bl	80034b4 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7ff fb37 	bl	80034b4 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	; 0x64
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e12a      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e54:	4b76      	ldr	r3, [pc, #472]	; (8004030 <HAL_RCC_OscConfig+0x4d4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x31a>
 8003e68:	4b70      	ldr	r3, [pc, #448]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	4a6f      	ldr	r2, [pc, #444]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6713      	str	r3, [r2, #112]	; 0x70
 8003e74:	e02d      	b.n	8003ed2 <HAL_RCC_OscConfig+0x376>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x33c>
 8003e7e:	4b6b      	ldr	r3, [pc, #428]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a6a      	ldr	r2, [pc, #424]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8a:	4b68      	ldr	r3, [pc, #416]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	4a67      	ldr	r2, [pc, #412]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	6713      	str	r3, [r2, #112]	; 0x70
 8003e96:	e01c      	b.n	8003ed2 <HAL_RCC_OscConfig+0x376>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCC_OscConfig+0x35e>
 8003ea0:	4b62      	ldr	r3, [pc, #392]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a61      	ldr	r2, [pc, #388]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	4b5f      	ldr	r3, [pc, #380]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a5e      	ldr	r2, [pc, #376]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb8:	e00b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x376>
 8003eba:	4b5c      	ldr	r3, [pc, #368]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a5b      	ldr	r2, [pc, #364]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec6:	4b59      	ldr	r3, [pc, #356]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	4a58      	ldr	r2, [pc, #352]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d015      	beq.n	8003f06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eda:	f7ff faeb 	bl	80034b4 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7ff fae7 	bl	80034b4 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0d8      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef8:	4b4c      	ldr	r3, [pc, #304]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ee      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x386>
 8003f04:	e014      	b.n	8003f30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f06:	f7ff fad5 	bl	80034b4 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7ff fad1 	bl	80034b4 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0c2      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f24:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ee      	bne.n	8003f0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	4a3c      	ldr	r2, [pc, #240]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80ae 	beq.w	80040a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f4c:	4b37      	ldr	r3, [pc, #220]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d06d      	beq.n	8004034 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d14b      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f60:	4b32      	ldr	r3, [pc, #200]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a31      	ldr	r2, [pc, #196]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7ff faa2 	bl	80034b4 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f74:	f7ff fa9e 	bl	80034b4 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e091      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	4b29      	ldr	r3, [pc, #164]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69da      	ldr	r2, [r3, #28]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	019b      	lsls	r3, r3, #6
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	085b      	lsrs	r3, r3, #1
 8003faa:	3b01      	subs	r3, #1
 8003fac:	041b      	lsls	r3, r3, #16
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	071b      	lsls	r3, r3, #28
 8003fbe:	491b      	ldr	r1, [pc, #108]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a18      	ldr	r2, [pc, #96]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7ff fa70 	bl	80034b4 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7ff fa6c 	bl	80034b4 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e05f      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fea:	4b10      	ldr	r3, [pc, #64]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x47c>
 8003ff6:	e057      	b.n	80040a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0b      	ldr	r2, [pc, #44]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8003ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7ff fa56 	bl	80034b4 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7ff fa52 	bl	80034b4 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e045      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	4b03      	ldr	r3, [pc, #12]	; (800402c <HAL_RCC_OscConfig+0x4d0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x4b0>
 800402a:	e03d      	b.n	80040a8 <HAL_RCC_OscConfig+0x54c>
 800402c:	40023800 	.word	0x40023800
 8004030:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004034:	4b1f      	ldr	r3, [pc, #124]	; (80040b4 <HAL_RCC_OscConfig+0x558>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d030      	beq.n	80040a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d129      	bne.n	80040a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d122      	bne.n	80040a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004064:	4013      	ands	r3, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800406a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800406c:	4293      	cmp	r3, r2
 800406e:	d119      	bne.n	80040a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	3b01      	subs	r3, #1
 800407e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004080:	429a      	cmp	r2, r3
 8004082:	d10f      	bne.n	80040a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800

080040b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0d0      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040d0:	4b6a      	ldr	r3, [pc, #424]	; (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d910      	bls.n	8004100 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b67      	ldr	r3, [pc, #412]	; (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 020f 	bic.w	r2, r3, #15
 80040e6:	4965      	ldr	r1, [pc, #404]	; (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b63      	ldr	r3, [pc, #396]	; (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0b8      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004118:	4b59      	ldr	r3, [pc, #356]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a58      	ldr	r2, [pc, #352]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800411e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004122:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004130:	4b53      	ldr	r3, [pc, #332]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a52      	ldr	r2, [pc, #328]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800413a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413c:	4b50      	ldr	r3, [pc, #320]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	494d      	ldr	r1, [pc, #308]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d040      	beq.n	80041dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b47      	ldr	r3, [pc, #284]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d115      	bne.n	800419a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e07f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417a:	4b41      	ldr	r3, [pc, #260]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e073      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418a:	4b3d      	ldr	r3, [pc, #244]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e06b      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419a:	4b39      	ldr	r3, [pc, #228]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f023 0203 	bic.w	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4936      	ldr	r1, [pc, #216]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ac:	f7ff f982 	bl	80034b4 <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b4:	f7ff f97e 	bl	80034b4 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e053      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ca:	4b2d      	ldr	r3, [pc, #180]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 020c 	and.w	r2, r3, #12
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	429a      	cmp	r2, r3
 80041da:	d1eb      	bne.n	80041b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041dc:	4b27      	ldr	r3, [pc, #156]	; (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d210      	bcs.n	800420c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ea:	4b24      	ldr	r3, [pc, #144]	; (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 020f 	bic.w	r2, r3, #15
 80041f2:	4922      	ldr	r1, [pc, #136]	; (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e032      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4916      	ldr	r1, [pc, #88]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	490e      	ldr	r1, [pc, #56]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800424a:	f000 f821 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800424e:	4602      	mov	r2, r0
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	490a      	ldr	r1, [pc, #40]	; (8004284 <HAL_RCC_ClockConfig+0x1cc>)
 800425c:	5ccb      	ldrb	r3, [r1, r3]
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	4a09      	ldr	r2, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1d0>)
 8004264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1d4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff f8de 	bl	800342c <HAL_InitTick>

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40023c00 	.word	0x40023c00
 8004280:	40023800 	.word	0x40023800
 8004284:	0802eae0 	.word	0x0802eae0
 8004288:	20000000 	.word	0x20000000
 800428c:	20000008 	.word	0x20000008

08004290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	607b      	str	r3, [r7, #4]
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	2300      	movs	r3, #0
 80042a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a8:	4b67      	ldr	r3, [pc, #412]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 030c 	and.w	r3, r3, #12
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d00d      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x40>
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	f200 80bd 	bhi.w	8004434 <HAL_RCC_GetSysClockFreq+0x1a4>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x34>
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d003      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x3a>
 80042c2:	e0b7      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c4:	4b61      	ldr	r3, [pc, #388]	; (800444c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042c6:	60bb      	str	r3, [r7, #8]
      break;
 80042c8:	e0b7      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ca:	4b61      	ldr	r3, [pc, #388]	; (8004450 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042cc:	60bb      	str	r3, [r7, #8]
      break;
 80042ce:	e0b4      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d0:	4b5d      	ldr	r3, [pc, #372]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042da:	4b5b      	ldr	r3, [pc, #364]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d04d      	beq.n	8004382 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e6:	4b58      	ldr	r3, [pc, #352]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	099b      	lsrs	r3, r3, #6
 80042ec:	461a      	mov	r2, r3
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	ea02 0800 	and.w	r8, r2, r0
 80042fe:	ea03 0901 	and.w	r9, r3, r1
 8004302:	4640      	mov	r0, r8
 8004304:	4649      	mov	r1, r9
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	014b      	lsls	r3, r1, #5
 8004310:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004314:	0142      	lsls	r2, r0, #5
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	ebb0 0008 	subs.w	r0, r0, r8
 800431e:	eb61 0109 	sbc.w	r1, r1, r9
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	018b      	lsls	r3, r1, #6
 800432c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004330:	0182      	lsls	r2, r0, #6
 8004332:	1a12      	subs	r2, r2, r0
 8004334:	eb63 0301 	sbc.w	r3, r3, r1
 8004338:	f04f 0000 	mov.w	r0, #0
 800433c:	f04f 0100 	mov.w	r1, #0
 8004340:	00d9      	lsls	r1, r3, #3
 8004342:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004346:	00d0      	lsls	r0, r2, #3
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	eb12 0208 	adds.w	r2, r2, r8
 8004350:	eb43 0309 	adc.w	r3, r3, r9
 8004354:	f04f 0000 	mov.w	r0, #0
 8004358:	f04f 0100 	mov.w	r1, #0
 800435c:	0259      	lsls	r1, r3, #9
 800435e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004362:	0250      	lsls	r0, r2, #9
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	461a      	mov	r2, r3
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	f7fb ffbc 	bl	80002f0 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4613      	mov	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e04a      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004382:	4b31      	ldr	r3, [pc, #196]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	099b      	lsrs	r3, r3, #6
 8004388:	461a      	mov	r2, r3
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	ea02 0400 	and.w	r4, r2, r0
 800439a:	ea03 0501 	and.w	r5, r3, r1
 800439e:	4620      	mov	r0, r4
 80043a0:	4629      	mov	r1, r5
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	014b      	lsls	r3, r1, #5
 80043ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043b0:	0142      	lsls	r2, r0, #5
 80043b2:	4610      	mov	r0, r2
 80043b4:	4619      	mov	r1, r3
 80043b6:	1b00      	subs	r0, r0, r4
 80043b8:	eb61 0105 	sbc.w	r1, r1, r5
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	018b      	lsls	r3, r1, #6
 80043c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043ca:	0182      	lsls	r2, r0, #6
 80043cc:	1a12      	subs	r2, r2, r0
 80043ce:	eb63 0301 	sbc.w	r3, r3, r1
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f04f 0100 	mov.w	r1, #0
 80043da:	00d9      	lsls	r1, r3, #3
 80043dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043e0:	00d0      	lsls	r0, r2, #3
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	1912      	adds	r2, r2, r4
 80043e8:	eb45 0303 	adc.w	r3, r5, r3
 80043ec:	f04f 0000 	mov.w	r0, #0
 80043f0:	f04f 0100 	mov.w	r1, #0
 80043f4:	0299      	lsls	r1, r3, #10
 80043f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043fa:	0290      	lsls	r0, r2, #10
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	461a      	mov	r2, r3
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	f7fb ff70 	bl	80002f0 <__aeabi_uldivmod>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4613      	mov	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	3301      	adds	r3, #1
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004430:	60bb      	str	r3, [r7, #8]
      break;
 8004432:	e002      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004436:	60bb      	str	r3, [r7, #8]
      break;
 8004438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800443a:	68bb      	ldr	r3, [r7, #8]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800
 800444c:	00f42400 	.word	0x00f42400
 8004450:	007a1200 	.word	0x007a1200

08004454 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <HAL_RCC_GetHCLKFreq+0x14>)
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000000 	.word	0x20000000

0800446c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004470:	f7ff fff0 	bl	8004454 <HAL_RCC_GetHCLKFreq>
 8004474:	4602      	mov	r2, r0
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	0a9b      	lsrs	r3, r3, #10
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	4903      	ldr	r1, [pc, #12]	; (8004490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004482:	5ccb      	ldrb	r3, [r1, r3]
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004488:	4618      	mov	r0, r3
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40023800 	.word	0x40023800
 8004490:	0802eaf0 	.word	0x0802eaf0

08004494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004498:	f7ff ffdc 	bl	8004454 <HAL_RCC_GetHCLKFreq>
 800449c:	4602      	mov	r2, r0
 800449e:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	0b5b      	lsrs	r3, r3, #13
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	4903      	ldr	r1, [pc, #12]	; (80044b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044aa:	5ccb      	ldrb	r3, [r1, r3]
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40023800 	.word	0x40023800
 80044b8:	0802eaf0 	.word	0x0802eaf0

080044bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d012      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044e4:	4b69      	ldr	r3, [pc, #420]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	4a68      	ldr	r2, [pc, #416]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044ee:	6093      	str	r3, [r2, #8]
 80044f0:	4b66      	ldr	r3, [pc, #408]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f8:	4964      	ldr	r1, [pc, #400]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004506:	2301      	movs	r3, #1
 8004508:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d017      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004516:	4b5d      	ldr	r3, [pc, #372]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800451c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004524:	4959      	ldr	r1, [pc, #356]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004530:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004534:	d101      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004536:	2301      	movs	r3, #1
 8004538:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004542:	2301      	movs	r3, #1
 8004544:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d017      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004552:	4b4e      	ldr	r3, [pc, #312]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004558:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	494a      	ldr	r1, [pc, #296]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004570:	d101      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004572:	2301      	movs	r3, #1
 8004574:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800457e:	2301      	movs	r3, #1
 8004580:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800458e:	2301      	movs	r3, #1
 8004590:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 808b 	beq.w	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045a0:	4b3a      	ldr	r3, [pc, #232]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	4a39      	ldr	r2, [pc, #228]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045aa:	6413      	str	r3, [r2, #64]	; 0x40
 80045ac:	4b37      	ldr	r3, [pc, #220]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045b8:	4b35      	ldr	r3, [pc, #212]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a34      	ldr	r2, [pc, #208]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c4:	f7fe ff76 	bl	80034b4 <HAL_GetTick>
 80045c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045cc:	f7fe ff72 	bl	80034b4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e38f      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045de:	4b2c      	ldr	r3, [pc, #176]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045ea:	4b28      	ldr	r3, [pc, #160]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d035      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	429a      	cmp	r2, r3
 8004606:	d02e      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004608:	4b20      	ldr	r3, [pc, #128]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004610:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004612:	4b1e      	ldr	r3, [pc, #120]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a1d      	ldr	r2, [pc, #116]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800461e:	4b1b      	ldr	r3, [pc, #108]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	4a1a      	ldr	r2, [pc, #104]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004628:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800462a:	4a18      	ldr	r2, [pc, #96]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004630:	4b16      	ldr	r3, [pc, #88]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d114      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fe ff3a 	bl	80034b4 <HAL_GetTick>
 8004640:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004642:	e00a      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004644:	f7fe ff36 	bl	80034b4 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e351      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0ee      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004672:	d111      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004680:	4b04      	ldr	r3, [pc, #16]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004682:	400b      	ands	r3, r1
 8004684:	4901      	ldr	r1, [pc, #4]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
 800468a:	e00b      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800468c:	40023800 	.word	0x40023800
 8004690:	40007000 	.word	0x40007000
 8004694:	0ffffcff 	.word	0x0ffffcff
 8004698:	4bb3      	ldr	r3, [pc, #716]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4ab2      	ldr	r2, [pc, #712]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800469e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046a2:	6093      	str	r3, [r2, #8]
 80046a4:	4bb0      	ldr	r3, [pc, #704]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b0:	49ad      	ldr	r1, [pc, #692]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d010      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046c2:	4ba9      	ldr	r3, [pc, #676]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c8:	4aa7      	ldr	r2, [pc, #668]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046d2:	4ba5      	ldr	r3, [pc, #660]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	49a2      	ldr	r1, [pc, #648]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046f0:	4b9d      	ldr	r3, [pc, #628]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046fe:	499a      	ldr	r1, [pc, #616]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004712:	4b95      	ldr	r3, [pc, #596]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004718:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004720:	4991      	ldr	r1, [pc, #580]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004734:	4b8c      	ldr	r3, [pc, #560]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004742:	4989      	ldr	r1, [pc, #548]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004756:	4b84      	ldr	r3, [pc, #528]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	4980      	ldr	r1, [pc, #512]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004778:	4b7b      	ldr	r3, [pc, #492]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477e:	f023 0203 	bic.w	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	4978      	ldr	r1, [pc, #480]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800479a:	4b73      	ldr	r3, [pc, #460]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a0:	f023 020c 	bic.w	r2, r3, #12
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a8:	496f      	ldr	r1, [pc, #444]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047bc:	4b6a      	ldr	r3, [pc, #424]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	4967      	ldr	r1, [pc, #412]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047de:	4b62      	ldr	r3, [pc, #392]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ec:	495e      	ldr	r1, [pc, #376]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480e:	4956      	ldr	r1, [pc, #344]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004822:	4b51      	ldr	r3, [pc, #324]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004828:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	494d      	ldr	r1, [pc, #308]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004844:	4b48      	ldr	r3, [pc, #288]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004852:	4945      	ldr	r1, [pc, #276]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004866:	4b40      	ldr	r3, [pc, #256]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004874:	493c      	ldr	r1, [pc, #240]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004888:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004896:	4934      	ldr	r1, [pc, #208]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d011      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048aa:	4b2f      	ldr	r3, [pc, #188]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048b8:	492b      	ldr	r1, [pc, #172]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c8:	d101      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048ca:	2301      	movs	r3, #1
 80048cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048da:	2301      	movs	r3, #1
 80048dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ea:	4b1f      	ldr	r3, [pc, #124]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f8:	491b      	ldr	r1, [pc, #108]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00b      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800490c:	4b16      	ldr	r3, [pc, #88]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004912:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800491c:	4912      	ldr	r1, [pc, #72]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004930:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004940:	4909      	ldr	r1, [pc, #36]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00f      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004954:	4b04      	ldr	r3, [pc, #16]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800495a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	e002      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004966:	bf00      	nop
 8004968:	40023800 	.word	0x40023800
 800496c:	4986      	ldr	r1, [pc, #536]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00b      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004980:	4b81      	ldr	r3, [pc, #516]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004986:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004990:	497d      	ldr	r1, [pc, #500]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d006      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 80d6 	beq.w	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049ac:	4b76      	ldr	r3, [pc, #472]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a75      	ldr	r2, [pc, #468]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b8:	f7fe fd7c 	bl	80034b4 <HAL_GetTick>
 80049bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049c0:	f7fe fd78 	bl	80034b4 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b64      	cmp	r3, #100	; 0x64
 80049cc:	d901      	bls.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e195      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049d2:	4b6d      	ldr	r3, [pc, #436]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d021      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d11d      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049f2:	4b65      	ldr	r3, [pc, #404]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a00:	4b61      	ldr	r3, [pc, #388]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a06:	0e1b      	lsrs	r3, r3, #24
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	019a      	lsls	r2, r3, #6
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	061b      	lsls	r3, r3, #24
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	071b      	lsls	r3, r3, #28
 8004a26:	4958      	ldr	r1, [pc, #352]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a42:	d00a      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02e      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a58:	d129      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a5a:	4b4b      	ldr	r3, [pc, #300]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a68:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6e:	0f1b      	lsrs	r3, r3, #28
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	019a      	lsls	r2, r3, #6
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	061b      	lsls	r3, r3, #24
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	071b      	lsls	r3, r3, #28
 8004a8e:	493e      	ldr	r1, [pc, #248]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a96:	4b3c      	ldr	r3, [pc, #240]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a9c:	f023 021f 	bic.w	r2, r3, #31
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	4938      	ldr	r1, [pc, #224]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01d      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004aba:	4b33      	ldr	r3, [pc, #204]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac0:	0e1b      	lsrs	r3, r3, #24
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ac8:	4b2f      	ldr	r3, [pc, #188]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ace:	0f1b      	lsrs	r3, r3, #28
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	019a      	lsls	r2, r3, #6
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	041b      	lsls	r3, r3, #16
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	071b      	lsls	r3, r3, #28
 8004aee:	4926      	ldr	r1, [pc, #152]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d011      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	019a      	lsls	r2, r3, #6
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	041b      	lsls	r3, r3, #16
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	061b      	lsls	r3, r3, #24
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	071b      	lsls	r3, r3, #28
 8004b1e:	491a      	ldr	r1, [pc, #104]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b26:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b32:	f7fe fcbf 	bl	80034b4 <HAL_GetTick>
 8004b36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b38:	e008      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b3a:	f7fe fcbb 	bl	80034b4 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b64      	cmp	r3, #100	; 0x64
 8004b46:	d901      	bls.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e0d8      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0f0      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	f040 80ce 	bne.w	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6c:	f7fe fca2 	bl	80034b4 <HAL_GetTick>
 8004b70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b72:	e00b      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b74:	f7fe fc9e 	bl	80034b4 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b64      	cmp	r3, #100	; 0x64
 8004b80:	d904      	bls.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e0bb      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b86:	bf00      	nop
 8004b88:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b8c:	4b5e      	ldr	r3, [pc, #376]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b98:	d0ec      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d02e      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d12a      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bc2:	4b51      	ldr	r3, [pc, #324]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bd0:	4b4d      	ldr	r3, [pc, #308]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	0f1b      	lsrs	r3, r3, #28
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	019a      	lsls	r2, r3, #6
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	061b      	lsls	r3, r3, #24
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	071b      	lsls	r3, r3, #28
 8004bf6:	4944      	ldr	r1, [pc, #272]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bfe:	4b42      	ldr	r3, [pc, #264]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	493d      	ldr	r1, [pc, #244]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d022      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c2c:	d11d      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c2e:	4b36      	ldr	r3, [pc, #216]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c34:	0e1b      	lsrs	r3, r3, #24
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c3c:	4b32      	ldr	r3, [pc, #200]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	0f1b      	lsrs	r3, r3, #28
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	019a      	lsls	r2, r3, #6
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	431a      	orrs	r2, r3
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	061b      	lsls	r3, r3, #24
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	071b      	lsls	r3, r3, #28
 8004c62:	4929      	ldr	r1, [pc, #164]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d028      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c76:	4b24      	ldr	r3, [pc, #144]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	0e1b      	lsrs	r3, r3, #24
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c84:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	0c1b      	lsrs	r3, r3, #16
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	019a      	lsls	r2, r3, #6
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	061b      	lsls	r3, r3, #24
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	071b      	lsls	r3, r3, #28
 8004caa:	4917      	ldr	r1, [pc, #92]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004cb2:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	4911      	ldr	r1, [pc, #68]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0e      	ldr	r2, [pc, #56]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd4:	f7fe fbee 	bl	80034b4 <HAL_GetTick>
 8004cd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cdc:	f7fe fbea 	bl	80034b4 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	; 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e007      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cfa:	d1ef      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800

08004d0c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e01c      	b.n	8004d58 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	795b      	ldrb	r3, [r3, #5]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc fe24 	bl	800197c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0204 	orr.w	r2, r2, #4
 8004d48:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	791b      	ldrb	r3, [r3, #4]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_RNG_GenerateRandomNumber+0x1a>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e03d      	b.n	8004df6 <HAL_RNG_GenerateRandomNumber+0x96>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	795b      	ldrb	r3, [r3, #5]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d12c      	bne.n	8004de4 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d90:	f7fe fb90 	bl	80034b4 <HAL_GetTick>
 8004d94:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d96:	e011      	b.n	8004dbc <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004d98:	f7fe fb8c 	bl	80034b4 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d90a      	bls.n	8004dbc <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e01c      	b.n	8004df6 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d1e6      	bne.n	8004d98 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	715a      	strb	r2, [r3, #5]
 8004de2:	e004      	b.n	8004dee <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2204      	movs	r2, #4
 8004de8:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	711a      	strb	r2, [r3, #4]

  return status;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff ffa7 	bl	8004d60 <HAL_RNG_GenerateRandomNumber>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d102      	bne.n	8004e1e <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	e000      	b.n	8004e20 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8004e1e:	2300      	movs	r3, #0
  }
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e09d      	b.n	8004f76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d108      	bne.n	8004e54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e4a:	d009      	beq.n	8004e60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	61da      	str	r2, [r3, #28]
 8004e52:	e005      	b.n	8004e60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fc fddc 	bl	8001a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ea0:	d902      	bls.n	8004ea8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e002      	b.n	8004eae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004eb6:	d007      	beq.n	8004ec8 <HAL_SPI_Init+0xa0>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ec0:	d002      	beq.n	8004ec8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	ea42 0103 	orr.w	r1, r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	0c1b      	lsrs	r3, r3, #16
 8004f24:	f003 0204 	and.w	r2, r3, #4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f44:	ea42 0103 	orr.w	r1, r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b088      	sub	sp, #32
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_SPI_Transmit+0x22>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e158      	b.n	8005252 <HAL_SPI_Transmit+0x2d4>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fa8:	f7fe fa84 	bl	80034b4 <HAL_GetTick>
 8004fac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d002      	beq.n	8004fc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fc2:	e13d      	b.n	8005240 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_SPI_Transmit+0x52>
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fd4:	e134      	b.n	8005240 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	88fa      	ldrh	r2, [r7, #6]
 8004fee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	88fa      	ldrh	r2, [r7, #6]
 8004ff4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005020:	d10f      	bne.n	8005042 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005030:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005040:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d007      	beq.n	8005060 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800505e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005068:	d94b      	bls.n	8005102 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_SPI_Transmit+0xfa>
 8005072:	8afb      	ldrh	r3, [r7, #22]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d13e      	bne.n	80050f6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	881a      	ldrh	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	1c9a      	adds	r2, r3, #2
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800509c:	e02b      	b.n	80050f6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d112      	bne.n	80050d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	881a      	ldrh	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	1c9a      	adds	r2, r3, #2
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050d0:	e011      	b.n	80050f6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050d2:	f7fe f9ef 	bl	80034b4 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d803      	bhi.n	80050ea <HAL_SPI_Transmit+0x16c>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d102      	bne.n	80050f0 <HAL_SPI_Transmit+0x172>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d102      	bne.n	80050f6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050f4:	e0a4      	b.n	8005240 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1ce      	bne.n	800509e <HAL_SPI_Transmit+0x120>
 8005100:	e07c      	b.n	80051fc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_SPI_Transmit+0x192>
 800510a:	8afb      	ldrh	r3, [r7, #22]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d170      	bne.n	80051f2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b01      	cmp	r3, #1
 8005118:	d912      	bls.n	8005140 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	881a      	ldrh	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	1c9a      	adds	r2, r3, #2
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b02      	subs	r3, #2
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800513e:	e058      	b.n	80051f2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	330c      	adds	r3, #12
 800514a:	7812      	ldrb	r2, [r2, #0]
 800514c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005166:	e044      	b.n	80051f2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b02      	cmp	r3, #2
 8005174:	d12b      	bne.n	80051ce <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	d912      	bls.n	80051a6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	881a      	ldrh	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	1c9a      	adds	r2, r3, #2
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b02      	subs	r3, #2
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051a4:	e025      	b.n	80051f2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	330c      	adds	r3, #12
 80051b0:	7812      	ldrb	r2, [r2, #0]
 80051b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051cc:	e011      	b.n	80051f2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ce:	f7fe f971 	bl	80034b4 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d803      	bhi.n	80051e6 <HAL_SPI_Transmit+0x268>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e4:	d102      	bne.n	80051ec <HAL_SPI_Transmit+0x26e>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d102      	bne.n	80051f2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051f0:	e026      	b.n	8005240 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1b5      	bne.n	8005168 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f945 	bl	8005490 <SPI_EndRxTxTransaction>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2220      	movs	r2, #32
 8005210:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	77fb      	strb	r3, [r7, #31]
 800523c:	e000      	b.n	8005240 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800523e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005250:	7ffb      	ldrb	r3, [r7, #31]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800526c:	f7fe f922 	bl	80034b4 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	4413      	add	r3, r2
 800527a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800527c:	f7fe f91a 	bl	80034b4 <HAL_GetTick>
 8005280:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005282:	4b39      	ldr	r3, [pc, #228]	; (8005368 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	015b      	lsls	r3, r3, #5
 8005288:	0d1b      	lsrs	r3, r3, #20
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	fb02 f303 	mul.w	r3, r2, r3
 8005290:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005292:	e054      	b.n	800533e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	d050      	beq.n	800533e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800529c:	f7fe f90a 	bl	80034b4 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d902      	bls.n	80052b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d13d      	bne.n	800532e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ca:	d111      	bne.n	80052f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d4:	d004      	beq.n	80052e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052de:	d107      	bne.n	80052f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f8:	d10f      	bne.n	800531a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005318:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e017      	b.n	800535e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	3b01      	subs	r3, #1
 800533c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4013      	ands	r3, r2
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	429a      	cmp	r2, r3
 800534c:	bf0c      	ite	eq
 800534e:	2301      	moveq	r3, #1
 8005350:	2300      	movne	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	429a      	cmp	r2, r3
 800535a:	d19b      	bne.n	8005294 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000000 	.word	0x20000000

0800536c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800537a:	f7fe f89b 	bl	80034b4 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	4413      	add	r3, r2
 8005388:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800538a:	f7fe f893 	bl	80034b4 <HAL_GetTick>
 800538e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005390:	4b3e      	ldr	r3, [pc, #248]	; (800548c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	00da      	lsls	r2, r3, #3
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	0d1b      	lsrs	r3, r3, #20
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
 80053a6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80053a8:	e062      	b.n	8005470 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053b0:	d109      	bne.n	80053c6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	330c      	adds	r3, #12
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80053c4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d050      	beq.n	8005470 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053ce:	f7fe f871 	bl	80034b4 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d902      	bls.n	80053e4 <SPI_WaitFifoStateUntilTimeout+0x78>
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d13d      	bne.n	8005460 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053fc:	d111      	bne.n	8005422 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005406:	d004      	beq.n	8005412 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005410:	d107      	bne.n	8005422 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005420:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542a:	d10f      	bne.n	800544c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800544a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e010      	b.n	8005482 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	3b01      	subs	r3, #1
 800546e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4013      	ands	r3, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d194      	bne.n	80053aa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3720      	adds	r7, #32
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000000 	.word	0x20000000

08005490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff ff5f 	bl	800536c <SPI_WaitFifoStateUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d007      	beq.n	80054c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b8:	f043 0220 	orr.w	r2, r3, #32
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e027      	b.n	8005514 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2200      	movs	r2, #0
 80054cc:	2180      	movs	r1, #128	; 0x80
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f7ff fec4 	bl	800525c <SPI_WaitFlagStateUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054de:	f043 0220 	orr.w	r2, r3, #32
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e014      	b.n	8005514 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f7ff ff38 	bl	800536c <SPI_WaitFifoStateUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d007      	beq.n	8005512 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005506:	f043 0220 	orr.w	r2, r3, #32
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e000      	b.n	8005514 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e049      	b.n	80055c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fc fc36 	bl	8001db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3304      	adds	r3, #4
 8005558:	4619      	mov	r1, r3
 800555a:	4610      	mov	r0, r2
 800555c:	f000 f994 	bl	8005888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d001      	beq.n	80055e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e04c      	b.n	800567e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a26      	ldr	r2, [pc, #152]	; (800568c <HAL_TIM_Base_Start+0xc0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d022      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fe:	d01d      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a22      	ldr	r2, [pc, #136]	; (8005690 <HAL_TIM_Base_Start+0xc4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d018      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a21      	ldr	r2, [pc, #132]	; (8005694 <HAL_TIM_Base_Start+0xc8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d013      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1f      	ldr	r2, [pc, #124]	; (8005698 <HAL_TIM_Base_Start+0xcc>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00e      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1e      	ldr	r2, [pc, #120]	; (800569c <HAL_TIM_Base_Start+0xd0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1c      	ldr	r2, [pc, #112]	; (80056a0 <HAL_TIM_Base_Start+0xd4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1b      	ldr	r2, [pc, #108]	; (80056a4 <HAL_TIM_Base_Start+0xd8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d115      	bne.n	8005668 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	4b19      	ldr	r3, [pc, #100]	; (80056a8 <HAL_TIM_Base_Start+0xdc>)
 8005644:	4013      	ands	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b06      	cmp	r3, #6
 800564c:	d015      	beq.n	800567a <HAL_TIM_Base_Start+0xae>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005654:	d011      	beq.n	800567a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0201 	orr.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005666:	e008      	b.n	800567a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e000      	b.n	800567c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40010000 	.word	0x40010000
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40010400 	.word	0x40010400
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40001800 	.word	0x40001800
 80056a8:	00010007 	.word	0x00010007

080056ac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6a1a      	ldr	r2, [r3, #32]
 80056ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10f      	bne.n	80056e4 <HAL_TIM_Base_Stop+0x38>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6a1a      	ldr	r2, [r3, #32]
 80056ca:	f240 4344 	movw	r3, #1092	; 0x444
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d107      	bne.n	80056e4 <HAL_TIM_Base_Stop+0x38>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0201 	bic.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_TIM_ConfigClockSource+0x18>
 8005710:	2302      	movs	r3, #2
 8005712:	e0b3      	b.n	800587c <HAL_TIM_ConfigClockSource+0x180>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4b55      	ldr	r3, [pc, #340]	; (8005884 <HAL_TIM_ConfigClockSource+0x188>)
 8005730:	4013      	ands	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800573a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800574c:	d03e      	beq.n	80057cc <HAL_TIM_ConfigClockSource+0xd0>
 800574e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005752:	f200 8087 	bhi.w	8005864 <HAL_TIM_ConfigClockSource+0x168>
 8005756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800575a:	f000 8085 	beq.w	8005868 <HAL_TIM_ConfigClockSource+0x16c>
 800575e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005762:	d87f      	bhi.n	8005864 <HAL_TIM_ConfigClockSource+0x168>
 8005764:	2b70      	cmp	r3, #112	; 0x70
 8005766:	d01a      	beq.n	800579e <HAL_TIM_ConfigClockSource+0xa2>
 8005768:	2b70      	cmp	r3, #112	; 0x70
 800576a:	d87b      	bhi.n	8005864 <HAL_TIM_ConfigClockSource+0x168>
 800576c:	2b60      	cmp	r3, #96	; 0x60
 800576e:	d050      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x116>
 8005770:	2b60      	cmp	r3, #96	; 0x60
 8005772:	d877      	bhi.n	8005864 <HAL_TIM_ConfigClockSource+0x168>
 8005774:	2b50      	cmp	r3, #80	; 0x50
 8005776:	d03c      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0xf6>
 8005778:	2b50      	cmp	r3, #80	; 0x50
 800577a:	d873      	bhi.n	8005864 <HAL_TIM_ConfigClockSource+0x168>
 800577c:	2b40      	cmp	r3, #64	; 0x40
 800577e:	d058      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x136>
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	d86f      	bhi.n	8005864 <HAL_TIM_ConfigClockSource+0x168>
 8005784:	2b30      	cmp	r3, #48	; 0x30
 8005786:	d064      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0x156>
 8005788:	2b30      	cmp	r3, #48	; 0x30
 800578a:	d86b      	bhi.n	8005864 <HAL_TIM_ConfigClockSource+0x168>
 800578c:	2b20      	cmp	r3, #32
 800578e:	d060      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0x156>
 8005790:	2b20      	cmp	r3, #32
 8005792:	d867      	bhi.n	8005864 <HAL_TIM_ConfigClockSource+0x168>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d05c      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0x156>
 8005798:	2b10      	cmp	r3, #16
 800579a:	d05a      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800579c:	e062      	b.n	8005864 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	6899      	ldr	r1, [r3, #8]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f000 f985 	bl	8005abc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	609a      	str	r2, [r3, #8]
      break;
 80057ca:	e04e      	b.n	800586a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6899      	ldr	r1, [r3, #8]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f000 f96e 	bl	8005abc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ee:	609a      	str	r2, [r3, #8]
      break;
 80057f0:	e03b      	b.n	800586a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6859      	ldr	r1, [r3, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	461a      	mov	r2, r3
 8005800:	f000 f8e2 	bl	80059c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2150      	movs	r1, #80	; 0x50
 800580a:	4618      	mov	r0, r3
 800580c:	f000 f93b 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005810:	e02b      	b.n	800586a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6859      	ldr	r1, [r3, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	461a      	mov	r2, r3
 8005820:	f000 f901 	bl	8005a26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2160      	movs	r1, #96	; 0x60
 800582a:	4618      	mov	r0, r3
 800582c:	f000 f92b 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005830:	e01b      	b.n	800586a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	6859      	ldr	r1, [r3, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	461a      	mov	r2, r3
 8005840:	f000 f8c2 	bl	80059c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2140      	movs	r1, #64	; 0x40
 800584a:	4618      	mov	r0, r3
 800584c:	f000 f91b 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005850:	e00b      	b.n	800586a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4619      	mov	r1, r3
 800585c:	4610      	mov	r0, r2
 800585e:	f000 f912 	bl	8005a86 <TIM_ITRx_SetConfig>
        break;
 8005862:	e002      	b.n	800586a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005864:	bf00      	nop
 8005866:	e000      	b.n	800586a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005868:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	fffeff88 	.word	0xfffeff88

08005888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a40      	ldr	r2, [pc, #256]	; (800599c <TIM_Base_SetConfig+0x114>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d013      	beq.n	80058c8 <TIM_Base_SetConfig+0x40>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a6:	d00f      	beq.n	80058c8 <TIM_Base_SetConfig+0x40>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a3d      	ldr	r2, [pc, #244]	; (80059a0 <TIM_Base_SetConfig+0x118>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00b      	beq.n	80058c8 <TIM_Base_SetConfig+0x40>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a3c      	ldr	r2, [pc, #240]	; (80059a4 <TIM_Base_SetConfig+0x11c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d007      	beq.n	80058c8 <TIM_Base_SetConfig+0x40>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a3b      	ldr	r2, [pc, #236]	; (80059a8 <TIM_Base_SetConfig+0x120>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a3a      	ldr	r2, [pc, #232]	; (80059ac <TIM_Base_SetConfig+0x124>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d108      	bne.n	80058da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2f      	ldr	r2, [pc, #188]	; (800599c <TIM_Base_SetConfig+0x114>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d02b      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e8:	d027      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a2c      	ldr	r2, [pc, #176]	; (80059a0 <TIM_Base_SetConfig+0x118>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d023      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2b      	ldr	r2, [pc, #172]	; (80059a4 <TIM_Base_SetConfig+0x11c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d01f      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2a      	ldr	r2, [pc, #168]	; (80059a8 <TIM_Base_SetConfig+0x120>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d01b      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a29      	ldr	r2, [pc, #164]	; (80059ac <TIM_Base_SetConfig+0x124>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d017      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a28      	ldr	r2, [pc, #160]	; (80059b0 <TIM_Base_SetConfig+0x128>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a27      	ldr	r2, [pc, #156]	; (80059b4 <TIM_Base_SetConfig+0x12c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00f      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a26      	ldr	r2, [pc, #152]	; (80059b8 <TIM_Base_SetConfig+0x130>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00b      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a25      	ldr	r2, [pc, #148]	; (80059bc <TIM_Base_SetConfig+0x134>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d007      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a24      	ldr	r2, [pc, #144]	; (80059c0 <TIM_Base_SetConfig+0x138>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a23      	ldr	r2, [pc, #140]	; (80059c4 <TIM_Base_SetConfig+0x13c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d108      	bne.n	800594c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a0a      	ldr	r2, [pc, #40]	; (800599c <TIM_Base_SetConfig+0x114>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d003      	beq.n	8005980 <TIM_Base_SetConfig+0xf8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a0c      	ldr	r2, [pc, #48]	; (80059ac <TIM_Base_SetConfig+0x124>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d103      	bne.n	8005988 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	615a      	str	r2, [r3, #20]
}
 800598e:	bf00      	nop
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40010000 	.word	0x40010000
 80059a0:	40000400 	.word	0x40000400
 80059a4:	40000800 	.word	0x40000800
 80059a8:	40000c00 	.word	0x40000c00
 80059ac:	40010400 	.word	0x40010400
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40014400 	.word	0x40014400
 80059b8:	40014800 	.word	0x40014800
 80059bc:	40001800 	.word	0x40001800
 80059c0:	40001c00 	.word	0x40001c00
 80059c4:	40002000 	.word	0x40002000

080059c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0201 	bic.w	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f023 030a 	bic.w	r3, r3, #10
 8005a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	621a      	str	r2, [r3, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b087      	sub	sp, #28
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f023 0210 	bic.w	r2, r3, #16
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	031b      	lsls	r3, r3, #12
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	621a      	str	r2, [r3, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f043 0307 	orr.w	r3, r3, #7
 8005aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	609a      	str	r2, [r3, #8]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	021a      	lsls	r2, r3, #8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	609a      	str	r2, [r3, #8]
}
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e06d      	b.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a30      	ldr	r2, [pc, #192]	; (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a2f      	ldr	r2, [pc, #188]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d108      	bne.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a20      	ldr	r2, [pc, #128]	; (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d022      	beq.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b86:	d01d      	beq.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1d      	ldr	r2, [pc, #116]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d018      	beq.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d013      	beq.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a1a      	ldr	r2, [pc, #104]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00e      	beq.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d009      	beq.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a16      	ldr	r2, [pc, #88]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d004      	beq.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a15      	ldr	r2, [pc, #84]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d10c      	bne.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40010400 	.word	0x40010400
 8005c04:	40000400 	.word	0x40000400
 8005c08:	40000800 	.word	0x40000800
 8005c0c:	40000c00 	.word	0x40000c00
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40001800 	.word	0x40001800

08005c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e040      	b.n	8005cac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fc f90a 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2224      	movs	r2, #36	; 0x24
 8005c44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f82c 	bl	8005cb4 <UART_SetConfig>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e022      	b.n	8005cac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa82 	bl	8006178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0201 	orr.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fb09 	bl	80062bc <UART_CheckIdleState>
 8005caa:	4603      	mov	r3, r0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4ba7      	ldr	r3, [pc, #668]	; (8005f7c <UART_SetConfig+0x2c8>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	6979      	ldr	r1, [r7, #20]
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a95      	ldr	r2, [pc, #596]	; (8005f80 <UART_SetConfig+0x2cc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d120      	bne.n	8005d72 <UART_SetConfig+0xbe>
 8005d30:	4b94      	ldr	r3, [pc, #592]	; (8005f84 <UART_SetConfig+0x2d0>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d816      	bhi.n	8005d6c <UART_SetConfig+0xb8>
 8005d3e:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <UART_SetConfig+0x90>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d55 	.word	0x08005d55
 8005d48:	08005d61 	.word	0x08005d61
 8005d4c:	08005d5b 	.word	0x08005d5b
 8005d50:	08005d67 	.word	0x08005d67
 8005d54:	2301      	movs	r3, #1
 8005d56:	77fb      	strb	r3, [r7, #31]
 8005d58:	e14f      	b.n	8005ffa <UART_SetConfig+0x346>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	77fb      	strb	r3, [r7, #31]
 8005d5e:	e14c      	b.n	8005ffa <UART_SetConfig+0x346>
 8005d60:	2304      	movs	r3, #4
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e149      	b.n	8005ffa <UART_SetConfig+0x346>
 8005d66:	2308      	movs	r3, #8
 8005d68:	77fb      	strb	r3, [r7, #31]
 8005d6a:	e146      	b.n	8005ffa <UART_SetConfig+0x346>
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	77fb      	strb	r3, [r7, #31]
 8005d70:	e143      	b.n	8005ffa <UART_SetConfig+0x346>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a84      	ldr	r2, [pc, #528]	; (8005f88 <UART_SetConfig+0x2d4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d132      	bne.n	8005de2 <UART_SetConfig+0x12e>
 8005d7c:	4b81      	ldr	r3, [pc, #516]	; (8005f84 <UART_SetConfig+0x2d0>)
 8005d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d82:	f003 030c 	and.w	r3, r3, #12
 8005d86:	2b0c      	cmp	r3, #12
 8005d88:	d828      	bhi.n	8005ddc <UART_SetConfig+0x128>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <UART_SetConfig+0xdc>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005dc5 	.word	0x08005dc5
 8005d94:	08005ddd 	.word	0x08005ddd
 8005d98:	08005ddd 	.word	0x08005ddd
 8005d9c:	08005ddd 	.word	0x08005ddd
 8005da0:	08005dd1 	.word	0x08005dd1
 8005da4:	08005ddd 	.word	0x08005ddd
 8005da8:	08005ddd 	.word	0x08005ddd
 8005dac:	08005ddd 	.word	0x08005ddd
 8005db0:	08005dcb 	.word	0x08005dcb
 8005db4:	08005ddd 	.word	0x08005ddd
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005ddd 	.word	0x08005ddd
 8005dc0:	08005dd7 	.word	0x08005dd7
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e117      	b.n	8005ffa <UART_SetConfig+0x346>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	77fb      	strb	r3, [r7, #31]
 8005dce:	e114      	b.n	8005ffa <UART_SetConfig+0x346>
 8005dd0:	2304      	movs	r3, #4
 8005dd2:	77fb      	strb	r3, [r7, #31]
 8005dd4:	e111      	b.n	8005ffa <UART_SetConfig+0x346>
 8005dd6:	2308      	movs	r3, #8
 8005dd8:	77fb      	strb	r3, [r7, #31]
 8005dda:	e10e      	b.n	8005ffa <UART_SetConfig+0x346>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	77fb      	strb	r3, [r7, #31]
 8005de0:	e10b      	b.n	8005ffa <UART_SetConfig+0x346>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a69      	ldr	r2, [pc, #420]	; (8005f8c <UART_SetConfig+0x2d8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d120      	bne.n	8005e2e <UART_SetConfig+0x17a>
 8005dec:	4b65      	ldr	r3, [pc, #404]	; (8005f84 <UART_SetConfig+0x2d0>)
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005df6:	2b30      	cmp	r3, #48	; 0x30
 8005df8:	d013      	beq.n	8005e22 <UART_SetConfig+0x16e>
 8005dfa:	2b30      	cmp	r3, #48	; 0x30
 8005dfc:	d814      	bhi.n	8005e28 <UART_SetConfig+0x174>
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d009      	beq.n	8005e16 <UART_SetConfig+0x162>
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d810      	bhi.n	8005e28 <UART_SetConfig+0x174>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <UART_SetConfig+0x15c>
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d006      	beq.n	8005e1c <UART_SetConfig+0x168>
 8005e0e:	e00b      	b.n	8005e28 <UART_SetConfig+0x174>
 8005e10:	2300      	movs	r3, #0
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e0f1      	b.n	8005ffa <UART_SetConfig+0x346>
 8005e16:	2302      	movs	r3, #2
 8005e18:	77fb      	strb	r3, [r7, #31]
 8005e1a:	e0ee      	b.n	8005ffa <UART_SetConfig+0x346>
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	77fb      	strb	r3, [r7, #31]
 8005e20:	e0eb      	b.n	8005ffa <UART_SetConfig+0x346>
 8005e22:	2308      	movs	r3, #8
 8005e24:	77fb      	strb	r3, [r7, #31]
 8005e26:	e0e8      	b.n	8005ffa <UART_SetConfig+0x346>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	77fb      	strb	r3, [r7, #31]
 8005e2c:	e0e5      	b.n	8005ffa <UART_SetConfig+0x346>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a57      	ldr	r2, [pc, #348]	; (8005f90 <UART_SetConfig+0x2dc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d120      	bne.n	8005e7a <UART_SetConfig+0x1c6>
 8005e38:	4b52      	ldr	r3, [pc, #328]	; (8005f84 <UART_SetConfig+0x2d0>)
 8005e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e42:	2bc0      	cmp	r3, #192	; 0xc0
 8005e44:	d013      	beq.n	8005e6e <UART_SetConfig+0x1ba>
 8005e46:	2bc0      	cmp	r3, #192	; 0xc0
 8005e48:	d814      	bhi.n	8005e74 <UART_SetConfig+0x1c0>
 8005e4a:	2b80      	cmp	r3, #128	; 0x80
 8005e4c:	d009      	beq.n	8005e62 <UART_SetConfig+0x1ae>
 8005e4e:	2b80      	cmp	r3, #128	; 0x80
 8005e50:	d810      	bhi.n	8005e74 <UART_SetConfig+0x1c0>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <UART_SetConfig+0x1a8>
 8005e56:	2b40      	cmp	r3, #64	; 0x40
 8005e58:	d006      	beq.n	8005e68 <UART_SetConfig+0x1b4>
 8005e5a:	e00b      	b.n	8005e74 <UART_SetConfig+0x1c0>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	77fb      	strb	r3, [r7, #31]
 8005e60:	e0cb      	b.n	8005ffa <UART_SetConfig+0x346>
 8005e62:	2302      	movs	r3, #2
 8005e64:	77fb      	strb	r3, [r7, #31]
 8005e66:	e0c8      	b.n	8005ffa <UART_SetConfig+0x346>
 8005e68:	2304      	movs	r3, #4
 8005e6a:	77fb      	strb	r3, [r7, #31]
 8005e6c:	e0c5      	b.n	8005ffa <UART_SetConfig+0x346>
 8005e6e:	2308      	movs	r3, #8
 8005e70:	77fb      	strb	r3, [r7, #31]
 8005e72:	e0c2      	b.n	8005ffa <UART_SetConfig+0x346>
 8005e74:	2310      	movs	r3, #16
 8005e76:	77fb      	strb	r3, [r7, #31]
 8005e78:	e0bf      	b.n	8005ffa <UART_SetConfig+0x346>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a45      	ldr	r2, [pc, #276]	; (8005f94 <UART_SetConfig+0x2e0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d125      	bne.n	8005ed0 <UART_SetConfig+0x21c>
 8005e84:	4b3f      	ldr	r3, [pc, #252]	; (8005f84 <UART_SetConfig+0x2d0>)
 8005e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e92:	d017      	beq.n	8005ec4 <UART_SetConfig+0x210>
 8005e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e98:	d817      	bhi.n	8005eca <UART_SetConfig+0x216>
 8005e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e9e:	d00b      	beq.n	8005eb8 <UART_SetConfig+0x204>
 8005ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea4:	d811      	bhi.n	8005eca <UART_SetConfig+0x216>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <UART_SetConfig+0x1fe>
 8005eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eae:	d006      	beq.n	8005ebe <UART_SetConfig+0x20a>
 8005eb0:	e00b      	b.n	8005eca <UART_SetConfig+0x216>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	77fb      	strb	r3, [r7, #31]
 8005eb6:	e0a0      	b.n	8005ffa <UART_SetConfig+0x346>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e09d      	b.n	8005ffa <UART_SetConfig+0x346>
 8005ebe:	2304      	movs	r3, #4
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	e09a      	b.n	8005ffa <UART_SetConfig+0x346>
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	77fb      	strb	r3, [r7, #31]
 8005ec8:	e097      	b.n	8005ffa <UART_SetConfig+0x346>
 8005eca:	2310      	movs	r3, #16
 8005ecc:	77fb      	strb	r3, [r7, #31]
 8005ece:	e094      	b.n	8005ffa <UART_SetConfig+0x346>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a30      	ldr	r2, [pc, #192]	; (8005f98 <UART_SetConfig+0x2e4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d125      	bne.n	8005f26 <UART_SetConfig+0x272>
 8005eda:	4b2a      	ldr	r3, [pc, #168]	; (8005f84 <UART_SetConfig+0x2d0>)
 8005edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ee4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ee8:	d017      	beq.n	8005f1a <UART_SetConfig+0x266>
 8005eea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eee:	d817      	bhi.n	8005f20 <UART_SetConfig+0x26c>
 8005ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef4:	d00b      	beq.n	8005f0e <UART_SetConfig+0x25a>
 8005ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efa:	d811      	bhi.n	8005f20 <UART_SetConfig+0x26c>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <UART_SetConfig+0x254>
 8005f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f04:	d006      	beq.n	8005f14 <UART_SetConfig+0x260>
 8005f06:	e00b      	b.n	8005f20 <UART_SetConfig+0x26c>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e075      	b.n	8005ffa <UART_SetConfig+0x346>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	77fb      	strb	r3, [r7, #31]
 8005f12:	e072      	b.n	8005ffa <UART_SetConfig+0x346>
 8005f14:	2304      	movs	r3, #4
 8005f16:	77fb      	strb	r3, [r7, #31]
 8005f18:	e06f      	b.n	8005ffa <UART_SetConfig+0x346>
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	77fb      	strb	r3, [r7, #31]
 8005f1e:	e06c      	b.n	8005ffa <UART_SetConfig+0x346>
 8005f20:	2310      	movs	r3, #16
 8005f22:	77fb      	strb	r3, [r7, #31]
 8005f24:	e069      	b.n	8005ffa <UART_SetConfig+0x346>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <UART_SetConfig+0x2e8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d137      	bne.n	8005fa0 <UART_SetConfig+0x2ec>
 8005f30:	4b14      	ldr	r3, [pc, #80]	; (8005f84 <UART_SetConfig+0x2d0>)
 8005f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f36:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f3e:	d017      	beq.n	8005f70 <UART_SetConfig+0x2bc>
 8005f40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f44:	d817      	bhi.n	8005f76 <UART_SetConfig+0x2c2>
 8005f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4a:	d00b      	beq.n	8005f64 <UART_SetConfig+0x2b0>
 8005f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f50:	d811      	bhi.n	8005f76 <UART_SetConfig+0x2c2>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <UART_SetConfig+0x2aa>
 8005f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f5a:	d006      	beq.n	8005f6a <UART_SetConfig+0x2b6>
 8005f5c:	e00b      	b.n	8005f76 <UART_SetConfig+0x2c2>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	77fb      	strb	r3, [r7, #31]
 8005f62:	e04a      	b.n	8005ffa <UART_SetConfig+0x346>
 8005f64:	2302      	movs	r3, #2
 8005f66:	77fb      	strb	r3, [r7, #31]
 8005f68:	e047      	b.n	8005ffa <UART_SetConfig+0x346>
 8005f6a:	2304      	movs	r3, #4
 8005f6c:	77fb      	strb	r3, [r7, #31]
 8005f6e:	e044      	b.n	8005ffa <UART_SetConfig+0x346>
 8005f70:	2308      	movs	r3, #8
 8005f72:	77fb      	strb	r3, [r7, #31]
 8005f74:	e041      	b.n	8005ffa <UART_SetConfig+0x346>
 8005f76:	2310      	movs	r3, #16
 8005f78:	77fb      	strb	r3, [r7, #31]
 8005f7a:	e03e      	b.n	8005ffa <UART_SetConfig+0x346>
 8005f7c:	efff69f3 	.word	0xefff69f3
 8005f80:	40011000 	.word	0x40011000
 8005f84:	40023800 	.word	0x40023800
 8005f88:	40004400 	.word	0x40004400
 8005f8c:	40004800 	.word	0x40004800
 8005f90:	40004c00 	.word	0x40004c00
 8005f94:	40005000 	.word	0x40005000
 8005f98:	40011400 	.word	0x40011400
 8005f9c:	40007800 	.word	0x40007800
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a71      	ldr	r2, [pc, #452]	; (800616c <UART_SetConfig+0x4b8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d125      	bne.n	8005ff6 <UART_SetConfig+0x342>
 8005faa:	4b71      	ldr	r3, [pc, #452]	; (8006170 <UART_SetConfig+0x4bc>)
 8005fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005fb4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005fb8:	d017      	beq.n	8005fea <UART_SetConfig+0x336>
 8005fba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005fbe:	d817      	bhi.n	8005ff0 <UART_SetConfig+0x33c>
 8005fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc4:	d00b      	beq.n	8005fde <UART_SetConfig+0x32a>
 8005fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fca:	d811      	bhi.n	8005ff0 <UART_SetConfig+0x33c>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <UART_SetConfig+0x324>
 8005fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fd4:	d006      	beq.n	8005fe4 <UART_SetConfig+0x330>
 8005fd6:	e00b      	b.n	8005ff0 <UART_SetConfig+0x33c>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	e00d      	b.n	8005ffa <UART_SetConfig+0x346>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	77fb      	strb	r3, [r7, #31]
 8005fe2:	e00a      	b.n	8005ffa <UART_SetConfig+0x346>
 8005fe4:	2304      	movs	r3, #4
 8005fe6:	77fb      	strb	r3, [r7, #31]
 8005fe8:	e007      	b.n	8005ffa <UART_SetConfig+0x346>
 8005fea:	2308      	movs	r3, #8
 8005fec:	77fb      	strb	r3, [r7, #31]
 8005fee:	e004      	b.n	8005ffa <UART_SetConfig+0x346>
 8005ff0:	2310      	movs	r3, #16
 8005ff2:	77fb      	strb	r3, [r7, #31]
 8005ff4:	e001      	b.n	8005ffa <UART_SetConfig+0x346>
 8005ff6:	2310      	movs	r3, #16
 8005ff8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006002:	d15b      	bne.n	80060bc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006004:	7ffb      	ldrb	r3, [r7, #31]
 8006006:	2b08      	cmp	r3, #8
 8006008:	d827      	bhi.n	800605a <UART_SetConfig+0x3a6>
 800600a:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <UART_SetConfig+0x35c>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006035 	.word	0x08006035
 8006014:	0800603d 	.word	0x0800603d
 8006018:	08006045 	.word	0x08006045
 800601c:	0800605b 	.word	0x0800605b
 8006020:	0800604b 	.word	0x0800604b
 8006024:	0800605b 	.word	0x0800605b
 8006028:	0800605b 	.word	0x0800605b
 800602c:	0800605b 	.word	0x0800605b
 8006030:	08006053 	.word	0x08006053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006034:	f7fe fa1a 	bl	800446c <HAL_RCC_GetPCLK1Freq>
 8006038:	61b8      	str	r0, [r7, #24]
        break;
 800603a:	e013      	b.n	8006064 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800603c:	f7fe fa2a 	bl	8004494 <HAL_RCC_GetPCLK2Freq>
 8006040:	61b8      	str	r0, [r7, #24]
        break;
 8006042:	e00f      	b.n	8006064 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006044:	4b4b      	ldr	r3, [pc, #300]	; (8006174 <UART_SetConfig+0x4c0>)
 8006046:	61bb      	str	r3, [r7, #24]
        break;
 8006048:	e00c      	b.n	8006064 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800604a:	f7fe f921 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800604e:	61b8      	str	r0, [r7, #24]
        break;
 8006050:	e008      	b.n	8006064 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006056:	61bb      	str	r3, [r7, #24]
        break;
 8006058:	e004      	b.n	8006064 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	77bb      	strb	r3, [r7, #30]
        break;
 8006062:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d074      	beq.n	8006154 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	005a      	lsls	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	441a      	add	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	fbb2 f3f3 	udiv	r3, r2, r3
 800607e:	b29b      	uxth	r3, r3
 8006080:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	2b0f      	cmp	r3, #15
 8006086:	d916      	bls.n	80060b6 <UART_SetConfig+0x402>
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608e:	d212      	bcs.n	80060b6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	b29b      	uxth	r3, r3
 8006094:	f023 030f 	bic.w	r3, r3, #15
 8006098:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	085b      	lsrs	r3, r3, #1
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	89fb      	ldrh	r3, [r7, #14]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	89fa      	ldrh	r2, [r7, #14]
 80060b2:	60da      	str	r2, [r3, #12]
 80060b4:	e04e      	b.n	8006154 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	77bb      	strb	r3, [r7, #30]
 80060ba:	e04b      	b.n	8006154 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060bc:	7ffb      	ldrb	r3, [r7, #31]
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d827      	bhi.n	8006112 <UART_SetConfig+0x45e>
 80060c2:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <UART_SetConfig+0x414>)
 80060c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	080060f5 	.word	0x080060f5
 80060d0:	080060fd 	.word	0x080060fd
 80060d4:	08006113 	.word	0x08006113
 80060d8:	08006103 	.word	0x08006103
 80060dc:	08006113 	.word	0x08006113
 80060e0:	08006113 	.word	0x08006113
 80060e4:	08006113 	.word	0x08006113
 80060e8:	0800610b 	.word	0x0800610b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ec:	f7fe f9be 	bl	800446c <HAL_RCC_GetPCLK1Freq>
 80060f0:	61b8      	str	r0, [r7, #24]
        break;
 80060f2:	e013      	b.n	800611c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f4:	f7fe f9ce 	bl	8004494 <HAL_RCC_GetPCLK2Freq>
 80060f8:	61b8      	str	r0, [r7, #24]
        break;
 80060fa:	e00f      	b.n	800611c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060fc:	4b1d      	ldr	r3, [pc, #116]	; (8006174 <UART_SetConfig+0x4c0>)
 80060fe:	61bb      	str	r3, [r7, #24]
        break;
 8006100:	e00c      	b.n	800611c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006102:	f7fe f8c5 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8006106:	61b8      	str	r0, [r7, #24]
        break;
 8006108:	e008      	b.n	800611c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800610a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800610e:	61bb      	str	r3, [r7, #24]
        break;
 8006110:	e004      	b.n	800611c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	77bb      	strb	r3, [r7, #30]
        break;
 800611a:	bf00      	nop
    }

    if (pclk != 0U)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d018      	beq.n	8006154 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	085a      	lsrs	r2, r3, #1
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	441a      	add	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	fbb2 f3f3 	udiv	r3, r2, r3
 8006134:	b29b      	uxth	r3, r3
 8006136:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	2b0f      	cmp	r3, #15
 800613c:	d908      	bls.n	8006150 <UART_SetConfig+0x49c>
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006144:	d204      	bcs.n	8006150 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	60da      	str	r2, [r3, #12]
 800614e:	e001      	b.n	8006154 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006160:	7fbb      	ldrb	r3, [r7, #30]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40007c00 	.word	0x40007c00
 8006170:	40023800 	.word	0x40023800
 8006174:	00f42400 	.word	0x00f42400

08006178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	f003 0310 	and.w	r3, r3, #16
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01a      	beq.n	800628e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006276:	d10a      	bne.n	800628e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	605a      	str	r2, [r3, #4]
  }
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062cc:	f7fd f8f2 	bl	80034b4 <HAL_GetTick>
 80062d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d10e      	bne.n	80062fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f82d 	bl	800634e <UART_WaitOnFlagUntilTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e023      	b.n	8006346 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b04      	cmp	r3, #4
 800630a:	d10e      	bne.n	800632a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800630c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f817 	bl	800634e <UART_WaitOnFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e00d      	b.n	8006346 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2220      	movs	r2, #32
 800632e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	603b      	str	r3, [r7, #0]
 800635a:	4613      	mov	r3, r2
 800635c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800635e:	e05e      	b.n	800641e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006366:	d05a      	beq.n	800641e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006368:	f7fd f8a4 	bl	80034b4 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	429a      	cmp	r2, r3
 8006376:	d302      	bcc.n	800637e <UART_WaitOnFlagUntilTimeout+0x30>
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d11b      	bne.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800638c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2220      	movs	r2, #32
 80063a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e043      	b.n	800643e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d02c      	beq.n	800641e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d2:	d124      	bne.n	800641e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0201 	bic.w	r2, r2, #1
 80063fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2220      	movs	r2, #32
 8006402:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2220      	movs	r2, #32
 8006408:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e00f      	b.n	800643e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4013      	ands	r3, r2
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	429a      	cmp	r2, r3
 800642c:	bf0c      	ite	eq
 800642e:	2301      	moveq	r3, #1
 8006430:	2300      	movne	r3, #0
 8006432:	b2db      	uxtb	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	429a      	cmp	r2, r3
 800643a:	d091      	beq.n	8006360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <__errno>:
 8006448:	4b01      	ldr	r3, [pc, #4]	; (8006450 <__errno+0x8>)
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	20000010 	.word	0x20000010

08006454 <__libc_init_array>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	4d0d      	ldr	r5, [pc, #52]	; (800648c <__libc_init_array+0x38>)
 8006458:	4c0d      	ldr	r4, [pc, #52]	; (8006490 <__libc_init_array+0x3c>)
 800645a:	1b64      	subs	r4, r4, r5
 800645c:	10a4      	asrs	r4, r4, #2
 800645e:	2600      	movs	r6, #0
 8006460:	42a6      	cmp	r6, r4
 8006462:	d109      	bne.n	8006478 <__libc_init_array+0x24>
 8006464:	4d0b      	ldr	r5, [pc, #44]	; (8006494 <__libc_init_array+0x40>)
 8006466:	4c0c      	ldr	r4, [pc, #48]	; (8006498 <__libc_init_array+0x44>)
 8006468:	f002 fe26 	bl	80090b8 <_init>
 800646c:	1b64      	subs	r4, r4, r5
 800646e:	10a4      	asrs	r4, r4, #2
 8006470:	2600      	movs	r6, #0
 8006472:	42a6      	cmp	r6, r4
 8006474:	d105      	bne.n	8006482 <__libc_init_array+0x2e>
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	f855 3b04 	ldr.w	r3, [r5], #4
 800647c:	4798      	blx	r3
 800647e:	3601      	adds	r6, #1
 8006480:	e7ee      	b.n	8006460 <__libc_init_array+0xc>
 8006482:	f855 3b04 	ldr.w	r3, [r5], #4
 8006486:	4798      	blx	r3
 8006488:	3601      	adds	r6, #1
 800648a:	e7f2      	b.n	8006472 <__libc_init_array+0x1e>
 800648c:	0802f124 	.word	0x0802f124
 8006490:	0802f124 	.word	0x0802f124
 8006494:	0802f124 	.word	0x0802f124
 8006498:	0802f128 	.word	0x0802f128

0800649c <memset>:
 800649c:	4402      	add	r2, r0
 800649e:	4603      	mov	r3, r0
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d100      	bne.n	80064a6 <memset+0xa>
 80064a4:	4770      	bx	lr
 80064a6:	f803 1b01 	strb.w	r1, [r3], #1
 80064aa:	e7f9      	b.n	80064a0 <memset+0x4>

080064ac <__cvt>:
 80064ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ae:	ed2d 8b02 	vpush	{d8}
 80064b2:	eeb0 8b40 	vmov.f64	d8, d0
 80064b6:	b085      	sub	sp, #20
 80064b8:	4617      	mov	r7, r2
 80064ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80064bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80064be:	ee18 2a90 	vmov	r2, s17
 80064c2:	f025 0520 	bic.w	r5, r5, #32
 80064c6:	2a00      	cmp	r2, #0
 80064c8:	bfb6      	itet	lt
 80064ca:	222d      	movlt	r2, #45	; 0x2d
 80064cc:	2200      	movge	r2, #0
 80064ce:	eeb1 8b40 	vneglt.f64	d8, d0
 80064d2:	2d46      	cmp	r5, #70	; 0x46
 80064d4:	460c      	mov	r4, r1
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	d004      	beq.n	80064e4 <__cvt+0x38>
 80064da:	2d45      	cmp	r5, #69	; 0x45
 80064dc:	d100      	bne.n	80064e0 <__cvt+0x34>
 80064de:	3401      	adds	r4, #1
 80064e0:	2102      	movs	r1, #2
 80064e2:	e000      	b.n	80064e6 <__cvt+0x3a>
 80064e4:	2103      	movs	r1, #3
 80064e6:	ab03      	add	r3, sp, #12
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	ab02      	add	r3, sp, #8
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	4622      	mov	r2, r4
 80064f0:	4633      	mov	r3, r6
 80064f2:	eeb0 0b48 	vmov.f64	d0, d8
 80064f6:	f000 fccb 	bl	8006e90 <_dtoa_r>
 80064fa:	2d47      	cmp	r5, #71	; 0x47
 80064fc:	d109      	bne.n	8006512 <__cvt+0x66>
 80064fe:	07fb      	lsls	r3, r7, #31
 8006500:	d407      	bmi.n	8006512 <__cvt+0x66>
 8006502:	9b03      	ldr	r3, [sp, #12]
 8006504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006506:	1a1b      	subs	r3, r3, r0
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	b005      	add	sp, #20
 800650c:	ecbd 8b02 	vpop	{d8}
 8006510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006512:	2d46      	cmp	r5, #70	; 0x46
 8006514:	eb00 0204 	add.w	r2, r0, r4
 8006518:	d10c      	bne.n	8006534 <__cvt+0x88>
 800651a:	7803      	ldrb	r3, [r0, #0]
 800651c:	2b30      	cmp	r3, #48	; 0x30
 800651e:	d107      	bne.n	8006530 <__cvt+0x84>
 8006520:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006528:	bf1c      	itt	ne
 800652a:	f1c4 0401 	rsbne	r4, r4, #1
 800652e:	6034      	strne	r4, [r6, #0]
 8006530:	6833      	ldr	r3, [r6, #0]
 8006532:	441a      	add	r2, r3
 8006534:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653c:	bf08      	it	eq
 800653e:	9203      	streq	r2, [sp, #12]
 8006540:	2130      	movs	r1, #48	; 0x30
 8006542:	9b03      	ldr	r3, [sp, #12]
 8006544:	4293      	cmp	r3, r2
 8006546:	d2dc      	bcs.n	8006502 <__cvt+0x56>
 8006548:	1c5c      	adds	r4, r3, #1
 800654a:	9403      	str	r4, [sp, #12]
 800654c:	7019      	strb	r1, [r3, #0]
 800654e:	e7f8      	b.n	8006542 <__cvt+0x96>

08006550 <__exponent>:
 8006550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006552:	4603      	mov	r3, r0
 8006554:	2900      	cmp	r1, #0
 8006556:	bfb8      	it	lt
 8006558:	4249      	neglt	r1, r1
 800655a:	f803 2b02 	strb.w	r2, [r3], #2
 800655e:	bfb4      	ite	lt
 8006560:	222d      	movlt	r2, #45	; 0x2d
 8006562:	222b      	movge	r2, #43	; 0x2b
 8006564:	2909      	cmp	r1, #9
 8006566:	7042      	strb	r2, [r0, #1]
 8006568:	dd2a      	ble.n	80065c0 <__exponent+0x70>
 800656a:	f10d 0407 	add.w	r4, sp, #7
 800656e:	46a4      	mov	ip, r4
 8006570:	270a      	movs	r7, #10
 8006572:	46a6      	mov	lr, r4
 8006574:	460a      	mov	r2, r1
 8006576:	fb91 f6f7 	sdiv	r6, r1, r7
 800657a:	fb07 1516 	mls	r5, r7, r6, r1
 800657e:	3530      	adds	r5, #48	; 0x30
 8006580:	2a63      	cmp	r2, #99	; 0x63
 8006582:	f104 34ff 	add.w	r4, r4, #4294967295
 8006586:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800658a:	4631      	mov	r1, r6
 800658c:	dcf1      	bgt.n	8006572 <__exponent+0x22>
 800658e:	3130      	adds	r1, #48	; 0x30
 8006590:	f1ae 0502 	sub.w	r5, lr, #2
 8006594:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006598:	1c44      	adds	r4, r0, #1
 800659a:	4629      	mov	r1, r5
 800659c:	4561      	cmp	r1, ip
 800659e:	d30a      	bcc.n	80065b6 <__exponent+0x66>
 80065a0:	f10d 0209 	add.w	r2, sp, #9
 80065a4:	eba2 020e 	sub.w	r2, r2, lr
 80065a8:	4565      	cmp	r5, ip
 80065aa:	bf88      	it	hi
 80065ac:	2200      	movhi	r2, #0
 80065ae:	4413      	add	r3, r2
 80065b0:	1a18      	subs	r0, r3, r0
 80065b2:	b003      	add	sp, #12
 80065b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80065be:	e7ed      	b.n	800659c <__exponent+0x4c>
 80065c0:	2330      	movs	r3, #48	; 0x30
 80065c2:	3130      	adds	r1, #48	; 0x30
 80065c4:	7083      	strb	r3, [r0, #2]
 80065c6:	70c1      	strb	r1, [r0, #3]
 80065c8:	1d03      	adds	r3, r0, #4
 80065ca:	e7f1      	b.n	80065b0 <__exponent+0x60>
 80065cc:	0000      	movs	r0, r0
	...

080065d0 <_printf_float>:
 80065d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d4:	b08b      	sub	sp, #44	; 0x2c
 80065d6:	460c      	mov	r4, r1
 80065d8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80065dc:	4616      	mov	r6, r2
 80065de:	461f      	mov	r7, r3
 80065e0:	4605      	mov	r5, r0
 80065e2:	f001 f9d7 	bl	8007994 <_localeconv_r>
 80065e6:	f8d0 b000 	ldr.w	fp, [r0]
 80065ea:	4658      	mov	r0, fp
 80065ec:	f7f9 fe28 	bl	8000240 <strlen>
 80065f0:	2300      	movs	r3, #0
 80065f2:	9308      	str	r3, [sp, #32]
 80065f4:	f8d8 3000 	ldr.w	r3, [r8]
 80065f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80065fc:	6822      	ldr	r2, [r4, #0]
 80065fe:	3307      	adds	r3, #7
 8006600:	f023 0307 	bic.w	r3, r3, #7
 8006604:	f103 0108 	add.w	r1, r3, #8
 8006608:	f8c8 1000 	str.w	r1, [r8]
 800660c:	4682      	mov	sl, r0
 800660e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006612:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006616:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006878 <_printf_float+0x2a8>
 800661a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800661e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006622:	eeb4 6b47 	vcmp.f64	d6, d7
 8006626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800662a:	dd24      	ble.n	8006676 <_printf_float+0xa6>
 800662c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006634:	d502      	bpl.n	800663c <_printf_float+0x6c>
 8006636:	232d      	movs	r3, #45	; 0x2d
 8006638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800663c:	4b90      	ldr	r3, [pc, #576]	; (8006880 <_printf_float+0x2b0>)
 800663e:	4891      	ldr	r0, [pc, #580]	; (8006884 <_printf_float+0x2b4>)
 8006640:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006644:	bf94      	ite	ls
 8006646:	4698      	movls	r8, r3
 8006648:	4680      	movhi	r8, r0
 800664a:	2303      	movs	r3, #3
 800664c:	6123      	str	r3, [r4, #16]
 800664e:	f022 0204 	bic.w	r2, r2, #4
 8006652:	2300      	movs	r3, #0
 8006654:	6022      	str	r2, [r4, #0]
 8006656:	9304      	str	r3, [sp, #16]
 8006658:	9700      	str	r7, [sp, #0]
 800665a:	4633      	mov	r3, r6
 800665c:	aa09      	add	r2, sp, #36	; 0x24
 800665e:	4621      	mov	r1, r4
 8006660:	4628      	mov	r0, r5
 8006662:	f000 f9d3 	bl	8006a0c <_printf_common>
 8006666:	3001      	adds	r0, #1
 8006668:	f040 808a 	bne.w	8006780 <_printf_float+0x1b0>
 800666c:	f04f 30ff 	mov.w	r0, #4294967295
 8006670:	b00b      	add	sp, #44	; 0x2c
 8006672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006676:	eeb4 0b40 	vcmp.f64	d0, d0
 800667a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667e:	d709      	bvc.n	8006694 <_printf_float+0xc4>
 8006680:	ee10 3a90 	vmov	r3, s1
 8006684:	2b00      	cmp	r3, #0
 8006686:	bfbc      	itt	lt
 8006688:	232d      	movlt	r3, #45	; 0x2d
 800668a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800668e:	487e      	ldr	r0, [pc, #504]	; (8006888 <_printf_float+0x2b8>)
 8006690:	4b7e      	ldr	r3, [pc, #504]	; (800688c <_printf_float+0x2bc>)
 8006692:	e7d5      	b.n	8006640 <_printf_float+0x70>
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800669a:	9104      	str	r1, [sp, #16]
 800669c:	1c59      	adds	r1, r3, #1
 800669e:	d13c      	bne.n	800671a <_printf_float+0x14a>
 80066a0:	2306      	movs	r3, #6
 80066a2:	6063      	str	r3, [r4, #4]
 80066a4:	2300      	movs	r3, #0
 80066a6:	9303      	str	r3, [sp, #12]
 80066a8:	ab08      	add	r3, sp, #32
 80066aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80066ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066b2:	ab07      	add	r3, sp, #28
 80066b4:	6861      	ldr	r1, [r4, #4]
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	6022      	str	r2, [r4, #0]
 80066ba:	f10d 031b 	add.w	r3, sp, #27
 80066be:	4628      	mov	r0, r5
 80066c0:	f7ff fef4 	bl	80064ac <__cvt>
 80066c4:	9b04      	ldr	r3, [sp, #16]
 80066c6:	9907      	ldr	r1, [sp, #28]
 80066c8:	2b47      	cmp	r3, #71	; 0x47
 80066ca:	4680      	mov	r8, r0
 80066cc:	d108      	bne.n	80066e0 <_printf_float+0x110>
 80066ce:	1cc8      	adds	r0, r1, #3
 80066d0:	db02      	blt.n	80066d8 <_printf_float+0x108>
 80066d2:	6863      	ldr	r3, [r4, #4]
 80066d4:	4299      	cmp	r1, r3
 80066d6:	dd41      	ble.n	800675c <_printf_float+0x18c>
 80066d8:	f1a9 0902 	sub.w	r9, r9, #2
 80066dc:	fa5f f989 	uxtb.w	r9, r9
 80066e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80066e4:	d820      	bhi.n	8006728 <_printf_float+0x158>
 80066e6:	3901      	subs	r1, #1
 80066e8:	464a      	mov	r2, r9
 80066ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066ee:	9107      	str	r1, [sp, #28]
 80066f0:	f7ff ff2e 	bl	8006550 <__exponent>
 80066f4:	9a08      	ldr	r2, [sp, #32]
 80066f6:	9004      	str	r0, [sp, #16]
 80066f8:	1813      	adds	r3, r2, r0
 80066fa:	2a01      	cmp	r2, #1
 80066fc:	6123      	str	r3, [r4, #16]
 80066fe:	dc02      	bgt.n	8006706 <_printf_float+0x136>
 8006700:	6822      	ldr	r2, [r4, #0]
 8006702:	07d2      	lsls	r2, r2, #31
 8006704:	d501      	bpl.n	800670a <_printf_float+0x13a>
 8006706:	3301      	adds	r3, #1
 8006708:	6123      	str	r3, [r4, #16]
 800670a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0a2      	beq.n	8006658 <_printf_float+0x88>
 8006712:	232d      	movs	r3, #45	; 0x2d
 8006714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006718:	e79e      	b.n	8006658 <_printf_float+0x88>
 800671a:	9904      	ldr	r1, [sp, #16]
 800671c:	2947      	cmp	r1, #71	; 0x47
 800671e:	d1c1      	bne.n	80066a4 <_printf_float+0xd4>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1bf      	bne.n	80066a4 <_printf_float+0xd4>
 8006724:	2301      	movs	r3, #1
 8006726:	e7bc      	b.n	80066a2 <_printf_float+0xd2>
 8006728:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800672c:	d118      	bne.n	8006760 <_printf_float+0x190>
 800672e:	2900      	cmp	r1, #0
 8006730:	6863      	ldr	r3, [r4, #4]
 8006732:	dd0b      	ble.n	800674c <_printf_float+0x17c>
 8006734:	6121      	str	r1, [r4, #16]
 8006736:	b913      	cbnz	r3, 800673e <_printf_float+0x16e>
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	07d0      	lsls	r0, r2, #31
 800673c:	d502      	bpl.n	8006744 <_printf_float+0x174>
 800673e:	3301      	adds	r3, #1
 8006740:	440b      	add	r3, r1
 8006742:	6123      	str	r3, [r4, #16]
 8006744:	2300      	movs	r3, #0
 8006746:	65a1      	str	r1, [r4, #88]	; 0x58
 8006748:	9304      	str	r3, [sp, #16]
 800674a:	e7de      	b.n	800670a <_printf_float+0x13a>
 800674c:	b913      	cbnz	r3, 8006754 <_printf_float+0x184>
 800674e:	6822      	ldr	r2, [r4, #0]
 8006750:	07d2      	lsls	r2, r2, #31
 8006752:	d501      	bpl.n	8006758 <_printf_float+0x188>
 8006754:	3302      	adds	r3, #2
 8006756:	e7f4      	b.n	8006742 <_printf_float+0x172>
 8006758:	2301      	movs	r3, #1
 800675a:	e7f2      	b.n	8006742 <_printf_float+0x172>
 800675c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006760:	9b08      	ldr	r3, [sp, #32]
 8006762:	4299      	cmp	r1, r3
 8006764:	db05      	blt.n	8006772 <_printf_float+0x1a2>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	6121      	str	r1, [r4, #16]
 800676a:	07d8      	lsls	r0, r3, #31
 800676c:	d5ea      	bpl.n	8006744 <_printf_float+0x174>
 800676e:	1c4b      	adds	r3, r1, #1
 8006770:	e7e7      	b.n	8006742 <_printf_float+0x172>
 8006772:	2900      	cmp	r1, #0
 8006774:	bfd4      	ite	le
 8006776:	f1c1 0202 	rsble	r2, r1, #2
 800677a:	2201      	movgt	r2, #1
 800677c:	4413      	add	r3, r2
 800677e:	e7e0      	b.n	8006742 <_printf_float+0x172>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	055a      	lsls	r2, r3, #21
 8006784:	d407      	bmi.n	8006796 <_printf_float+0x1c6>
 8006786:	6923      	ldr	r3, [r4, #16]
 8006788:	4642      	mov	r2, r8
 800678a:	4631      	mov	r1, r6
 800678c:	4628      	mov	r0, r5
 800678e:	47b8      	blx	r7
 8006790:	3001      	adds	r0, #1
 8006792:	d12a      	bne.n	80067ea <_printf_float+0x21a>
 8006794:	e76a      	b.n	800666c <_printf_float+0x9c>
 8006796:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800679a:	f240 80e2 	bls.w	8006962 <_printf_float+0x392>
 800679e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80067a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80067a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067aa:	d133      	bne.n	8006814 <_printf_float+0x244>
 80067ac:	4a38      	ldr	r2, [pc, #224]	; (8006890 <_printf_float+0x2c0>)
 80067ae:	2301      	movs	r3, #1
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	f43f af58 	beq.w	800666c <_printf_float+0x9c>
 80067bc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	db02      	blt.n	80067ca <_printf_float+0x1fa>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	07d8      	lsls	r0, r3, #31
 80067c8:	d50f      	bpl.n	80067ea <_printf_float+0x21a>
 80067ca:	4653      	mov	r3, sl
 80067cc:	465a      	mov	r2, fp
 80067ce:	4631      	mov	r1, r6
 80067d0:	4628      	mov	r0, r5
 80067d2:	47b8      	blx	r7
 80067d4:	3001      	adds	r0, #1
 80067d6:	f43f af49 	beq.w	800666c <_printf_float+0x9c>
 80067da:	f04f 0800 	mov.w	r8, #0
 80067de:	f104 091a 	add.w	r9, r4, #26
 80067e2:	9b08      	ldr	r3, [sp, #32]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	4543      	cmp	r3, r8
 80067e8:	dc09      	bgt.n	80067fe <_printf_float+0x22e>
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	079b      	lsls	r3, r3, #30
 80067ee:	f100 8108 	bmi.w	8006a02 <_printf_float+0x432>
 80067f2:	68e0      	ldr	r0, [r4, #12]
 80067f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f6:	4298      	cmp	r0, r3
 80067f8:	bfb8      	it	lt
 80067fa:	4618      	movlt	r0, r3
 80067fc:	e738      	b.n	8006670 <_printf_float+0xa0>
 80067fe:	2301      	movs	r3, #1
 8006800:	464a      	mov	r2, r9
 8006802:	4631      	mov	r1, r6
 8006804:	4628      	mov	r0, r5
 8006806:	47b8      	blx	r7
 8006808:	3001      	adds	r0, #1
 800680a:	f43f af2f 	beq.w	800666c <_printf_float+0x9c>
 800680e:	f108 0801 	add.w	r8, r8, #1
 8006812:	e7e6      	b.n	80067e2 <_printf_float+0x212>
 8006814:	9b07      	ldr	r3, [sp, #28]
 8006816:	2b00      	cmp	r3, #0
 8006818:	dc3c      	bgt.n	8006894 <_printf_float+0x2c4>
 800681a:	4a1d      	ldr	r2, [pc, #116]	; (8006890 <_printf_float+0x2c0>)
 800681c:	2301      	movs	r3, #1
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f af21 	beq.w	800666c <_printf_float+0x9c>
 800682a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800682e:	4313      	orrs	r3, r2
 8006830:	d102      	bne.n	8006838 <_printf_float+0x268>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	07d9      	lsls	r1, r3, #31
 8006836:	d5d8      	bpl.n	80067ea <_printf_float+0x21a>
 8006838:	4653      	mov	r3, sl
 800683a:	465a      	mov	r2, fp
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	f43f af12 	beq.w	800666c <_printf_float+0x9c>
 8006848:	f04f 0900 	mov.w	r9, #0
 800684c:	f104 0a1a 	add.w	sl, r4, #26
 8006850:	9b07      	ldr	r3, [sp, #28]
 8006852:	425b      	negs	r3, r3
 8006854:	454b      	cmp	r3, r9
 8006856:	dc01      	bgt.n	800685c <_printf_float+0x28c>
 8006858:	9b08      	ldr	r3, [sp, #32]
 800685a:	e795      	b.n	8006788 <_printf_float+0x1b8>
 800685c:	2301      	movs	r3, #1
 800685e:	4652      	mov	r2, sl
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	f43f af00 	beq.w	800666c <_printf_float+0x9c>
 800686c:	f109 0901 	add.w	r9, r9, #1
 8006870:	e7ee      	b.n	8006850 <_printf_float+0x280>
 8006872:	bf00      	nop
 8006874:	f3af 8000 	nop.w
 8006878:	ffffffff 	.word	0xffffffff
 800687c:	7fefffff 	.word	0x7fefffff
 8006880:	0802ed3c 	.word	0x0802ed3c
 8006884:	0802ed40 	.word	0x0802ed40
 8006888:	0802ed48 	.word	0x0802ed48
 800688c:	0802ed44 	.word	0x0802ed44
 8006890:	0802ed4c 	.word	0x0802ed4c
 8006894:	9a08      	ldr	r2, [sp, #32]
 8006896:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006898:	429a      	cmp	r2, r3
 800689a:	bfa8      	it	ge
 800689c:	461a      	movge	r2, r3
 800689e:	2a00      	cmp	r2, #0
 80068a0:	4691      	mov	r9, r2
 80068a2:	dc38      	bgt.n	8006916 <_printf_float+0x346>
 80068a4:	2300      	movs	r3, #0
 80068a6:	9305      	str	r3, [sp, #20]
 80068a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ac:	f104 021a 	add.w	r2, r4, #26
 80068b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068b2:	9905      	ldr	r1, [sp, #20]
 80068b4:	9304      	str	r3, [sp, #16]
 80068b6:	eba3 0309 	sub.w	r3, r3, r9
 80068ba:	428b      	cmp	r3, r1
 80068bc:	dc33      	bgt.n	8006926 <_printf_float+0x356>
 80068be:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	db3c      	blt.n	8006940 <_printf_float+0x370>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	07da      	lsls	r2, r3, #31
 80068ca:	d439      	bmi.n	8006940 <_printf_float+0x370>
 80068cc:	9a08      	ldr	r2, [sp, #32]
 80068ce:	9b04      	ldr	r3, [sp, #16]
 80068d0:	9907      	ldr	r1, [sp, #28]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	eba2 0901 	sub.w	r9, r2, r1
 80068d8:	4599      	cmp	r9, r3
 80068da:	bfa8      	it	ge
 80068dc:	4699      	movge	r9, r3
 80068de:	f1b9 0f00 	cmp.w	r9, #0
 80068e2:	dc35      	bgt.n	8006950 <_printf_float+0x380>
 80068e4:	f04f 0800 	mov.w	r8, #0
 80068e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ec:	f104 0a1a 	add.w	sl, r4, #26
 80068f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	eba3 0309 	sub.w	r3, r3, r9
 80068fa:	4543      	cmp	r3, r8
 80068fc:	f77f af75 	ble.w	80067ea <_printf_float+0x21a>
 8006900:	2301      	movs	r3, #1
 8006902:	4652      	mov	r2, sl
 8006904:	4631      	mov	r1, r6
 8006906:	4628      	mov	r0, r5
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	f43f aeae 	beq.w	800666c <_printf_float+0x9c>
 8006910:	f108 0801 	add.w	r8, r8, #1
 8006914:	e7ec      	b.n	80068f0 <_printf_float+0x320>
 8006916:	4613      	mov	r3, r2
 8006918:	4631      	mov	r1, r6
 800691a:	4642      	mov	r2, r8
 800691c:	4628      	mov	r0, r5
 800691e:	47b8      	blx	r7
 8006920:	3001      	adds	r0, #1
 8006922:	d1bf      	bne.n	80068a4 <_printf_float+0x2d4>
 8006924:	e6a2      	b.n	800666c <_printf_float+0x9c>
 8006926:	2301      	movs	r3, #1
 8006928:	4631      	mov	r1, r6
 800692a:	4628      	mov	r0, r5
 800692c:	9204      	str	r2, [sp, #16]
 800692e:	47b8      	blx	r7
 8006930:	3001      	adds	r0, #1
 8006932:	f43f ae9b 	beq.w	800666c <_printf_float+0x9c>
 8006936:	9b05      	ldr	r3, [sp, #20]
 8006938:	9a04      	ldr	r2, [sp, #16]
 800693a:	3301      	adds	r3, #1
 800693c:	9305      	str	r3, [sp, #20]
 800693e:	e7b7      	b.n	80068b0 <_printf_float+0x2e0>
 8006940:	4653      	mov	r3, sl
 8006942:	465a      	mov	r2, fp
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	d1be      	bne.n	80068cc <_printf_float+0x2fc>
 800694e:	e68d      	b.n	800666c <_printf_float+0x9c>
 8006950:	9a04      	ldr	r2, [sp, #16]
 8006952:	464b      	mov	r3, r9
 8006954:	4442      	add	r2, r8
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	d1c1      	bne.n	80068e4 <_printf_float+0x314>
 8006960:	e684      	b.n	800666c <_printf_float+0x9c>
 8006962:	9a08      	ldr	r2, [sp, #32]
 8006964:	2a01      	cmp	r2, #1
 8006966:	dc01      	bgt.n	800696c <_printf_float+0x39c>
 8006968:	07db      	lsls	r3, r3, #31
 800696a:	d537      	bpl.n	80069dc <_printf_float+0x40c>
 800696c:	2301      	movs	r3, #1
 800696e:	4642      	mov	r2, r8
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	47b8      	blx	r7
 8006976:	3001      	adds	r0, #1
 8006978:	f43f ae78 	beq.w	800666c <_printf_float+0x9c>
 800697c:	4653      	mov	r3, sl
 800697e:	465a      	mov	r2, fp
 8006980:	4631      	mov	r1, r6
 8006982:	4628      	mov	r0, r5
 8006984:	47b8      	blx	r7
 8006986:	3001      	adds	r0, #1
 8006988:	f43f ae70 	beq.w	800666c <_printf_float+0x9c>
 800698c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006990:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006998:	d01b      	beq.n	80069d2 <_printf_float+0x402>
 800699a:	9b08      	ldr	r3, [sp, #32]
 800699c:	f108 0201 	add.w	r2, r8, #1
 80069a0:	3b01      	subs	r3, #1
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	d10e      	bne.n	80069ca <_printf_float+0x3fa>
 80069ac:	e65e      	b.n	800666c <_printf_float+0x9c>
 80069ae:	2301      	movs	r3, #1
 80069b0:	464a      	mov	r2, r9
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	f43f ae57 	beq.w	800666c <_printf_float+0x9c>
 80069be:	f108 0801 	add.w	r8, r8, #1
 80069c2:	9b08      	ldr	r3, [sp, #32]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	4543      	cmp	r3, r8
 80069c8:	dcf1      	bgt.n	80069ae <_printf_float+0x3de>
 80069ca:	9b04      	ldr	r3, [sp, #16]
 80069cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069d0:	e6db      	b.n	800678a <_printf_float+0x1ba>
 80069d2:	f04f 0800 	mov.w	r8, #0
 80069d6:	f104 091a 	add.w	r9, r4, #26
 80069da:	e7f2      	b.n	80069c2 <_printf_float+0x3f2>
 80069dc:	2301      	movs	r3, #1
 80069de:	4642      	mov	r2, r8
 80069e0:	e7df      	b.n	80069a2 <_printf_float+0x3d2>
 80069e2:	2301      	movs	r3, #1
 80069e4:	464a      	mov	r2, r9
 80069e6:	4631      	mov	r1, r6
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b8      	blx	r7
 80069ec:	3001      	adds	r0, #1
 80069ee:	f43f ae3d 	beq.w	800666c <_printf_float+0x9c>
 80069f2:	f108 0801 	add.w	r8, r8, #1
 80069f6:	68e3      	ldr	r3, [r4, #12]
 80069f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069fa:	1a5b      	subs	r3, r3, r1
 80069fc:	4543      	cmp	r3, r8
 80069fe:	dcf0      	bgt.n	80069e2 <_printf_float+0x412>
 8006a00:	e6f7      	b.n	80067f2 <_printf_float+0x222>
 8006a02:	f04f 0800 	mov.w	r8, #0
 8006a06:	f104 0919 	add.w	r9, r4, #25
 8006a0a:	e7f4      	b.n	80069f6 <_printf_float+0x426>

08006a0c <_printf_common>:
 8006a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a10:	4616      	mov	r6, r2
 8006a12:	4699      	mov	r9, r3
 8006a14:	688a      	ldr	r2, [r1, #8]
 8006a16:	690b      	ldr	r3, [r1, #16]
 8006a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	bfb8      	it	lt
 8006a20:	4613      	movlt	r3, r2
 8006a22:	6033      	str	r3, [r6, #0]
 8006a24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a28:	4607      	mov	r7, r0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	b10a      	cbz	r2, 8006a32 <_printf_common+0x26>
 8006a2e:	3301      	adds	r3, #1
 8006a30:	6033      	str	r3, [r6, #0]
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	0699      	lsls	r1, r3, #26
 8006a36:	bf42      	ittt	mi
 8006a38:	6833      	ldrmi	r3, [r6, #0]
 8006a3a:	3302      	addmi	r3, #2
 8006a3c:	6033      	strmi	r3, [r6, #0]
 8006a3e:	6825      	ldr	r5, [r4, #0]
 8006a40:	f015 0506 	ands.w	r5, r5, #6
 8006a44:	d106      	bne.n	8006a54 <_printf_common+0x48>
 8006a46:	f104 0a19 	add.w	sl, r4, #25
 8006a4a:	68e3      	ldr	r3, [r4, #12]
 8006a4c:	6832      	ldr	r2, [r6, #0]
 8006a4e:	1a9b      	subs	r3, r3, r2
 8006a50:	42ab      	cmp	r3, r5
 8006a52:	dc26      	bgt.n	8006aa2 <_printf_common+0x96>
 8006a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a58:	1e13      	subs	r3, r2, #0
 8006a5a:	6822      	ldr	r2, [r4, #0]
 8006a5c:	bf18      	it	ne
 8006a5e:	2301      	movne	r3, #1
 8006a60:	0692      	lsls	r2, r2, #26
 8006a62:	d42b      	bmi.n	8006abc <_printf_common+0xb0>
 8006a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a68:	4649      	mov	r1, r9
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	47c0      	blx	r8
 8006a6e:	3001      	adds	r0, #1
 8006a70:	d01e      	beq.n	8006ab0 <_printf_common+0xa4>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	68e5      	ldr	r5, [r4, #12]
 8006a76:	6832      	ldr	r2, [r6, #0]
 8006a78:	f003 0306 	and.w	r3, r3, #6
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	bf08      	it	eq
 8006a80:	1aad      	subeq	r5, r5, r2
 8006a82:	68a3      	ldr	r3, [r4, #8]
 8006a84:	6922      	ldr	r2, [r4, #16]
 8006a86:	bf0c      	ite	eq
 8006a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a8c:	2500      	movne	r5, #0
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	bfc4      	itt	gt
 8006a92:	1a9b      	subgt	r3, r3, r2
 8006a94:	18ed      	addgt	r5, r5, r3
 8006a96:	2600      	movs	r6, #0
 8006a98:	341a      	adds	r4, #26
 8006a9a:	42b5      	cmp	r5, r6
 8006a9c:	d11a      	bne.n	8006ad4 <_printf_common+0xc8>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e008      	b.n	8006ab4 <_printf_common+0xa8>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	4652      	mov	r2, sl
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	47c0      	blx	r8
 8006aac:	3001      	adds	r0, #1
 8006aae:	d103      	bne.n	8006ab8 <_printf_common+0xac>
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab8:	3501      	adds	r5, #1
 8006aba:	e7c6      	b.n	8006a4a <_printf_common+0x3e>
 8006abc:	18e1      	adds	r1, r4, r3
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	2030      	movs	r0, #48	; 0x30
 8006ac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ac6:	4422      	add	r2, r4
 8006ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ad0:	3302      	adds	r3, #2
 8006ad2:	e7c7      	b.n	8006a64 <_printf_common+0x58>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	4622      	mov	r2, r4
 8006ad8:	4649      	mov	r1, r9
 8006ada:	4638      	mov	r0, r7
 8006adc:	47c0      	blx	r8
 8006ade:	3001      	adds	r0, #1
 8006ae0:	d0e6      	beq.n	8006ab0 <_printf_common+0xa4>
 8006ae2:	3601      	adds	r6, #1
 8006ae4:	e7d9      	b.n	8006a9a <_printf_common+0x8e>
	...

08006ae8 <_printf_i>:
 8006ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aec:	460c      	mov	r4, r1
 8006aee:	4691      	mov	r9, r2
 8006af0:	7e27      	ldrb	r7, [r4, #24]
 8006af2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006af4:	2f78      	cmp	r7, #120	; 0x78
 8006af6:	4680      	mov	r8, r0
 8006af8:	469a      	mov	sl, r3
 8006afa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006afe:	d807      	bhi.n	8006b10 <_printf_i+0x28>
 8006b00:	2f62      	cmp	r7, #98	; 0x62
 8006b02:	d80a      	bhi.n	8006b1a <_printf_i+0x32>
 8006b04:	2f00      	cmp	r7, #0
 8006b06:	f000 80d8 	beq.w	8006cba <_printf_i+0x1d2>
 8006b0a:	2f58      	cmp	r7, #88	; 0x58
 8006b0c:	f000 80a3 	beq.w	8006c56 <_printf_i+0x16e>
 8006b10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b18:	e03a      	b.n	8006b90 <_printf_i+0xa8>
 8006b1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b1e:	2b15      	cmp	r3, #21
 8006b20:	d8f6      	bhi.n	8006b10 <_printf_i+0x28>
 8006b22:	a001      	add	r0, pc, #4	; (adr r0, 8006b28 <_printf_i+0x40>)
 8006b24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b28:	08006b81 	.word	0x08006b81
 8006b2c:	08006b95 	.word	0x08006b95
 8006b30:	08006b11 	.word	0x08006b11
 8006b34:	08006b11 	.word	0x08006b11
 8006b38:	08006b11 	.word	0x08006b11
 8006b3c:	08006b11 	.word	0x08006b11
 8006b40:	08006b95 	.word	0x08006b95
 8006b44:	08006b11 	.word	0x08006b11
 8006b48:	08006b11 	.word	0x08006b11
 8006b4c:	08006b11 	.word	0x08006b11
 8006b50:	08006b11 	.word	0x08006b11
 8006b54:	08006ca1 	.word	0x08006ca1
 8006b58:	08006bc5 	.word	0x08006bc5
 8006b5c:	08006c83 	.word	0x08006c83
 8006b60:	08006b11 	.word	0x08006b11
 8006b64:	08006b11 	.word	0x08006b11
 8006b68:	08006cc3 	.word	0x08006cc3
 8006b6c:	08006b11 	.word	0x08006b11
 8006b70:	08006bc5 	.word	0x08006bc5
 8006b74:	08006b11 	.word	0x08006b11
 8006b78:	08006b11 	.word	0x08006b11
 8006b7c:	08006c8b 	.word	0x08006c8b
 8006b80:	680b      	ldr	r3, [r1, #0]
 8006b82:	1d1a      	adds	r2, r3, #4
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	600a      	str	r2, [r1, #0]
 8006b88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b90:	2301      	movs	r3, #1
 8006b92:	e0a3      	b.n	8006cdc <_printf_i+0x1f4>
 8006b94:	6825      	ldr	r5, [r4, #0]
 8006b96:	6808      	ldr	r0, [r1, #0]
 8006b98:	062e      	lsls	r6, r5, #24
 8006b9a:	f100 0304 	add.w	r3, r0, #4
 8006b9e:	d50a      	bpl.n	8006bb6 <_printf_i+0xce>
 8006ba0:	6805      	ldr	r5, [r0, #0]
 8006ba2:	600b      	str	r3, [r1, #0]
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	da03      	bge.n	8006bb0 <_printf_i+0xc8>
 8006ba8:	232d      	movs	r3, #45	; 0x2d
 8006baa:	426d      	negs	r5, r5
 8006bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bb0:	485e      	ldr	r0, [pc, #376]	; (8006d2c <_printf_i+0x244>)
 8006bb2:	230a      	movs	r3, #10
 8006bb4:	e019      	b.n	8006bea <_printf_i+0x102>
 8006bb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006bba:	6805      	ldr	r5, [r0, #0]
 8006bbc:	600b      	str	r3, [r1, #0]
 8006bbe:	bf18      	it	ne
 8006bc0:	b22d      	sxthne	r5, r5
 8006bc2:	e7ef      	b.n	8006ba4 <_printf_i+0xbc>
 8006bc4:	680b      	ldr	r3, [r1, #0]
 8006bc6:	6825      	ldr	r5, [r4, #0]
 8006bc8:	1d18      	adds	r0, r3, #4
 8006bca:	6008      	str	r0, [r1, #0]
 8006bcc:	0628      	lsls	r0, r5, #24
 8006bce:	d501      	bpl.n	8006bd4 <_printf_i+0xec>
 8006bd0:	681d      	ldr	r5, [r3, #0]
 8006bd2:	e002      	b.n	8006bda <_printf_i+0xf2>
 8006bd4:	0669      	lsls	r1, r5, #25
 8006bd6:	d5fb      	bpl.n	8006bd0 <_printf_i+0xe8>
 8006bd8:	881d      	ldrh	r5, [r3, #0]
 8006bda:	4854      	ldr	r0, [pc, #336]	; (8006d2c <_printf_i+0x244>)
 8006bdc:	2f6f      	cmp	r7, #111	; 0x6f
 8006bde:	bf0c      	ite	eq
 8006be0:	2308      	moveq	r3, #8
 8006be2:	230a      	movne	r3, #10
 8006be4:	2100      	movs	r1, #0
 8006be6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bea:	6866      	ldr	r6, [r4, #4]
 8006bec:	60a6      	str	r6, [r4, #8]
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	bfa2      	ittt	ge
 8006bf2:	6821      	ldrge	r1, [r4, #0]
 8006bf4:	f021 0104 	bicge.w	r1, r1, #4
 8006bf8:	6021      	strge	r1, [r4, #0]
 8006bfa:	b90d      	cbnz	r5, 8006c00 <_printf_i+0x118>
 8006bfc:	2e00      	cmp	r6, #0
 8006bfe:	d04d      	beq.n	8006c9c <_printf_i+0x1b4>
 8006c00:	4616      	mov	r6, r2
 8006c02:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c06:	fb03 5711 	mls	r7, r3, r1, r5
 8006c0a:	5dc7      	ldrb	r7, [r0, r7]
 8006c0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c10:	462f      	mov	r7, r5
 8006c12:	42bb      	cmp	r3, r7
 8006c14:	460d      	mov	r5, r1
 8006c16:	d9f4      	bls.n	8006c02 <_printf_i+0x11a>
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d10b      	bne.n	8006c34 <_printf_i+0x14c>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	07df      	lsls	r7, r3, #31
 8006c20:	d508      	bpl.n	8006c34 <_printf_i+0x14c>
 8006c22:	6923      	ldr	r3, [r4, #16]
 8006c24:	6861      	ldr	r1, [r4, #4]
 8006c26:	4299      	cmp	r1, r3
 8006c28:	bfde      	ittt	le
 8006c2a:	2330      	movle	r3, #48	; 0x30
 8006c2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c34:	1b92      	subs	r2, r2, r6
 8006c36:	6122      	str	r2, [r4, #16]
 8006c38:	f8cd a000 	str.w	sl, [sp]
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	aa03      	add	r2, sp, #12
 8006c40:	4621      	mov	r1, r4
 8006c42:	4640      	mov	r0, r8
 8006c44:	f7ff fee2 	bl	8006a0c <_printf_common>
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d14c      	bne.n	8006ce6 <_printf_i+0x1fe>
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c50:	b004      	add	sp, #16
 8006c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c56:	4835      	ldr	r0, [pc, #212]	; (8006d2c <_printf_i+0x244>)
 8006c58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	680e      	ldr	r6, [r1, #0]
 8006c60:	061f      	lsls	r7, r3, #24
 8006c62:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c66:	600e      	str	r6, [r1, #0]
 8006c68:	d514      	bpl.n	8006c94 <_printf_i+0x1ac>
 8006c6a:	07d9      	lsls	r1, r3, #31
 8006c6c:	bf44      	itt	mi
 8006c6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006c72:	6023      	strmi	r3, [r4, #0]
 8006c74:	b91d      	cbnz	r5, 8006c7e <_printf_i+0x196>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	f023 0320 	bic.w	r3, r3, #32
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	2310      	movs	r3, #16
 8006c80:	e7b0      	b.n	8006be4 <_printf_i+0xfc>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	f043 0320 	orr.w	r3, r3, #32
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	2378      	movs	r3, #120	; 0x78
 8006c8c:	4828      	ldr	r0, [pc, #160]	; (8006d30 <_printf_i+0x248>)
 8006c8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c92:	e7e3      	b.n	8006c5c <_printf_i+0x174>
 8006c94:	065e      	lsls	r6, r3, #25
 8006c96:	bf48      	it	mi
 8006c98:	b2ad      	uxthmi	r5, r5
 8006c9a:	e7e6      	b.n	8006c6a <_printf_i+0x182>
 8006c9c:	4616      	mov	r6, r2
 8006c9e:	e7bb      	b.n	8006c18 <_printf_i+0x130>
 8006ca0:	680b      	ldr	r3, [r1, #0]
 8006ca2:	6826      	ldr	r6, [r4, #0]
 8006ca4:	6960      	ldr	r0, [r4, #20]
 8006ca6:	1d1d      	adds	r5, r3, #4
 8006ca8:	600d      	str	r5, [r1, #0]
 8006caa:	0635      	lsls	r5, r6, #24
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	d501      	bpl.n	8006cb4 <_printf_i+0x1cc>
 8006cb0:	6018      	str	r0, [r3, #0]
 8006cb2:	e002      	b.n	8006cba <_printf_i+0x1d2>
 8006cb4:	0671      	lsls	r1, r6, #25
 8006cb6:	d5fb      	bpl.n	8006cb0 <_printf_i+0x1c8>
 8006cb8:	8018      	strh	r0, [r3, #0]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	6123      	str	r3, [r4, #16]
 8006cbe:	4616      	mov	r6, r2
 8006cc0:	e7ba      	b.n	8006c38 <_printf_i+0x150>
 8006cc2:	680b      	ldr	r3, [r1, #0]
 8006cc4:	1d1a      	adds	r2, r3, #4
 8006cc6:	600a      	str	r2, [r1, #0]
 8006cc8:	681e      	ldr	r6, [r3, #0]
 8006cca:	6862      	ldr	r2, [r4, #4]
 8006ccc:	2100      	movs	r1, #0
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7f9 fabe 	bl	8000250 <memchr>
 8006cd4:	b108      	cbz	r0, 8006cda <_printf_i+0x1f2>
 8006cd6:	1b80      	subs	r0, r0, r6
 8006cd8:	6060      	str	r0, [r4, #4]
 8006cda:	6863      	ldr	r3, [r4, #4]
 8006cdc:	6123      	str	r3, [r4, #16]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce4:	e7a8      	b.n	8006c38 <_printf_i+0x150>
 8006ce6:	6923      	ldr	r3, [r4, #16]
 8006ce8:	4632      	mov	r2, r6
 8006cea:	4649      	mov	r1, r9
 8006cec:	4640      	mov	r0, r8
 8006cee:	47d0      	blx	sl
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d0ab      	beq.n	8006c4c <_printf_i+0x164>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	079b      	lsls	r3, r3, #30
 8006cf8:	d413      	bmi.n	8006d22 <_printf_i+0x23a>
 8006cfa:	68e0      	ldr	r0, [r4, #12]
 8006cfc:	9b03      	ldr	r3, [sp, #12]
 8006cfe:	4298      	cmp	r0, r3
 8006d00:	bfb8      	it	lt
 8006d02:	4618      	movlt	r0, r3
 8006d04:	e7a4      	b.n	8006c50 <_printf_i+0x168>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4632      	mov	r2, r6
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	47d0      	blx	sl
 8006d10:	3001      	adds	r0, #1
 8006d12:	d09b      	beq.n	8006c4c <_printf_i+0x164>
 8006d14:	3501      	adds	r5, #1
 8006d16:	68e3      	ldr	r3, [r4, #12]
 8006d18:	9903      	ldr	r1, [sp, #12]
 8006d1a:	1a5b      	subs	r3, r3, r1
 8006d1c:	42ab      	cmp	r3, r5
 8006d1e:	dcf2      	bgt.n	8006d06 <_printf_i+0x21e>
 8006d20:	e7eb      	b.n	8006cfa <_printf_i+0x212>
 8006d22:	2500      	movs	r5, #0
 8006d24:	f104 0619 	add.w	r6, r4, #25
 8006d28:	e7f5      	b.n	8006d16 <_printf_i+0x22e>
 8006d2a:	bf00      	nop
 8006d2c:	0802ed4e 	.word	0x0802ed4e
 8006d30:	0802ed5f 	.word	0x0802ed5f

08006d34 <siprintf>:
 8006d34:	b40e      	push	{r1, r2, r3}
 8006d36:	b500      	push	{lr}
 8006d38:	b09c      	sub	sp, #112	; 0x70
 8006d3a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d3c:	9002      	str	r0, [sp, #8]
 8006d3e:	9006      	str	r0, [sp, #24]
 8006d40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d44:	4809      	ldr	r0, [pc, #36]	; (8006d6c <siprintf+0x38>)
 8006d46:	9107      	str	r1, [sp, #28]
 8006d48:	9104      	str	r1, [sp, #16]
 8006d4a:	4909      	ldr	r1, [pc, #36]	; (8006d70 <siprintf+0x3c>)
 8006d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d50:	9105      	str	r1, [sp, #20]
 8006d52:	6800      	ldr	r0, [r0, #0]
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	a902      	add	r1, sp, #8
 8006d58:	f001 faca 	bl	80082f0 <_svfiprintf_r>
 8006d5c:	9b02      	ldr	r3, [sp, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	701a      	strb	r2, [r3, #0]
 8006d62:	b01c      	add	sp, #112	; 0x70
 8006d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d68:	b003      	add	sp, #12
 8006d6a:	4770      	bx	lr
 8006d6c:	20000010 	.word	0x20000010
 8006d70:	ffff0208 	.word	0xffff0208

08006d74 <quorem>:
 8006d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	6903      	ldr	r3, [r0, #16]
 8006d7a:	690c      	ldr	r4, [r1, #16]
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	4607      	mov	r7, r0
 8006d80:	f2c0 8081 	blt.w	8006e86 <quorem+0x112>
 8006d84:	3c01      	subs	r4, #1
 8006d86:	f101 0814 	add.w	r8, r1, #20
 8006d8a:	f100 0514 	add.w	r5, r0, #20
 8006d8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006da4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006da8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006dac:	d331      	bcc.n	8006e12 <quorem+0x9e>
 8006dae:	f04f 0e00 	mov.w	lr, #0
 8006db2:	4640      	mov	r0, r8
 8006db4:	46ac      	mov	ip, r5
 8006db6:	46f2      	mov	sl, lr
 8006db8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006dbc:	b293      	uxth	r3, r2
 8006dbe:	fb06 e303 	mla	r3, r6, r3, lr
 8006dc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	ebaa 0303 	sub.w	r3, sl, r3
 8006dcc:	0c12      	lsrs	r2, r2, #16
 8006dce:	f8dc a000 	ldr.w	sl, [ip]
 8006dd2:	fb06 e202 	mla	r2, r6, r2, lr
 8006dd6:	fa13 f38a 	uxtah	r3, r3, sl
 8006dda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dde:	fa1f fa82 	uxth.w	sl, r2
 8006de2:	f8dc 2000 	ldr.w	r2, [ip]
 8006de6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006dea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006df4:	4581      	cmp	r9, r0
 8006df6:	f84c 3b04 	str.w	r3, [ip], #4
 8006dfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dfe:	d2db      	bcs.n	8006db8 <quorem+0x44>
 8006e00:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e04:	b92b      	cbnz	r3, 8006e12 <quorem+0x9e>
 8006e06:	9b01      	ldr	r3, [sp, #4]
 8006e08:	3b04      	subs	r3, #4
 8006e0a:	429d      	cmp	r5, r3
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	d32e      	bcc.n	8006e6e <quorem+0xfa>
 8006e10:	613c      	str	r4, [r7, #16]
 8006e12:	4638      	mov	r0, r7
 8006e14:	f001 f856 	bl	8007ec4 <__mcmp>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	db24      	blt.n	8006e66 <quorem+0xf2>
 8006e1c:	3601      	adds	r6, #1
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f04f 0c00 	mov.w	ip, #0
 8006e24:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e28:	f8d0 e000 	ldr.w	lr, [r0]
 8006e2c:	b293      	uxth	r3, r2
 8006e2e:	ebac 0303 	sub.w	r3, ip, r3
 8006e32:	0c12      	lsrs	r2, r2, #16
 8006e34:	fa13 f38e 	uxtah	r3, r3, lr
 8006e38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e46:	45c1      	cmp	r9, r8
 8006e48:	f840 3b04 	str.w	r3, [r0], #4
 8006e4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e50:	d2e8      	bcs.n	8006e24 <quorem+0xb0>
 8006e52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e5a:	b922      	cbnz	r2, 8006e66 <quorem+0xf2>
 8006e5c:	3b04      	subs	r3, #4
 8006e5e:	429d      	cmp	r5, r3
 8006e60:	461a      	mov	r2, r3
 8006e62:	d30a      	bcc.n	8006e7a <quorem+0x106>
 8006e64:	613c      	str	r4, [r7, #16]
 8006e66:	4630      	mov	r0, r6
 8006e68:	b003      	add	sp, #12
 8006e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6e:	6812      	ldr	r2, [r2, #0]
 8006e70:	3b04      	subs	r3, #4
 8006e72:	2a00      	cmp	r2, #0
 8006e74:	d1cc      	bne.n	8006e10 <quorem+0x9c>
 8006e76:	3c01      	subs	r4, #1
 8006e78:	e7c7      	b.n	8006e0a <quorem+0x96>
 8006e7a:	6812      	ldr	r2, [r2, #0]
 8006e7c:	3b04      	subs	r3, #4
 8006e7e:	2a00      	cmp	r2, #0
 8006e80:	d1f0      	bne.n	8006e64 <quorem+0xf0>
 8006e82:	3c01      	subs	r4, #1
 8006e84:	e7eb      	b.n	8006e5e <quorem+0xea>
 8006e86:	2000      	movs	r0, #0
 8006e88:	e7ee      	b.n	8006e68 <quorem+0xf4>
 8006e8a:	0000      	movs	r0, r0
 8006e8c:	0000      	movs	r0, r0
	...

08006e90 <_dtoa_r>:
 8006e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e94:	ec59 8b10 	vmov	r8, r9, d0
 8006e98:	b095      	sub	sp, #84	; 0x54
 8006e9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e9c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8006e9e:	9107      	str	r1, [sp, #28]
 8006ea0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ea8:	9310      	str	r3, [sp, #64]	; 0x40
 8006eaa:	b975      	cbnz	r5, 8006eca <_dtoa_r+0x3a>
 8006eac:	2010      	movs	r0, #16
 8006eae:	f000 fd75 	bl	800799c <malloc>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	6270      	str	r0, [r6, #36]	; 0x24
 8006eb6:	b920      	cbnz	r0, 8006ec2 <_dtoa_r+0x32>
 8006eb8:	4bab      	ldr	r3, [pc, #684]	; (8007168 <_dtoa_r+0x2d8>)
 8006eba:	21ea      	movs	r1, #234	; 0xea
 8006ebc:	48ab      	ldr	r0, [pc, #684]	; (800716c <_dtoa_r+0x2dc>)
 8006ebe:	f001 fb27 	bl	8008510 <__assert_func>
 8006ec2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ec6:	6005      	str	r5, [r0, #0]
 8006ec8:	60c5      	str	r5, [r0, #12]
 8006eca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	b151      	cbz	r1, 8006ee6 <_dtoa_r+0x56>
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	604a      	str	r2, [r1, #4]
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	4093      	lsls	r3, r2
 8006ed8:	608b      	str	r3, [r1, #8]
 8006eda:	4630      	mov	r0, r6
 8006edc:	f000 fdb4 	bl	8007a48 <_Bfree>
 8006ee0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	f1b9 0300 	subs.w	r3, r9, #0
 8006eea:	bfbb      	ittet	lt
 8006eec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ef0:	9303      	strlt	r3, [sp, #12]
 8006ef2:	2300      	movge	r3, #0
 8006ef4:	2201      	movlt	r2, #1
 8006ef6:	bfac      	ite	ge
 8006ef8:	6023      	strge	r3, [r4, #0]
 8006efa:	6022      	strlt	r2, [r4, #0]
 8006efc:	4b9c      	ldr	r3, [pc, #624]	; (8007170 <_dtoa_r+0x2e0>)
 8006efe:	9c03      	ldr	r4, [sp, #12]
 8006f00:	43a3      	bics	r3, r4
 8006f02:	d11a      	bne.n	8006f3a <_dtoa_r+0xaa>
 8006f04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f06:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006f10:	ea53 0308 	orrs.w	r3, r3, r8
 8006f14:	f000 8512 	beq.w	800793c <_dtoa_r+0xaac>
 8006f18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f1a:	b953      	cbnz	r3, 8006f32 <_dtoa_r+0xa2>
 8006f1c:	4b95      	ldr	r3, [pc, #596]	; (8007174 <_dtoa_r+0x2e4>)
 8006f1e:	e01f      	b.n	8006f60 <_dtoa_r+0xd0>
 8006f20:	4b95      	ldr	r3, [pc, #596]	; (8007178 <_dtoa_r+0x2e8>)
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	9800      	ldr	r0, [sp, #0]
 8006f2c:	b015      	add	sp, #84	; 0x54
 8006f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f32:	4b90      	ldr	r3, [pc, #576]	; (8007174 <_dtoa_r+0x2e4>)
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	3303      	adds	r3, #3
 8006f38:	e7f5      	b.n	8006f26 <_dtoa_r+0x96>
 8006f3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f46:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006f4a:	d10b      	bne.n	8006f64 <_dtoa_r+0xd4>
 8006f4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f4e:	2301      	movs	r3, #1
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 84ee 	beq.w	8007936 <_dtoa_r+0xaa6>
 8006f5a:	4888      	ldr	r0, [pc, #544]	; (800717c <_dtoa_r+0x2ec>)
 8006f5c:	6018      	str	r0, [r3, #0]
 8006f5e:	1e43      	subs	r3, r0, #1
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	e7e2      	b.n	8006f2a <_dtoa_r+0x9a>
 8006f64:	a913      	add	r1, sp, #76	; 0x4c
 8006f66:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006f6a:	aa12      	add	r2, sp, #72	; 0x48
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	f001 f84d 	bl	800800c <__d2b>
 8006f72:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006f76:	4605      	mov	r5, r0
 8006f78:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006f7a:	2900      	cmp	r1, #0
 8006f7c:	d047      	beq.n	800700e <_dtoa_r+0x17e>
 8006f7e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006f80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f88:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8006f8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006f90:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006f94:	2400      	movs	r4, #0
 8006f96:	ec43 2b16 	vmov	d6, r2, r3
 8006f9a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8006f9e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8007150 <_dtoa_r+0x2c0>
 8006fa2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006fa6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8007158 <_dtoa_r+0x2c8>
 8006faa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006fae:	eeb0 7b46 	vmov.f64	d7, d6
 8006fb2:	ee06 1a90 	vmov	s13, r1
 8006fb6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8006fba:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8007160 <_dtoa_r+0x2d0>
 8006fbe:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006fc2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006fc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fce:	ee16 ba90 	vmov	fp, s13
 8006fd2:	9411      	str	r4, [sp, #68]	; 0x44
 8006fd4:	d508      	bpl.n	8006fe8 <_dtoa_r+0x158>
 8006fd6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006fda:	eeb4 6b47 	vcmp.f64	d6, d7
 8006fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe2:	bf18      	it	ne
 8006fe4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006fe8:	f1bb 0f16 	cmp.w	fp, #22
 8006fec:	d832      	bhi.n	8007054 <_dtoa_r+0x1c4>
 8006fee:	4b64      	ldr	r3, [pc, #400]	; (8007180 <_dtoa_r+0x2f0>)
 8006ff0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ff4:	ed93 7b00 	vldr	d7, [r3]
 8006ff8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8006ffc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007004:	d501      	bpl.n	800700a <_dtoa_r+0x17a>
 8007006:	f10b 3bff 	add.w	fp, fp, #4294967295
 800700a:	2300      	movs	r3, #0
 800700c:	e023      	b.n	8007056 <_dtoa_r+0x1c6>
 800700e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007010:	4401      	add	r1, r0
 8007012:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007016:	2b20      	cmp	r3, #32
 8007018:	bfc3      	ittte	gt
 800701a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800701e:	fa04 f303 	lslgt.w	r3, r4, r3
 8007022:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007026:	f1c3 0320 	rsble	r3, r3, #32
 800702a:	bfc6      	itte	gt
 800702c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007030:	ea43 0308 	orrgt.w	r3, r3, r8
 8007034:	fa08 f303 	lslle.w	r3, r8, r3
 8007038:	ee07 3a90 	vmov	s15, r3
 800703c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007040:	3901      	subs	r1, #1
 8007042:	ed8d 7b00 	vstr	d7, [sp]
 8007046:	9c01      	ldr	r4, [sp, #4]
 8007048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800704c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007050:	2401      	movs	r4, #1
 8007052:	e7a0      	b.n	8006f96 <_dtoa_r+0x106>
 8007054:	2301      	movs	r3, #1
 8007056:	930f      	str	r3, [sp, #60]	; 0x3c
 8007058:	1a43      	subs	r3, r0, r1
 800705a:	1e5a      	subs	r2, r3, #1
 800705c:	bf45      	ittet	mi
 800705e:	f1c3 0301 	rsbmi	r3, r3, #1
 8007062:	9305      	strmi	r3, [sp, #20]
 8007064:	2300      	movpl	r3, #0
 8007066:	2300      	movmi	r3, #0
 8007068:	9206      	str	r2, [sp, #24]
 800706a:	bf54      	ite	pl
 800706c:	9305      	strpl	r3, [sp, #20]
 800706e:	9306      	strmi	r3, [sp, #24]
 8007070:	f1bb 0f00 	cmp.w	fp, #0
 8007074:	db18      	blt.n	80070a8 <_dtoa_r+0x218>
 8007076:	9b06      	ldr	r3, [sp, #24]
 8007078:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800707c:	445b      	add	r3, fp
 800707e:	9306      	str	r3, [sp, #24]
 8007080:	2300      	movs	r3, #0
 8007082:	9a07      	ldr	r2, [sp, #28]
 8007084:	2a09      	cmp	r2, #9
 8007086:	d849      	bhi.n	800711c <_dtoa_r+0x28c>
 8007088:	2a05      	cmp	r2, #5
 800708a:	bfc4      	itt	gt
 800708c:	3a04      	subgt	r2, #4
 800708e:	9207      	strgt	r2, [sp, #28]
 8007090:	9a07      	ldr	r2, [sp, #28]
 8007092:	f1a2 0202 	sub.w	r2, r2, #2
 8007096:	bfcc      	ite	gt
 8007098:	2400      	movgt	r4, #0
 800709a:	2401      	movle	r4, #1
 800709c:	2a03      	cmp	r2, #3
 800709e:	d848      	bhi.n	8007132 <_dtoa_r+0x2a2>
 80070a0:	e8df f002 	tbb	[pc, r2]
 80070a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80070a8:	9b05      	ldr	r3, [sp, #20]
 80070aa:	2200      	movs	r2, #0
 80070ac:	eba3 030b 	sub.w	r3, r3, fp
 80070b0:	9305      	str	r3, [sp, #20]
 80070b2:	920e      	str	r2, [sp, #56]	; 0x38
 80070b4:	f1cb 0300 	rsb	r3, fp, #0
 80070b8:	e7e3      	b.n	8007082 <_dtoa_r+0x1f2>
 80070ba:	2200      	movs	r2, #0
 80070bc:	9208      	str	r2, [sp, #32]
 80070be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070c0:	2a00      	cmp	r2, #0
 80070c2:	dc39      	bgt.n	8007138 <_dtoa_r+0x2a8>
 80070c4:	f04f 0a01 	mov.w	sl, #1
 80070c8:	46d1      	mov	r9, sl
 80070ca:	4652      	mov	r2, sl
 80070cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80070d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80070d2:	2100      	movs	r1, #0
 80070d4:	6079      	str	r1, [r7, #4]
 80070d6:	2004      	movs	r0, #4
 80070d8:	f100 0c14 	add.w	ip, r0, #20
 80070dc:	4594      	cmp	ip, r2
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	d92f      	bls.n	8007142 <_dtoa_r+0x2b2>
 80070e2:	4630      	mov	r0, r6
 80070e4:	930c      	str	r3, [sp, #48]	; 0x30
 80070e6:	f000 fc6f 	bl	80079c8 <_Balloc>
 80070ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070ec:	9000      	str	r0, [sp, #0]
 80070ee:	4602      	mov	r2, r0
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d149      	bne.n	8007188 <_dtoa_r+0x2f8>
 80070f4:	4b23      	ldr	r3, [pc, #140]	; (8007184 <_dtoa_r+0x2f4>)
 80070f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80070fa:	e6df      	b.n	8006ebc <_dtoa_r+0x2c>
 80070fc:	2201      	movs	r2, #1
 80070fe:	e7dd      	b.n	80070bc <_dtoa_r+0x22c>
 8007100:	2200      	movs	r2, #0
 8007102:	9208      	str	r2, [sp, #32]
 8007104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007106:	eb0b 0a02 	add.w	sl, fp, r2
 800710a:	f10a 0901 	add.w	r9, sl, #1
 800710e:	464a      	mov	r2, r9
 8007110:	2a01      	cmp	r2, #1
 8007112:	bfb8      	it	lt
 8007114:	2201      	movlt	r2, #1
 8007116:	e7db      	b.n	80070d0 <_dtoa_r+0x240>
 8007118:	2201      	movs	r2, #1
 800711a:	e7f2      	b.n	8007102 <_dtoa_r+0x272>
 800711c:	2401      	movs	r4, #1
 800711e:	2200      	movs	r2, #0
 8007120:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007124:	f04f 3aff 	mov.w	sl, #4294967295
 8007128:	2100      	movs	r1, #0
 800712a:	46d1      	mov	r9, sl
 800712c:	2212      	movs	r2, #18
 800712e:	9109      	str	r1, [sp, #36]	; 0x24
 8007130:	e7ce      	b.n	80070d0 <_dtoa_r+0x240>
 8007132:	2201      	movs	r2, #1
 8007134:	9208      	str	r2, [sp, #32]
 8007136:	e7f5      	b.n	8007124 <_dtoa_r+0x294>
 8007138:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800713c:	46d1      	mov	r9, sl
 800713e:	4652      	mov	r2, sl
 8007140:	e7c6      	b.n	80070d0 <_dtoa_r+0x240>
 8007142:	3101      	adds	r1, #1
 8007144:	6079      	str	r1, [r7, #4]
 8007146:	0040      	lsls	r0, r0, #1
 8007148:	e7c6      	b.n	80070d8 <_dtoa_r+0x248>
 800714a:	bf00      	nop
 800714c:	f3af 8000 	nop.w
 8007150:	636f4361 	.word	0x636f4361
 8007154:	3fd287a7 	.word	0x3fd287a7
 8007158:	8b60c8b3 	.word	0x8b60c8b3
 800715c:	3fc68a28 	.word	0x3fc68a28
 8007160:	509f79fb 	.word	0x509f79fb
 8007164:	3fd34413 	.word	0x3fd34413
 8007168:	0802ed7d 	.word	0x0802ed7d
 800716c:	0802ed94 	.word	0x0802ed94
 8007170:	7ff00000 	.word	0x7ff00000
 8007174:	0802ed79 	.word	0x0802ed79
 8007178:	0802ed70 	.word	0x0802ed70
 800717c:	0802ed4d 	.word	0x0802ed4d
 8007180:	0802ee90 	.word	0x0802ee90
 8007184:	0802edf3 	.word	0x0802edf3
 8007188:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800718a:	9900      	ldr	r1, [sp, #0]
 800718c:	6011      	str	r1, [r2, #0]
 800718e:	f1b9 0f0e 	cmp.w	r9, #14
 8007192:	d872      	bhi.n	800727a <_dtoa_r+0x3ea>
 8007194:	2c00      	cmp	r4, #0
 8007196:	d070      	beq.n	800727a <_dtoa_r+0x3ea>
 8007198:	f1bb 0f00 	cmp.w	fp, #0
 800719c:	f340 80a6 	ble.w	80072ec <_dtoa_r+0x45c>
 80071a0:	49ca      	ldr	r1, [pc, #808]	; (80074cc <_dtoa_r+0x63c>)
 80071a2:	f00b 020f 	and.w	r2, fp, #15
 80071a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80071aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80071ae:	ed92 7b00 	vldr	d7, [r2]
 80071b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80071b6:	f000 808d 	beq.w	80072d4 <_dtoa_r+0x444>
 80071ba:	4ac5      	ldr	r2, [pc, #788]	; (80074d0 <_dtoa_r+0x640>)
 80071bc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80071c0:	ed92 6b08 	vldr	d6, [r2, #32]
 80071c4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80071c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80071cc:	f001 010f 	and.w	r1, r1, #15
 80071d0:	2203      	movs	r2, #3
 80071d2:	48bf      	ldr	r0, [pc, #764]	; (80074d0 <_dtoa_r+0x640>)
 80071d4:	2900      	cmp	r1, #0
 80071d6:	d17f      	bne.n	80072d8 <_dtoa_r+0x448>
 80071d8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80071dc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80071e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80071e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80071e6:	2900      	cmp	r1, #0
 80071e8:	f000 80b2 	beq.w	8007350 <_dtoa_r+0x4c0>
 80071ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80071f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80071f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fc:	f140 80a8 	bpl.w	8007350 <_dtoa_r+0x4c0>
 8007200:	f1b9 0f00 	cmp.w	r9, #0
 8007204:	f000 80a4 	beq.w	8007350 <_dtoa_r+0x4c0>
 8007208:	f1ba 0f00 	cmp.w	sl, #0
 800720c:	dd31      	ble.n	8007272 <_dtoa_r+0x3e2>
 800720e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007212:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007216:	ed8d 7b02 	vstr	d7, [sp, #8]
 800721a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800721e:	3201      	adds	r2, #1
 8007220:	4650      	mov	r0, sl
 8007222:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007226:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800722a:	ee07 2a90 	vmov	s15, r2
 800722e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007232:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007236:	ed8d 5b02 	vstr	d5, [sp, #8]
 800723a:	9c03      	ldr	r4, [sp, #12]
 800723c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007240:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007244:	2800      	cmp	r0, #0
 8007246:	f040 8086 	bne.w	8007356 <_dtoa_r+0x4c6>
 800724a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800724e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007252:	ec42 1b17 	vmov	d7, r1, r2
 8007256:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800725a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725e:	f300 8272 	bgt.w	8007746 <_dtoa_r+0x8b6>
 8007262:	eeb1 7b47 	vneg.f64	d7, d7
 8007266:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726e:	f100 8267 	bmi.w	8007740 <_dtoa_r+0x8b0>
 8007272:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8007276:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800727a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800727c:	2a00      	cmp	r2, #0
 800727e:	f2c0 8129 	blt.w	80074d4 <_dtoa_r+0x644>
 8007282:	f1bb 0f0e 	cmp.w	fp, #14
 8007286:	f300 8125 	bgt.w	80074d4 <_dtoa_r+0x644>
 800728a:	4b90      	ldr	r3, [pc, #576]	; (80074cc <_dtoa_r+0x63c>)
 800728c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007290:	ed93 6b00 	vldr	d6, [r3]
 8007294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007296:	2b00      	cmp	r3, #0
 8007298:	f280 80c3 	bge.w	8007422 <_dtoa_r+0x592>
 800729c:	f1b9 0f00 	cmp.w	r9, #0
 80072a0:	f300 80bf 	bgt.w	8007422 <_dtoa_r+0x592>
 80072a4:	f040 824c 	bne.w	8007740 <_dtoa_r+0x8b0>
 80072a8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80072ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 80072b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80072b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072bc:	464c      	mov	r4, r9
 80072be:	464f      	mov	r7, r9
 80072c0:	f280 8222 	bge.w	8007708 <_dtoa_r+0x878>
 80072c4:	f8dd 8000 	ldr.w	r8, [sp]
 80072c8:	2331      	movs	r3, #49	; 0x31
 80072ca:	f808 3b01 	strb.w	r3, [r8], #1
 80072ce:	f10b 0b01 	add.w	fp, fp, #1
 80072d2:	e21e      	b.n	8007712 <_dtoa_r+0x882>
 80072d4:	2202      	movs	r2, #2
 80072d6:	e77c      	b.n	80071d2 <_dtoa_r+0x342>
 80072d8:	07cc      	lsls	r4, r1, #31
 80072da:	d504      	bpl.n	80072e6 <_dtoa_r+0x456>
 80072dc:	ed90 6b00 	vldr	d6, [r0]
 80072e0:	3201      	adds	r2, #1
 80072e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072e6:	1049      	asrs	r1, r1, #1
 80072e8:	3008      	adds	r0, #8
 80072ea:	e773      	b.n	80071d4 <_dtoa_r+0x344>
 80072ec:	d02e      	beq.n	800734c <_dtoa_r+0x4bc>
 80072ee:	f1cb 0100 	rsb	r1, fp, #0
 80072f2:	4a76      	ldr	r2, [pc, #472]	; (80074cc <_dtoa_r+0x63c>)
 80072f4:	f001 000f 	and.w	r0, r1, #15
 80072f8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80072fc:	ed92 7b00 	vldr	d7, [r2]
 8007300:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007304:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007308:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800730c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8007310:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007314:	486e      	ldr	r0, [pc, #440]	; (80074d0 <_dtoa_r+0x640>)
 8007316:	1109      	asrs	r1, r1, #4
 8007318:	2400      	movs	r4, #0
 800731a:	2202      	movs	r2, #2
 800731c:	b939      	cbnz	r1, 800732e <_dtoa_r+0x49e>
 800731e:	2c00      	cmp	r4, #0
 8007320:	f43f af60 	beq.w	80071e4 <_dtoa_r+0x354>
 8007324:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800732c:	e75a      	b.n	80071e4 <_dtoa_r+0x354>
 800732e:	07cf      	lsls	r7, r1, #31
 8007330:	d509      	bpl.n	8007346 <_dtoa_r+0x4b6>
 8007332:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8007336:	ed90 7b00 	vldr	d7, [r0]
 800733a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800733e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007342:	3201      	adds	r2, #1
 8007344:	2401      	movs	r4, #1
 8007346:	1049      	asrs	r1, r1, #1
 8007348:	3008      	adds	r0, #8
 800734a:	e7e7      	b.n	800731c <_dtoa_r+0x48c>
 800734c:	2202      	movs	r2, #2
 800734e:	e749      	b.n	80071e4 <_dtoa_r+0x354>
 8007350:	465f      	mov	r7, fp
 8007352:	4648      	mov	r0, r9
 8007354:	e765      	b.n	8007222 <_dtoa_r+0x392>
 8007356:	ec42 1b17 	vmov	d7, r1, r2
 800735a:	4a5c      	ldr	r2, [pc, #368]	; (80074cc <_dtoa_r+0x63c>)
 800735c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007360:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007364:	9a00      	ldr	r2, [sp, #0]
 8007366:	1814      	adds	r4, r2, r0
 8007368:	9a08      	ldr	r2, [sp, #32]
 800736a:	b352      	cbz	r2, 80073c2 <_dtoa_r+0x532>
 800736c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007370:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007374:	f8dd 8000 	ldr.w	r8, [sp]
 8007378:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800737c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007380:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007384:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007388:	ee14 2a90 	vmov	r2, s9
 800738c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007390:	3230      	adds	r2, #48	; 0x30
 8007392:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007396:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800739a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739e:	f808 2b01 	strb.w	r2, [r8], #1
 80073a2:	d439      	bmi.n	8007418 <_dtoa_r+0x588>
 80073a4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80073a8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80073ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b0:	d472      	bmi.n	8007498 <_dtoa_r+0x608>
 80073b2:	45a0      	cmp	r8, r4
 80073b4:	f43f af5d 	beq.w	8007272 <_dtoa_r+0x3e2>
 80073b8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80073bc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80073c0:	e7e0      	b.n	8007384 <_dtoa_r+0x4f4>
 80073c2:	f8dd 8000 	ldr.w	r8, [sp]
 80073c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80073ca:	4621      	mov	r1, r4
 80073cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80073d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80073d4:	ee14 2a90 	vmov	r2, s9
 80073d8:	3230      	adds	r2, #48	; 0x30
 80073da:	f808 2b01 	strb.w	r2, [r8], #1
 80073de:	45a0      	cmp	r8, r4
 80073e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80073e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80073e8:	d118      	bne.n	800741c <_dtoa_r+0x58c>
 80073ea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80073ee:	ee37 4b05 	vadd.f64	d4, d7, d5
 80073f2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80073f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fa:	dc4d      	bgt.n	8007498 <_dtoa_r+0x608>
 80073fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007400:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007408:	f57f af33 	bpl.w	8007272 <_dtoa_r+0x3e2>
 800740c:	4688      	mov	r8, r1
 800740e:	3901      	subs	r1, #1
 8007410:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007414:	2b30      	cmp	r3, #48	; 0x30
 8007416:	d0f9      	beq.n	800740c <_dtoa_r+0x57c>
 8007418:	46bb      	mov	fp, r7
 800741a:	e02a      	b.n	8007472 <_dtoa_r+0x5e2>
 800741c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007420:	e7d6      	b.n	80073d0 <_dtoa_r+0x540>
 8007422:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007426:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800742a:	f8dd 8000 	ldr.w	r8, [sp]
 800742e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007432:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007436:	ee15 3a10 	vmov	r3, s10
 800743a:	3330      	adds	r3, #48	; 0x30
 800743c:	f808 3b01 	strb.w	r3, [r8], #1
 8007440:	9b00      	ldr	r3, [sp, #0]
 8007442:	eba8 0303 	sub.w	r3, r8, r3
 8007446:	4599      	cmp	r9, r3
 8007448:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800744c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007450:	d133      	bne.n	80074ba <_dtoa_r+0x62a>
 8007452:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007456:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800745a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745e:	dc1a      	bgt.n	8007496 <_dtoa_r+0x606>
 8007460:	eeb4 7b46 	vcmp.f64	d7, d6
 8007464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007468:	d103      	bne.n	8007472 <_dtoa_r+0x5e2>
 800746a:	ee15 3a10 	vmov	r3, s10
 800746e:	07d9      	lsls	r1, r3, #31
 8007470:	d411      	bmi.n	8007496 <_dtoa_r+0x606>
 8007472:	4629      	mov	r1, r5
 8007474:	4630      	mov	r0, r6
 8007476:	f000 fae7 	bl	8007a48 <_Bfree>
 800747a:	2300      	movs	r3, #0
 800747c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800747e:	f888 3000 	strb.w	r3, [r8]
 8007482:	f10b 0301 	add.w	r3, fp, #1
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800748a:	2b00      	cmp	r3, #0
 800748c:	f43f ad4d 	beq.w	8006f2a <_dtoa_r+0x9a>
 8007490:	f8c3 8000 	str.w	r8, [r3]
 8007494:	e549      	b.n	8006f2a <_dtoa_r+0x9a>
 8007496:	465f      	mov	r7, fp
 8007498:	4643      	mov	r3, r8
 800749a:	4698      	mov	r8, r3
 800749c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074a0:	2a39      	cmp	r2, #57	; 0x39
 80074a2:	d106      	bne.n	80074b2 <_dtoa_r+0x622>
 80074a4:	9a00      	ldr	r2, [sp, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d1f7      	bne.n	800749a <_dtoa_r+0x60a>
 80074aa:	9900      	ldr	r1, [sp, #0]
 80074ac:	2230      	movs	r2, #48	; 0x30
 80074ae:	3701      	adds	r7, #1
 80074b0:	700a      	strb	r2, [r1, #0]
 80074b2:	781a      	ldrb	r2, [r3, #0]
 80074b4:	3201      	adds	r2, #1
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	e7ae      	b.n	8007418 <_dtoa_r+0x588>
 80074ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 80074be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c6:	d1b2      	bne.n	800742e <_dtoa_r+0x59e>
 80074c8:	e7d3      	b.n	8007472 <_dtoa_r+0x5e2>
 80074ca:	bf00      	nop
 80074cc:	0802ee90 	.word	0x0802ee90
 80074d0:	0802ee68 	.word	0x0802ee68
 80074d4:	9908      	ldr	r1, [sp, #32]
 80074d6:	2900      	cmp	r1, #0
 80074d8:	f000 80d1 	beq.w	800767e <_dtoa_r+0x7ee>
 80074dc:	9907      	ldr	r1, [sp, #28]
 80074de:	2901      	cmp	r1, #1
 80074e0:	f300 80b4 	bgt.w	800764c <_dtoa_r+0x7bc>
 80074e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80074e6:	2900      	cmp	r1, #0
 80074e8:	f000 80ac 	beq.w	8007644 <_dtoa_r+0x7b4>
 80074ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80074f4:	461c      	mov	r4, r3
 80074f6:	930a      	str	r3, [sp, #40]	; 0x28
 80074f8:	9b05      	ldr	r3, [sp, #20]
 80074fa:	4413      	add	r3, r2
 80074fc:	9305      	str	r3, [sp, #20]
 80074fe:	9b06      	ldr	r3, [sp, #24]
 8007500:	2101      	movs	r1, #1
 8007502:	4413      	add	r3, r2
 8007504:	4630      	mov	r0, r6
 8007506:	9306      	str	r3, [sp, #24]
 8007508:	f000 fb5a 	bl	8007bc0 <__i2b>
 800750c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800750e:	4607      	mov	r7, r0
 8007510:	f1b8 0f00 	cmp.w	r8, #0
 8007514:	dd0d      	ble.n	8007532 <_dtoa_r+0x6a2>
 8007516:	9a06      	ldr	r2, [sp, #24]
 8007518:	2a00      	cmp	r2, #0
 800751a:	dd0a      	ble.n	8007532 <_dtoa_r+0x6a2>
 800751c:	4542      	cmp	r2, r8
 800751e:	9905      	ldr	r1, [sp, #20]
 8007520:	bfa8      	it	ge
 8007522:	4642      	movge	r2, r8
 8007524:	1a89      	subs	r1, r1, r2
 8007526:	9105      	str	r1, [sp, #20]
 8007528:	9906      	ldr	r1, [sp, #24]
 800752a:	eba8 0802 	sub.w	r8, r8, r2
 800752e:	1a8a      	subs	r2, r1, r2
 8007530:	9206      	str	r2, [sp, #24]
 8007532:	b303      	cbz	r3, 8007576 <_dtoa_r+0x6e6>
 8007534:	9a08      	ldr	r2, [sp, #32]
 8007536:	2a00      	cmp	r2, #0
 8007538:	f000 80a6 	beq.w	8007688 <_dtoa_r+0x7f8>
 800753c:	2c00      	cmp	r4, #0
 800753e:	dd13      	ble.n	8007568 <_dtoa_r+0x6d8>
 8007540:	4639      	mov	r1, r7
 8007542:	4622      	mov	r2, r4
 8007544:	4630      	mov	r0, r6
 8007546:	930c      	str	r3, [sp, #48]	; 0x30
 8007548:	f000 fbf6 	bl	8007d38 <__pow5mult>
 800754c:	462a      	mov	r2, r5
 800754e:	4601      	mov	r1, r0
 8007550:	4607      	mov	r7, r0
 8007552:	4630      	mov	r0, r6
 8007554:	f000 fb4a 	bl	8007bec <__multiply>
 8007558:	4629      	mov	r1, r5
 800755a:	900a      	str	r0, [sp, #40]	; 0x28
 800755c:	4630      	mov	r0, r6
 800755e:	f000 fa73 	bl	8007a48 <_Bfree>
 8007562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007566:	4615      	mov	r5, r2
 8007568:	1b1a      	subs	r2, r3, r4
 800756a:	d004      	beq.n	8007576 <_dtoa_r+0x6e6>
 800756c:	4629      	mov	r1, r5
 800756e:	4630      	mov	r0, r6
 8007570:	f000 fbe2 	bl	8007d38 <__pow5mult>
 8007574:	4605      	mov	r5, r0
 8007576:	2101      	movs	r1, #1
 8007578:	4630      	mov	r0, r6
 800757a:	f000 fb21 	bl	8007bc0 <__i2b>
 800757e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007580:	2b00      	cmp	r3, #0
 8007582:	4604      	mov	r4, r0
 8007584:	f340 8082 	ble.w	800768c <_dtoa_r+0x7fc>
 8007588:	461a      	mov	r2, r3
 800758a:	4601      	mov	r1, r0
 800758c:	4630      	mov	r0, r6
 800758e:	f000 fbd3 	bl	8007d38 <__pow5mult>
 8007592:	9b07      	ldr	r3, [sp, #28]
 8007594:	2b01      	cmp	r3, #1
 8007596:	4604      	mov	r4, r0
 8007598:	dd7b      	ble.n	8007692 <_dtoa_r+0x802>
 800759a:	2300      	movs	r3, #0
 800759c:	930a      	str	r3, [sp, #40]	; 0x28
 800759e:	6922      	ldr	r2, [r4, #16]
 80075a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80075a4:	6910      	ldr	r0, [r2, #16]
 80075a6:	f000 fabb 	bl	8007b20 <__hi0bits>
 80075aa:	f1c0 0020 	rsb	r0, r0, #32
 80075ae:	9b06      	ldr	r3, [sp, #24]
 80075b0:	4418      	add	r0, r3
 80075b2:	f010 001f 	ands.w	r0, r0, #31
 80075b6:	f000 808d 	beq.w	80076d4 <_dtoa_r+0x844>
 80075ba:	f1c0 0220 	rsb	r2, r0, #32
 80075be:	2a04      	cmp	r2, #4
 80075c0:	f340 8086 	ble.w	80076d0 <_dtoa_r+0x840>
 80075c4:	f1c0 001c 	rsb	r0, r0, #28
 80075c8:	9b05      	ldr	r3, [sp, #20]
 80075ca:	4403      	add	r3, r0
 80075cc:	9305      	str	r3, [sp, #20]
 80075ce:	9b06      	ldr	r3, [sp, #24]
 80075d0:	4403      	add	r3, r0
 80075d2:	4480      	add	r8, r0
 80075d4:	9306      	str	r3, [sp, #24]
 80075d6:	9b05      	ldr	r3, [sp, #20]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	dd05      	ble.n	80075e8 <_dtoa_r+0x758>
 80075dc:	4629      	mov	r1, r5
 80075de:	461a      	mov	r2, r3
 80075e0:	4630      	mov	r0, r6
 80075e2:	f000 fc03 	bl	8007dec <__lshift>
 80075e6:	4605      	mov	r5, r0
 80075e8:	9b06      	ldr	r3, [sp, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	dd05      	ble.n	80075fa <_dtoa_r+0x76a>
 80075ee:	4621      	mov	r1, r4
 80075f0:	461a      	mov	r2, r3
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 fbfa 	bl	8007dec <__lshift>
 80075f8:	4604      	mov	r4, r0
 80075fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d06b      	beq.n	80076d8 <_dtoa_r+0x848>
 8007600:	4621      	mov	r1, r4
 8007602:	4628      	mov	r0, r5
 8007604:	f000 fc5e 	bl	8007ec4 <__mcmp>
 8007608:	2800      	cmp	r0, #0
 800760a:	da65      	bge.n	80076d8 <_dtoa_r+0x848>
 800760c:	2300      	movs	r3, #0
 800760e:	4629      	mov	r1, r5
 8007610:	220a      	movs	r2, #10
 8007612:	4630      	mov	r0, r6
 8007614:	f000 fa3a 	bl	8007a8c <__multadd>
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800761e:	4605      	mov	r5, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 8192 	beq.w	800794a <_dtoa_r+0xaba>
 8007626:	4639      	mov	r1, r7
 8007628:	2300      	movs	r3, #0
 800762a:	220a      	movs	r2, #10
 800762c:	4630      	mov	r0, r6
 800762e:	f000 fa2d 	bl	8007a8c <__multadd>
 8007632:	f1ba 0f00 	cmp.w	sl, #0
 8007636:	4607      	mov	r7, r0
 8007638:	f300 808e 	bgt.w	8007758 <_dtoa_r+0x8c8>
 800763c:	9b07      	ldr	r3, [sp, #28]
 800763e:	2b02      	cmp	r3, #2
 8007640:	dc51      	bgt.n	80076e6 <_dtoa_r+0x856>
 8007642:	e089      	b.n	8007758 <_dtoa_r+0x8c8>
 8007644:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007646:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800764a:	e751      	b.n	80074f0 <_dtoa_r+0x660>
 800764c:	f109 34ff 	add.w	r4, r9, #4294967295
 8007650:	42a3      	cmp	r3, r4
 8007652:	bfbf      	itttt	lt
 8007654:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007656:	1ae3      	sublt	r3, r4, r3
 8007658:	18d2      	addlt	r2, r2, r3
 800765a:	4613      	movlt	r3, r2
 800765c:	bfb7      	itett	lt
 800765e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007660:	1b1c      	subge	r4, r3, r4
 8007662:	4623      	movlt	r3, r4
 8007664:	2400      	movlt	r4, #0
 8007666:	f1b9 0f00 	cmp.w	r9, #0
 800766a:	bfb5      	itete	lt
 800766c:	9a05      	ldrlt	r2, [sp, #20]
 800766e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8007672:	eba2 0809 	sublt.w	r8, r2, r9
 8007676:	464a      	movge	r2, r9
 8007678:	bfb8      	it	lt
 800767a:	2200      	movlt	r2, #0
 800767c:	e73b      	b.n	80074f6 <_dtoa_r+0x666>
 800767e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007682:	9f08      	ldr	r7, [sp, #32]
 8007684:	461c      	mov	r4, r3
 8007686:	e743      	b.n	8007510 <_dtoa_r+0x680>
 8007688:	461a      	mov	r2, r3
 800768a:	e76f      	b.n	800756c <_dtoa_r+0x6dc>
 800768c:	9b07      	ldr	r3, [sp, #28]
 800768e:	2b01      	cmp	r3, #1
 8007690:	dc18      	bgt.n	80076c4 <_dtoa_r+0x834>
 8007692:	9b02      	ldr	r3, [sp, #8]
 8007694:	b9b3      	cbnz	r3, 80076c4 <_dtoa_r+0x834>
 8007696:	9b03      	ldr	r3, [sp, #12]
 8007698:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800769c:	b9a2      	cbnz	r2, 80076c8 <_dtoa_r+0x838>
 800769e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80076a2:	0d12      	lsrs	r2, r2, #20
 80076a4:	0512      	lsls	r2, r2, #20
 80076a6:	b18a      	cbz	r2, 80076cc <_dtoa_r+0x83c>
 80076a8:	9b05      	ldr	r3, [sp, #20]
 80076aa:	3301      	adds	r3, #1
 80076ac:	9305      	str	r3, [sp, #20]
 80076ae:	9b06      	ldr	r3, [sp, #24]
 80076b0:	3301      	adds	r3, #1
 80076b2:	9306      	str	r3, [sp, #24]
 80076b4:	2301      	movs	r3, #1
 80076b6:	930a      	str	r3, [sp, #40]	; 0x28
 80076b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f47f af6f 	bne.w	800759e <_dtoa_r+0x70e>
 80076c0:	2001      	movs	r0, #1
 80076c2:	e774      	b.n	80075ae <_dtoa_r+0x71e>
 80076c4:	2300      	movs	r3, #0
 80076c6:	e7f6      	b.n	80076b6 <_dtoa_r+0x826>
 80076c8:	9b02      	ldr	r3, [sp, #8]
 80076ca:	e7f4      	b.n	80076b6 <_dtoa_r+0x826>
 80076cc:	920a      	str	r2, [sp, #40]	; 0x28
 80076ce:	e7f3      	b.n	80076b8 <_dtoa_r+0x828>
 80076d0:	d081      	beq.n	80075d6 <_dtoa_r+0x746>
 80076d2:	4610      	mov	r0, r2
 80076d4:	301c      	adds	r0, #28
 80076d6:	e777      	b.n	80075c8 <_dtoa_r+0x738>
 80076d8:	f1b9 0f00 	cmp.w	r9, #0
 80076dc:	dc37      	bgt.n	800774e <_dtoa_r+0x8be>
 80076de:	9b07      	ldr	r3, [sp, #28]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	dd34      	ble.n	800774e <_dtoa_r+0x8be>
 80076e4:	46ca      	mov	sl, r9
 80076e6:	f1ba 0f00 	cmp.w	sl, #0
 80076ea:	d10d      	bne.n	8007708 <_dtoa_r+0x878>
 80076ec:	4621      	mov	r1, r4
 80076ee:	4653      	mov	r3, sl
 80076f0:	2205      	movs	r2, #5
 80076f2:	4630      	mov	r0, r6
 80076f4:	f000 f9ca 	bl	8007a8c <__multadd>
 80076f8:	4601      	mov	r1, r0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4628      	mov	r0, r5
 80076fe:	f000 fbe1 	bl	8007ec4 <__mcmp>
 8007702:	2800      	cmp	r0, #0
 8007704:	f73f adde 	bgt.w	80072c4 <_dtoa_r+0x434>
 8007708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770a:	f8dd 8000 	ldr.w	r8, [sp]
 800770e:	ea6f 0b03 	mvn.w	fp, r3
 8007712:	f04f 0900 	mov.w	r9, #0
 8007716:	4621      	mov	r1, r4
 8007718:	4630      	mov	r0, r6
 800771a:	f000 f995 	bl	8007a48 <_Bfree>
 800771e:	2f00      	cmp	r7, #0
 8007720:	f43f aea7 	beq.w	8007472 <_dtoa_r+0x5e2>
 8007724:	f1b9 0f00 	cmp.w	r9, #0
 8007728:	d005      	beq.n	8007736 <_dtoa_r+0x8a6>
 800772a:	45b9      	cmp	r9, r7
 800772c:	d003      	beq.n	8007736 <_dtoa_r+0x8a6>
 800772e:	4649      	mov	r1, r9
 8007730:	4630      	mov	r0, r6
 8007732:	f000 f989 	bl	8007a48 <_Bfree>
 8007736:	4639      	mov	r1, r7
 8007738:	4630      	mov	r0, r6
 800773a:	f000 f985 	bl	8007a48 <_Bfree>
 800773e:	e698      	b.n	8007472 <_dtoa_r+0x5e2>
 8007740:	2400      	movs	r4, #0
 8007742:	4627      	mov	r7, r4
 8007744:	e7e0      	b.n	8007708 <_dtoa_r+0x878>
 8007746:	46bb      	mov	fp, r7
 8007748:	4604      	mov	r4, r0
 800774a:	4607      	mov	r7, r0
 800774c:	e5ba      	b.n	80072c4 <_dtoa_r+0x434>
 800774e:	9b08      	ldr	r3, [sp, #32]
 8007750:	46ca      	mov	sl, r9
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 8100 	beq.w	8007958 <_dtoa_r+0xac8>
 8007758:	f1b8 0f00 	cmp.w	r8, #0
 800775c:	dd05      	ble.n	800776a <_dtoa_r+0x8da>
 800775e:	4639      	mov	r1, r7
 8007760:	4642      	mov	r2, r8
 8007762:	4630      	mov	r0, r6
 8007764:	f000 fb42 	bl	8007dec <__lshift>
 8007768:	4607      	mov	r7, r0
 800776a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800776c:	2b00      	cmp	r3, #0
 800776e:	d05d      	beq.n	800782c <_dtoa_r+0x99c>
 8007770:	6879      	ldr	r1, [r7, #4]
 8007772:	4630      	mov	r0, r6
 8007774:	f000 f928 	bl	80079c8 <_Balloc>
 8007778:	4680      	mov	r8, r0
 800777a:	b928      	cbnz	r0, 8007788 <_dtoa_r+0x8f8>
 800777c:	4b82      	ldr	r3, [pc, #520]	; (8007988 <_dtoa_r+0xaf8>)
 800777e:	4602      	mov	r2, r0
 8007780:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007784:	f7ff bb9a 	b.w	8006ebc <_dtoa_r+0x2c>
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	3202      	adds	r2, #2
 800778c:	0092      	lsls	r2, r2, #2
 800778e:	f107 010c 	add.w	r1, r7, #12
 8007792:	300c      	adds	r0, #12
 8007794:	f000 f90a 	bl	80079ac <memcpy>
 8007798:	2201      	movs	r2, #1
 800779a:	4641      	mov	r1, r8
 800779c:	4630      	mov	r0, r6
 800779e:	f000 fb25 	bl	8007dec <__lshift>
 80077a2:	9b00      	ldr	r3, [sp, #0]
 80077a4:	3301      	adds	r3, #1
 80077a6:	9305      	str	r3, [sp, #20]
 80077a8:	9b00      	ldr	r3, [sp, #0]
 80077aa:	4453      	add	r3, sl
 80077ac:	9309      	str	r3, [sp, #36]	; 0x24
 80077ae:	9b02      	ldr	r3, [sp, #8]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	46b9      	mov	r9, r7
 80077b6:	9308      	str	r3, [sp, #32]
 80077b8:	4607      	mov	r7, r0
 80077ba:	9b05      	ldr	r3, [sp, #20]
 80077bc:	4621      	mov	r1, r4
 80077be:	3b01      	subs	r3, #1
 80077c0:	4628      	mov	r0, r5
 80077c2:	9302      	str	r3, [sp, #8]
 80077c4:	f7ff fad6 	bl	8006d74 <quorem>
 80077c8:	4603      	mov	r3, r0
 80077ca:	3330      	adds	r3, #48	; 0x30
 80077cc:	9006      	str	r0, [sp, #24]
 80077ce:	4649      	mov	r1, r9
 80077d0:	4628      	mov	r0, r5
 80077d2:	930a      	str	r3, [sp, #40]	; 0x28
 80077d4:	f000 fb76 	bl	8007ec4 <__mcmp>
 80077d8:	463a      	mov	r2, r7
 80077da:	4682      	mov	sl, r0
 80077dc:	4621      	mov	r1, r4
 80077de:	4630      	mov	r0, r6
 80077e0:	f000 fb8c 	bl	8007efc <__mdiff>
 80077e4:	68c2      	ldr	r2, [r0, #12]
 80077e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e8:	4680      	mov	r8, r0
 80077ea:	bb0a      	cbnz	r2, 8007830 <_dtoa_r+0x9a0>
 80077ec:	4601      	mov	r1, r0
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 fb68 	bl	8007ec4 <__mcmp>
 80077f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f6:	4602      	mov	r2, r0
 80077f8:	4641      	mov	r1, r8
 80077fa:	4630      	mov	r0, r6
 80077fc:	920e      	str	r2, [sp, #56]	; 0x38
 80077fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007800:	f000 f922 	bl	8007a48 <_Bfree>
 8007804:	9b07      	ldr	r3, [sp, #28]
 8007806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007808:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800780c:	ea43 0102 	orr.w	r1, r3, r2
 8007810:	9b08      	ldr	r3, [sp, #32]
 8007812:	430b      	orrs	r3, r1
 8007814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007816:	d10d      	bne.n	8007834 <_dtoa_r+0x9a4>
 8007818:	2b39      	cmp	r3, #57	; 0x39
 800781a:	d029      	beq.n	8007870 <_dtoa_r+0x9e0>
 800781c:	f1ba 0f00 	cmp.w	sl, #0
 8007820:	dd01      	ble.n	8007826 <_dtoa_r+0x996>
 8007822:	9b06      	ldr	r3, [sp, #24]
 8007824:	3331      	adds	r3, #49	; 0x31
 8007826:	9a02      	ldr	r2, [sp, #8]
 8007828:	7013      	strb	r3, [r2, #0]
 800782a:	e774      	b.n	8007716 <_dtoa_r+0x886>
 800782c:	4638      	mov	r0, r7
 800782e:	e7b8      	b.n	80077a2 <_dtoa_r+0x912>
 8007830:	2201      	movs	r2, #1
 8007832:	e7e1      	b.n	80077f8 <_dtoa_r+0x968>
 8007834:	f1ba 0f00 	cmp.w	sl, #0
 8007838:	db06      	blt.n	8007848 <_dtoa_r+0x9b8>
 800783a:	9907      	ldr	r1, [sp, #28]
 800783c:	ea41 0a0a 	orr.w	sl, r1, sl
 8007840:	9908      	ldr	r1, [sp, #32]
 8007842:	ea5a 0101 	orrs.w	r1, sl, r1
 8007846:	d120      	bne.n	800788a <_dtoa_r+0x9fa>
 8007848:	2a00      	cmp	r2, #0
 800784a:	ddec      	ble.n	8007826 <_dtoa_r+0x996>
 800784c:	4629      	mov	r1, r5
 800784e:	2201      	movs	r2, #1
 8007850:	4630      	mov	r0, r6
 8007852:	9305      	str	r3, [sp, #20]
 8007854:	f000 faca 	bl	8007dec <__lshift>
 8007858:	4621      	mov	r1, r4
 800785a:	4605      	mov	r5, r0
 800785c:	f000 fb32 	bl	8007ec4 <__mcmp>
 8007860:	2800      	cmp	r0, #0
 8007862:	9b05      	ldr	r3, [sp, #20]
 8007864:	dc02      	bgt.n	800786c <_dtoa_r+0x9dc>
 8007866:	d1de      	bne.n	8007826 <_dtoa_r+0x996>
 8007868:	07da      	lsls	r2, r3, #31
 800786a:	d5dc      	bpl.n	8007826 <_dtoa_r+0x996>
 800786c:	2b39      	cmp	r3, #57	; 0x39
 800786e:	d1d8      	bne.n	8007822 <_dtoa_r+0x992>
 8007870:	9a02      	ldr	r2, [sp, #8]
 8007872:	2339      	movs	r3, #57	; 0x39
 8007874:	7013      	strb	r3, [r2, #0]
 8007876:	4643      	mov	r3, r8
 8007878:	4698      	mov	r8, r3
 800787a:	3b01      	subs	r3, #1
 800787c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007880:	2a39      	cmp	r2, #57	; 0x39
 8007882:	d051      	beq.n	8007928 <_dtoa_r+0xa98>
 8007884:	3201      	adds	r2, #1
 8007886:	701a      	strb	r2, [r3, #0]
 8007888:	e745      	b.n	8007716 <_dtoa_r+0x886>
 800788a:	2a00      	cmp	r2, #0
 800788c:	dd03      	ble.n	8007896 <_dtoa_r+0xa06>
 800788e:	2b39      	cmp	r3, #57	; 0x39
 8007890:	d0ee      	beq.n	8007870 <_dtoa_r+0x9e0>
 8007892:	3301      	adds	r3, #1
 8007894:	e7c7      	b.n	8007826 <_dtoa_r+0x996>
 8007896:	9a05      	ldr	r2, [sp, #20]
 8007898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800789a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800789e:	428a      	cmp	r2, r1
 80078a0:	d02b      	beq.n	80078fa <_dtoa_r+0xa6a>
 80078a2:	4629      	mov	r1, r5
 80078a4:	2300      	movs	r3, #0
 80078a6:	220a      	movs	r2, #10
 80078a8:	4630      	mov	r0, r6
 80078aa:	f000 f8ef 	bl	8007a8c <__multadd>
 80078ae:	45b9      	cmp	r9, r7
 80078b0:	4605      	mov	r5, r0
 80078b2:	f04f 0300 	mov.w	r3, #0
 80078b6:	f04f 020a 	mov.w	r2, #10
 80078ba:	4649      	mov	r1, r9
 80078bc:	4630      	mov	r0, r6
 80078be:	d107      	bne.n	80078d0 <_dtoa_r+0xa40>
 80078c0:	f000 f8e4 	bl	8007a8c <__multadd>
 80078c4:	4681      	mov	r9, r0
 80078c6:	4607      	mov	r7, r0
 80078c8:	9b05      	ldr	r3, [sp, #20]
 80078ca:	3301      	adds	r3, #1
 80078cc:	9305      	str	r3, [sp, #20]
 80078ce:	e774      	b.n	80077ba <_dtoa_r+0x92a>
 80078d0:	f000 f8dc 	bl	8007a8c <__multadd>
 80078d4:	4639      	mov	r1, r7
 80078d6:	4681      	mov	r9, r0
 80078d8:	2300      	movs	r3, #0
 80078da:	220a      	movs	r2, #10
 80078dc:	4630      	mov	r0, r6
 80078de:	f000 f8d5 	bl	8007a8c <__multadd>
 80078e2:	4607      	mov	r7, r0
 80078e4:	e7f0      	b.n	80078c8 <_dtoa_r+0xa38>
 80078e6:	f1ba 0f00 	cmp.w	sl, #0
 80078ea:	9a00      	ldr	r2, [sp, #0]
 80078ec:	bfcc      	ite	gt
 80078ee:	46d0      	movgt	r8, sl
 80078f0:	f04f 0801 	movle.w	r8, #1
 80078f4:	4490      	add	r8, r2
 80078f6:	f04f 0900 	mov.w	r9, #0
 80078fa:	4629      	mov	r1, r5
 80078fc:	2201      	movs	r2, #1
 80078fe:	4630      	mov	r0, r6
 8007900:	9302      	str	r3, [sp, #8]
 8007902:	f000 fa73 	bl	8007dec <__lshift>
 8007906:	4621      	mov	r1, r4
 8007908:	4605      	mov	r5, r0
 800790a:	f000 fadb 	bl	8007ec4 <__mcmp>
 800790e:	2800      	cmp	r0, #0
 8007910:	dcb1      	bgt.n	8007876 <_dtoa_r+0x9e6>
 8007912:	d102      	bne.n	800791a <_dtoa_r+0xa8a>
 8007914:	9b02      	ldr	r3, [sp, #8]
 8007916:	07db      	lsls	r3, r3, #31
 8007918:	d4ad      	bmi.n	8007876 <_dtoa_r+0x9e6>
 800791a:	4643      	mov	r3, r8
 800791c:	4698      	mov	r8, r3
 800791e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007922:	2a30      	cmp	r2, #48	; 0x30
 8007924:	d0fa      	beq.n	800791c <_dtoa_r+0xa8c>
 8007926:	e6f6      	b.n	8007716 <_dtoa_r+0x886>
 8007928:	9a00      	ldr	r2, [sp, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d1a4      	bne.n	8007878 <_dtoa_r+0x9e8>
 800792e:	f10b 0b01 	add.w	fp, fp, #1
 8007932:	2331      	movs	r3, #49	; 0x31
 8007934:	e778      	b.n	8007828 <_dtoa_r+0x998>
 8007936:	4b15      	ldr	r3, [pc, #84]	; (800798c <_dtoa_r+0xafc>)
 8007938:	f7ff bb12 	b.w	8006f60 <_dtoa_r+0xd0>
 800793c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800793e:	2b00      	cmp	r3, #0
 8007940:	f47f aaee 	bne.w	8006f20 <_dtoa_r+0x90>
 8007944:	4b12      	ldr	r3, [pc, #72]	; (8007990 <_dtoa_r+0xb00>)
 8007946:	f7ff bb0b 	b.w	8006f60 <_dtoa_r+0xd0>
 800794a:	f1ba 0f00 	cmp.w	sl, #0
 800794e:	dc03      	bgt.n	8007958 <_dtoa_r+0xac8>
 8007950:	9b07      	ldr	r3, [sp, #28]
 8007952:	2b02      	cmp	r3, #2
 8007954:	f73f aec7 	bgt.w	80076e6 <_dtoa_r+0x856>
 8007958:	f8dd 8000 	ldr.w	r8, [sp]
 800795c:	4621      	mov	r1, r4
 800795e:	4628      	mov	r0, r5
 8007960:	f7ff fa08 	bl	8006d74 <quorem>
 8007964:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007968:	f808 3b01 	strb.w	r3, [r8], #1
 800796c:	9a00      	ldr	r2, [sp, #0]
 800796e:	eba8 0202 	sub.w	r2, r8, r2
 8007972:	4592      	cmp	sl, r2
 8007974:	ddb7      	ble.n	80078e6 <_dtoa_r+0xa56>
 8007976:	4629      	mov	r1, r5
 8007978:	2300      	movs	r3, #0
 800797a:	220a      	movs	r2, #10
 800797c:	4630      	mov	r0, r6
 800797e:	f000 f885 	bl	8007a8c <__multadd>
 8007982:	4605      	mov	r5, r0
 8007984:	e7ea      	b.n	800795c <_dtoa_r+0xacc>
 8007986:	bf00      	nop
 8007988:	0802edf3 	.word	0x0802edf3
 800798c:	0802ed4c 	.word	0x0802ed4c
 8007990:	0802ed70 	.word	0x0802ed70

08007994 <_localeconv_r>:
 8007994:	4800      	ldr	r0, [pc, #0]	; (8007998 <_localeconv_r+0x4>)
 8007996:	4770      	bx	lr
 8007998:	20000164 	.word	0x20000164

0800799c <malloc>:
 800799c:	4b02      	ldr	r3, [pc, #8]	; (80079a8 <malloc+0xc>)
 800799e:	4601      	mov	r1, r0
 80079a0:	6818      	ldr	r0, [r3, #0]
 80079a2:	f000 bbef 	b.w	8008184 <_malloc_r>
 80079a6:	bf00      	nop
 80079a8:	20000010 	.word	0x20000010

080079ac <memcpy>:
 80079ac:	440a      	add	r2, r1
 80079ae:	4291      	cmp	r1, r2
 80079b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80079b4:	d100      	bne.n	80079b8 <memcpy+0xc>
 80079b6:	4770      	bx	lr
 80079b8:	b510      	push	{r4, lr}
 80079ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079c2:	4291      	cmp	r1, r2
 80079c4:	d1f9      	bne.n	80079ba <memcpy+0xe>
 80079c6:	bd10      	pop	{r4, pc}

080079c8 <_Balloc>:
 80079c8:	b570      	push	{r4, r5, r6, lr}
 80079ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079cc:	4604      	mov	r4, r0
 80079ce:	460d      	mov	r5, r1
 80079d0:	b976      	cbnz	r6, 80079f0 <_Balloc+0x28>
 80079d2:	2010      	movs	r0, #16
 80079d4:	f7ff ffe2 	bl	800799c <malloc>
 80079d8:	4602      	mov	r2, r0
 80079da:	6260      	str	r0, [r4, #36]	; 0x24
 80079dc:	b920      	cbnz	r0, 80079e8 <_Balloc+0x20>
 80079de:	4b18      	ldr	r3, [pc, #96]	; (8007a40 <_Balloc+0x78>)
 80079e0:	4818      	ldr	r0, [pc, #96]	; (8007a44 <_Balloc+0x7c>)
 80079e2:	2166      	movs	r1, #102	; 0x66
 80079e4:	f000 fd94 	bl	8008510 <__assert_func>
 80079e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079ec:	6006      	str	r6, [r0, #0]
 80079ee:	60c6      	str	r6, [r0, #12]
 80079f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079f2:	68f3      	ldr	r3, [r6, #12]
 80079f4:	b183      	cbz	r3, 8007a18 <_Balloc+0x50>
 80079f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079fe:	b9b8      	cbnz	r0, 8007a30 <_Balloc+0x68>
 8007a00:	2101      	movs	r1, #1
 8007a02:	fa01 f605 	lsl.w	r6, r1, r5
 8007a06:	1d72      	adds	r2, r6, #5
 8007a08:	0092      	lsls	r2, r2, #2
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f000 fb5a 	bl	80080c4 <_calloc_r>
 8007a10:	b160      	cbz	r0, 8007a2c <_Balloc+0x64>
 8007a12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a16:	e00e      	b.n	8007a36 <_Balloc+0x6e>
 8007a18:	2221      	movs	r2, #33	; 0x21
 8007a1a:	2104      	movs	r1, #4
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 fb51 	bl	80080c4 <_calloc_r>
 8007a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a24:	60f0      	str	r0, [r6, #12]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1e4      	bne.n	80079f6 <_Balloc+0x2e>
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	6802      	ldr	r2, [r0, #0]
 8007a32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a36:	2300      	movs	r3, #0
 8007a38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a3c:	e7f7      	b.n	8007a2e <_Balloc+0x66>
 8007a3e:	bf00      	nop
 8007a40:	0802ed7d 	.word	0x0802ed7d
 8007a44:	0802ee04 	.word	0x0802ee04

08007a48 <_Bfree>:
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	460c      	mov	r4, r1
 8007a50:	b976      	cbnz	r6, 8007a70 <_Bfree+0x28>
 8007a52:	2010      	movs	r0, #16
 8007a54:	f7ff ffa2 	bl	800799c <malloc>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6268      	str	r0, [r5, #36]	; 0x24
 8007a5c:	b920      	cbnz	r0, 8007a68 <_Bfree+0x20>
 8007a5e:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <_Bfree+0x3c>)
 8007a60:	4809      	ldr	r0, [pc, #36]	; (8007a88 <_Bfree+0x40>)
 8007a62:	218a      	movs	r1, #138	; 0x8a
 8007a64:	f000 fd54 	bl	8008510 <__assert_func>
 8007a68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a6c:	6006      	str	r6, [r0, #0]
 8007a6e:	60c6      	str	r6, [r0, #12]
 8007a70:	b13c      	cbz	r4, 8007a82 <_Bfree+0x3a>
 8007a72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a74:	6862      	ldr	r2, [r4, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a7c:	6021      	str	r1, [r4, #0]
 8007a7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	0802ed7d 	.word	0x0802ed7d
 8007a88:	0802ee04 	.word	0x0802ee04

08007a8c <__multadd>:
 8007a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a90:	690e      	ldr	r6, [r1, #16]
 8007a92:	4607      	mov	r7, r0
 8007a94:	4698      	mov	r8, r3
 8007a96:	460c      	mov	r4, r1
 8007a98:	f101 0014 	add.w	r0, r1, #20
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	6805      	ldr	r5, [r0, #0]
 8007aa0:	b2a9      	uxth	r1, r5
 8007aa2:	fb02 8101 	mla	r1, r2, r1, r8
 8007aa6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007aaa:	0c2d      	lsrs	r5, r5, #16
 8007aac:	fb02 c505 	mla	r5, r2, r5, ip
 8007ab0:	b289      	uxth	r1, r1
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007ab8:	429e      	cmp	r6, r3
 8007aba:	f840 1b04 	str.w	r1, [r0], #4
 8007abe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007ac2:	dcec      	bgt.n	8007a9e <__multadd+0x12>
 8007ac4:	f1b8 0f00 	cmp.w	r8, #0
 8007ac8:	d022      	beq.n	8007b10 <__multadd+0x84>
 8007aca:	68a3      	ldr	r3, [r4, #8]
 8007acc:	42b3      	cmp	r3, r6
 8007ace:	dc19      	bgt.n	8007b04 <__multadd+0x78>
 8007ad0:	6861      	ldr	r1, [r4, #4]
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	3101      	adds	r1, #1
 8007ad6:	f7ff ff77 	bl	80079c8 <_Balloc>
 8007ada:	4605      	mov	r5, r0
 8007adc:	b928      	cbnz	r0, 8007aea <__multadd+0x5e>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	4b0d      	ldr	r3, [pc, #52]	; (8007b18 <__multadd+0x8c>)
 8007ae2:	480e      	ldr	r0, [pc, #56]	; (8007b1c <__multadd+0x90>)
 8007ae4:	21b5      	movs	r1, #181	; 0xb5
 8007ae6:	f000 fd13 	bl	8008510 <__assert_func>
 8007aea:	6922      	ldr	r2, [r4, #16]
 8007aec:	3202      	adds	r2, #2
 8007aee:	f104 010c 	add.w	r1, r4, #12
 8007af2:	0092      	lsls	r2, r2, #2
 8007af4:	300c      	adds	r0, #12
 8007af6:	f7ff ff59 	bl	80079ac <memcpy>
 8007afa:	4621      	mov	r1, r4
 8007afc:	4638      	mov	r0, r7
 8007afe:	f7ff ffa3 	bl	8007a48 <_Bfree>
 8007b02:	462c      	mov	r4, r5
 8007b04:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007b08:	3601      	adds	r6, #1
 8007b0a:	f8c3 8014 	str.w	r8, [r3, #20]
 8007b0e:	6126      	str	r6, [r4, #16]
 8007b10:	4620      	mov	r0, r4
 8007b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b16:	bf00      	nop
 8007b18:	0802edf3 	.word	0x0802edf3
 8007b1c:	0802ee04 	.word	0x0802ee04

08007b20 <__hi0bits>:
 8007b20:	0c03      	lsrs	r3, r0, #16
 8007b22:	041b      	lsls	r3, r3, #16
 8007b24:	b9d3      	cbnz	r3, 8007b5c <__hi0bits+0x3c>
 8007b26:	0400      	lsls	r0, r0, #16
 8007b28:	2310      	movs	r3, #16
 8007b2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b2e:	bf04      	itt	eq
 8007b30:	0200      	lsleq	r0, r0, #8
 8007b32:	3308      	addeq	r3, #8
 8007b34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b38:	bf04      	itt	eq
 8007b3a:	0100      	lsleq	r0, r0, #4
 8007b3c:	3304      	addeq	r3, #4
 8007b3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b42:	bf04      	itt	eq
 8007b44:	0080      	lsleq	r0, r0, #2
 8007b46:	3302      	addeq	r3, #2
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	db05      	blt.n	8007b58 <__hi0bits+0x38>
 8007b4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b50:	f103 0301 	add.w	r3, r3, #1
 8007b54:	bf08      	it	eq
 8007b56:	2320      	moveq	r3, #32
 8007b58:	4618      	mov	r0, r3
 8007b5a:	4770      	bx	lr
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	e7e4      	b.n	8007b2a <__hi0bits+0xa>

08007b60 <__lo0bits>:
 8007b60:	6803      	ldr	r3, [r0, #0]
 8007b62:	f013 0207 	ands.w	r2, r3, #7
 8007b66:	4601      	mov	r1, r0
 8007b68:	d00b      	beq.n	8007b82 <__lo0bits+0x22>
 8007b6a:	07da      	lsls	r2, r3, #31
 8007b6c:	d424      	bmi.n	8007bb8 <__lo0bits+0x58>
 8007b6e:	0798      	lsls	r0, r3, #30
 8007b70:	bf49      	itett	mi
 8007b72:	085b      	lsrmi	r3, r3, #1
 8007b74:	089b      	lsrpl	r3, r3, #2
 8007b76:	2001      	movmi	r0, #1
 8007b78:	600b      	strmi	r3, [r1, #0]
 8007b7a:	bf5c      	itt	pl
 8007b7c:	600b      	strpl	r3, [r1, #0]
 8007b7e:	2002      	movpl	r0, #2
 8007b80:	4770      	bx	lr
 8007b82:	b298      	uxth	r0, r3
 8007b84:	b9b0      	cbnz	r0, 8007bb4 <__lo0bits+0x54>
 8007b86:	0c1b      	lsrs	r3, r3, #16
 8007b88:	2010      	movs	r0, #16
 8007b8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b8e:	bf04      	itt	eq
 8007b90:	0a1b      	lsreq	r3, r3, #8
 8007b92:	3008      	addeq	r0, #8
 8007b94:	071a      	lsls	r2, r3, #28
 8007b96:	bf04      	itt	eq
 8007b98:	091b      	lsreq	r3, r3, #4
 8007b9a:	3004      	addeq	r0, #4
 8007b9c:	079a      	lsls	r2, r3, #30
 8007b9e:	bf04      	itt	eq
 8007ba0:	089b      	lsreq	r3, r3, #2
 8007ba2:	3002      	addeq	r0, #2
 8007ba4:	07da      	lsls	r2, r3, #31
 8007ba6:	d403      	bmi.n	8007bb0 <__lo0bits+0x50>
 8007ba8:	085b      	lsrs	r3, r3, #1
 8007baa:	f100 0001 	add.w	r0, r0, #1
 8007bae:	d005      	beq.n	8007bbc <__lo0bits+0x5c>
 8007bb0:	600b      	str	r3, [r1, #0]
 8007bb2:	4770      	bx	lr
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	e7e8      	b.n	8007b8a <__lo0bits+0x2a>
 8007bb8:	2000      	movs	r0, #0
 8007bba:	4770      	bx	lr
 8007bbc:	2020      	movs	r0, #32
 8007bbe:	4770      	bx	lr

08007bc0 <__i2b>:
 8007bc0:	b510      	push	{r4, lr}
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	f7ff feff 	bl	80079c8 <_Balloc>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	b928      	cbnz	r0, 8007bda <__i2b+0x1a>
 8007bce:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <__i2b+0x24>)
 8007bd0:	4805      	ldr	r0, [pc, #20]	; (8007be8 <__i2b+0x28>)
 8007bd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007bd6:	f000 fc9b 	bl	8008510 <__assert_func>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	6144      	str	r4, [r0, #20]
 8007bde:	6103      	str	r3, [r0, #16]
 8007be0:	bd10      	pop	{r4, pc}
 8007be2:	bf00      	nop
 8007be4:	0802edf3 	.word	0x0802edf3
 8007be8:	0802ee04 	.word	0x0802ee04

08007bec <__multiply>:
 8007bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	690a      	ldr	r2, [r1, #16]
 8007bf4:	6923      	ldr	r3, [r4, #16]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	bfb8      	it	lt
 8007bfa:	460b      	movlt	r3, r1
 8007bfc:	460d      	mov	r5, r1
 8007bfe:	bfbc      	itt	lt
 8007c00:	4625      	movlt	r5, r4
 8007c02:	461c      	movlt	r4, r3
 8007c04:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007c08:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007c0c:	68ab      	ldr	r3, [r5, #8]
 8007c0e:	6869      	ldr	r1, [r5, #4]
 8007c10:	eb0a 0709 	add.w	r7, sl, r9
 8007c14:	42bb      	cmp	r3, r7
 8007c16:	b085      	sub	sp, #20
 8007c18:	bfb8      	it	lt
 8007c1a:	3101      	addlt	r1, #1
 8007c1c:	f7ff fed4 	bl	80079c8 <_Balloc>
 8007c20:	b930      	cbnz	r0, 8007c30 <__multiply+0x44>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4b42      	ldr	r3, [pc, #264]	; (8007d30 <__multiply+0x144>)
 8007c26:	4843      	ldr	r0, [pc, #268]	; (8007d34 <__multiply+0x148>)
 8007c28:	f240 115d 	movw	r1, #349	; 0x15d
 8007c2c:	f000 fc70 	bl	8008510 <__assert_func>
 8007c30:	f100 0614 	add.w	r6, r0, #20
 8007c34:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007c38:	4633      	mov	r3, r6
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	4543      	cmp	r3, r8
 8007c3e:	d31e      	bcc.n	8007c7e <__multiply+0x92>
 8007c40:	f105 0c14 	add.w	ip, r5, #20
 8007c44:	f104 0314 	add.w	r3, r4, #20
 8007c48:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007c4c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007c50:	9202      	str	r2, [sp, #8]
 8007c52:	ebac 0205 	sub.w	r2, ip, r5
 8007c56:	3a15      	subs	r2, #21
 8007c58:	f022 0203 	bic.w	r2, r2, #3
 8007c5c:	3204      	adds	r2, #4
 8007c5e:	f105 0115 	add.w	r1, r5, #21
 8007c62:	458c      	cmp	ip, r1
 8007c64:	bf38      	it	cc
 8007c66:	2204      	movcc	r2, #4
 8007c68:	9201      	str	r2, [sp, #4]
 8007c6a:	9a02      	ldr	r2, [sp, #8]
 8007c6c:	9303      	str	r3, [sp, #12]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d808      	bhi.n	8007c84 <__multiply+0x98>
 8007c72:	2f00      	cmp	r7, #0
 8007c74:	dc55      	bgt.n	8007d22 <__multiply+0x136>
 8007c76:	6107      	str	r7, [r0, #16]
 8007c78:	b005      	add	sp, #20
 8007c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7e:	f843 2b04 	str.w	r2, [r3], #4
 8007c82:	e7db      	b.n	8007c3c <__multiply+0x50>
 8007c84:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c88:	f1ba 0f00 	cmp.w	sl, #0
 8007c8c:	d020      	beq.n	8007cd0 <__multiply+0xe4>
 8007c8e:	f105 0e14 	add.w	lr, r5, #20
 8007c92:	46b1      	mov	r9, r6
 8007c94:	2200      	movs	r2, #0
 8007c96:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007c9a:	f8d9 b000 	ldr.w	fp, [r9]
 8007c9e:	b2a1      	uxth	r1, r4
 8007ca0:	fa1f fb8b 	uxth.w	fp, fp
 8007ca4:	fb0a b101 	mla	r1, sl, r1, fp
 8007ca8:	4411      	add	r1, r2
 8007caa:	f8d9 2000 	ldr.w	r2, [r9]
 8007cae:	0c24      	lsrs	r4, r4, #16
 8007cb0:	0c12      	lsrs	r2, r2, #16
 8007cb2:	fb0a 2404 	mla	r4, sl, r4, r2
 8007cb6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007cba:	b289      	uxth	r1, r1
 8007cbc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007cc0:	45f4      	cmp	ip, lr
 8007cc2:	f849 1b04 	str.w	r1, [r9], #4
 8007cc6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007cca:	d8e4      	bhi.n	8007c96 <__multiply+0xaa>
 8007ccc:	9901      	ldr	r1, [sp, #4]
 8007cce:	5072      	str	r2, [r6, r1]
 8007cd0:	9a03      	ldr	r2, [sp, #12]
 8007cd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	f1b9 0f00 	cmp.w	r9, #0
 8007cdc:	d01f      	beq.n	8007d1e <__multiply+0x132>
 8007cde:	6834      	ldr	r4, [r6, #0]
 8007ce0:	f105 0114 	add.w	r1, r5, #20
 8007ce4:	46b6      	mov	lr, r6
 8007ce6:	f04f 0a00 	mov.w	sl, #0
 8007cea:	880a      	ldrh	r2, [r1, #0]
 8007cec:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007cf0:	fb09 b202 	mla	r2, r9, r2, fp
 8007cf4:	4492      	add	sl, r2
 8007cf6:	b2a4      	uxth	r4, r4
 8007cf8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007cfc:	f84e 4b04 	str.w	r4, [lr], #4
 8007d00:	f851 4b04 	ldr.w	r4, [r1], #4
 8007d04:	f8be 2000 	ldrh.w	r2, [lr]
 8007d08:	0c24      	lsrs	r4, r4, #16
 8007d0a:	fb09 2404 	mla	r4, r9, r4, r2
 8007d0e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007d12:	458c      	cmp	ip, r1
 8007d14:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d18:	d8e7      	bhi.n	8007cea <__multiply+0xfe>
 8007d1a:	9a01      	ldr	r2, [sp, #4]
 8007d1c:	50b4      	str	r4, [r6, r2]
 8007d1e:	3604      	adds	r6, #4
 8007d20:	e7a3      	b.n	8007c6a <__multiply+0x7e>
 8007d22:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1a5      	bne.n	8007c76 <__multiply+0x8a>
 8007d2a:	3f01      	subs	r7, #1
 8007d2c:	e7a1      	b.n	8007c72 <__multiply+0x86>
 8007d2e:	bf00      	nop
 8007d30:	0802edf3 	.word	0x0802edf3
 8007d34:	0802ee04 	.word	0x0802ee04

08007d38 <__pow5mult>:
 8007d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	4615      	mov	r5, r2
 8007d3e:	f012 0203 	ands.w	r2, r2, #3
 8007d42:	4606      	mov	r6, r0
 8007d44:	460f      	mov	r7, r1
 8007d46:	d007      	beq.n	8007d58 <__pow5mult+0x20>
 8007d48:	4c25      	ldr	r4, [pc, #148]	; (8007de0 <__pow5mult+0xa8>)
 8007d4a:	3a01      	subs	r2, #1
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d52:	f7ff fe9b 	bl	8007a8c <__multadd>
 8007d56:	4607      	mov	r7, r0
 8007d58:	10ad      	asrs	r5, r5, #2
 8007d5a:	d03d      	beq.n	8007dd8 <__pow5mult+0xa0>
 8007d5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d5e:	b97c      	cbnz	r4, 8007d80 <__pow5mult+0x48>
 8007d60:	2010      	movs	r0, #16
 8007d62:	f7ff fe1b 	bl	800799c <malloc>
 8007d66:	4602      	mov	r2, r0
 8007d68:	6270      	str	r0, [r6, #36]	; 0x24
 8007d6a:	b928      	cbnz	r0, 8007d78 <__pow5mult+0x40>
 8007d6c:	4b1d      	ldr	r3, [pc, #116]	; (8007de4 <__pow5mult+0xac>)
 8007d6e:	481e      	ldr	r0, [pc, #120]	; (8007de8 <__pow5mult+0xb0>)
 8007d70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d74:	f000 fbcc 	bl	8008510 <__assert_func>
 8007d78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d7c:	6004      	str	r4, [r0, #0]
 8007d7e:	60c4      	str	r4, [r0, #12]
 8007d80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d88:	b94c      	cbnz	r4, 8007d9e <__pow5mult+0x66>
 8007d8a:	f240 2171 	movw	r1, #625	; 0x271
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f7ff ff16 	bl	8007bc0 <__i2b>
 8007d94:	2300      	movs	r3, #0
 8007d96:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	6003      	str	r3, [r0, #0]
 8007d9e:	f04f 0900 	mov.w	r9, #0
 8007da2:	07eb      	lsls	r3, r5, #31
 8007da4:	d50a      	bpl.n	8007dbc <__pow5mult+0x84>
 8007da6:	4639      	mov	r1, r7
 8007da8:	4622      	mov	r2, r4
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7ff ff1e 	bl	8007bec <__multiply>
 8007db0:	4639      	mov	r1, r7
 8007db2:	4680      	mov	r8, r0
 8007db4:	4630      	mov	r0, r6
 8007db6:	f7ff fe47 	bl	8007a48 <_Bfree>
 8007dba:	4647      	mov	r7, r8
 8007dbc:	106d      	asrs	r5, r5, #1
 8007dbe:	d00b      	beq.n	8007dd8 <__pow5mult+0xa0>
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	b938      	cbnz	r0, 8007dd4 <__pow5mult+0x9c>
 8007dc4:	4622      	mov	r2, r4
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f7ff ff0f 	bl	8007bec <__multiply>
 8007dce:	6020      	str	r0, [r4, #0]
 8007dd0:	f8c0 9000 	str.w	r9, [r0]
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	e7e4      	b.n	8007da2 <__pow5mult+0x6a>
 8007dd8:	4638      	mov	r0, r7
 8007dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dde:	bf00      	nop
 8007de0:	0802ef58 	.word	0x0802ef58
 8007de4:	0802ed7d 	.word	0x0802ed7d
 8007de8:	0802ee04 	.word	0x0802ee04

08007dec <__lshift>:
 8007dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df0:	460c      	mov	r4, r1
 8007df2:	6849      	ldr	r1, [r1, #4]
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dfa:	68a3      	ldr	r3, [r4, #8]
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	4691      	mov	r9, r2
 8007e00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e04:	f108 0601 	add.w	r6, r8, #1
 8007e08:	42b3      	cmp	r3, r6
 8007e0a:	db0b      	blt.n	8007e24 <__lshift+0x38>
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f7ff fddb 	bl	80079c8 <_Balloc>
 8007e12:	4605      	mov	r5, r0
 8007e14:	b948      	cbnz	r0, 8007e2a <__lshift+0x3e>
 8007e16:	4602      	mov	r2, r0
 8007e18:	4b28      	ldr	r3, [pc, #160]	; (8007ebc <__lshift+0xd0>)
 8007e1a:	4829      	ldr	r0, [pc, #164]	; (8007ec0 <__lshift+0xd4>)
 8007e1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e20:	f000 fb76 	bl	8008510 <__assert_func>
 8007e24:	3101      	adds	r1, #1
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	e7ee      	b.n	8007e08 <__lshift+0x1c>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f100 0114 	add.w	r1, r0, #20
 8007e30:	f100 0210 	add.w	r2, r0, #16
 8007e34:	4618      	mov	r0, r3
 8007e36:	4553      	cmp	r3, sl
 8007e38:	db33      	blt.n	8007ea2 <__lshift+0xb6>
 8007e3a:	6920      	ldr	r0, [r4, #16]
 8007e3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e40:	f104 0314 	add.w	r3, r4, #20
 8007e44:	f019 091f 	ands.w	r9, r9, #31
 8007e48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e50:	d02b      	beq.n	8007eaa <__lshift+0xbe>
 8007e52:	f1c9 0e20 	rsb	lr, r9, #32
 8007e56:	468a      	mov	sl, r1
 8007e58:	2200      	movs	r2, #0
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	fa00 f009 	lsl.w	r0, r0, r9
 8007e60:	4302      	orrs	r2, r0
 8007e62:	f84a 2b04 	str.w	r2, [sl], #4
 8007e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e6a:	459c      	cmp	ip, r3
 8007e6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e70:	d8f3      	bhi.n	8007e5a <__lshift+0x6e>
 8007e72:	ebac 0304 	sub.w	r3, ip, r4
 8007e76:	3b15      	subs	r3, #21
 8007e78:	f023 0303 	bic.w	r3, r3, #3
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	f104 0015 	add.w	r0, r4, #21
 8007e82:	4584      	cmp	ip, r0
 8007e84:	bf38      	it	cc
 8007e86:	2304      	movcc	r3, #4
 8007e88:	50ca      	str	r2, [r1, r3]
 8007e8a:	b10a      	cbz	r2, 8007e90 <__lshift+0xa4>
 8007e8c:	f108 0602 	add.w	r6, r8, #2
 8007e90:	3e01      	subs	r6, #1
 8007e92:	4638      	mov	r0, r7
 8007e94:	612e      	str	r6, [r5, #16]
 8007e96:	4621      	mov	r1, r4
 8007e98:	f7ff fdd6 	bl	8007a48 <_Bfree>
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	e7c5      	b.n	8007e36 <__lshift+0x4a>
 8007eaa:	3904      	subs	r1, #4
 8007eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007eb4:	459c      	cmp	ip, r3
 8007eb6:	d8f9      	bhi.n	8007eac <__lshift+0xc0>
 8007eb8:	e7ea      	b.n	8007e90 <__lshift+0xa4>
 8007eba:	bf00      	nop
 8007ebc:	0802edf3 	.word	0x0802edf3
 8007ec0:	0802ee04 	.word	0x0802ee04

08007ec4 <__mcmp>:
 8007ec4:	b530      	push	{r4, r5, lr}
 8007ec6:	6902      	ldr	r2, [r0, #16]
 8007ec8:	690c      	ldr	r4, [r1, #16]
 8007eca:	1b12      	subs	r2, r2, r4
 8007ecc:	d10e      	bne.n	8007eec <__mcmp+0x28>
 8007ece:	f100 0314 	add.w	r3, r0, #20
 8007ed2:	3114      	adds	r1, #20
 8007ed4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ed8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007edc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ee0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ee4:	42a5      	cmp	r5, r4
 8007ee6:	d003      	beq.n	8007ef0 <__mcmp+0x2c>
 8007ee8:	d305      	bcc.n	8007ef6 <__mcmp+0x32>
 8007eea:	2201      	movs	r2, #1
 8007eec:	4610      	mov	r0, r2
 8007eee:	bd30      	pop	{r4, r5, pc}
 8007ef0:	4283      	cmp	r3, r0
 8007ef2:	d3f3      	bcc.n	8007edc <__mcmp+0x18>
 8007ef4:	e7fa      	b.n	8007eec <__mcmp+0x28>
 8007ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8007efa:	e7f7      	b.n	8007eec <__mcmp+0x28>

08007efc <__mdiff>:
 8007efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f00:	460c      	mov	r4, r1
 8007f02:	4606      	mov	r6, r0
 8007f04:	4611      	mov	r1, r2
 8007f06:	4620      	mov	r0, r4
 8007f08:	4617      	mov	r7, r2
 8007f0a:	f7ff ffdb 	bl	8007ec4 <__mcmp>
 8007f0e:	1e05      	subs	r5, r0, #0
 8007f10:	d110      	bne.n	8007f34 <__mdiff+0x38>
 8007f12:	4629      	mov	r1, r5
 8007f14:	4630      	mov	r0, r6
 8007f16:	f7ff fd57 	bl	80079c8 <_Balloc>
 8007f1a:	b930      	cbnz	r0, 8007f2a <__mdiff+0x2e>
 8007f1c:	4b39      	ldr	r3, [pc, #228]	; (8008004 <__mdiff+0x108>)
 8007f1e:	4602      	mov	r2, r0
 8007f20:	f240 2132 	movw	r1, #562	; 0x232
 8007f24:	4838      	ldr	r0, [pc, #224]	; (8008008 <__mdiff+0x10c>)
 8007f26:	f000 faf3 	bl	8008510 <__assert_func>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f34:	bfa4      	itt	ge
 8007f36:	463b      	movge	r3, r7
 8007f38:	4627      	movge	r7, r4
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	6879      	ldr	r1, [r7, #4]
 8007f3e:	bfa6      	itte	ge
 8007f40:	461c      	movge	r4, r3
 8007f42:	2500      	movge	r5, #0
 8007f44:	2501      	movlt	r5, #1
 8007f46:	f7ff fd3f 	bl	80079c8 <_Balloc>
 8007f4a:	b920      	cbnz	r0, 8007f56 <__mdiff+0x5a>
 8007f4c:	4b2d      	ldr	r3, [pc, #180]	; (8008004 <__mdiff+0x108>)
 8007f4e:	4602      	mov	r2, r0
 8007f50:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f54:	e7e6      	b.n	8007f24 <__mdiff+0x28>
 8007f56:	693e      	ldr	r6, [r7, #16]
 8007f58:	60c5      	str	r5, [r0, #12]
 8007f5a:	6925      	ldr	r5, [r4, #16]
 8007f5c:	f107 0114 	add.w	r1, r7, #20
 8007f60:	f104 0914 	add.w	r9, r4, #20
 8007f64:	f100 0e14 	add.w	lr, r0, #20
 8007f68:	f107 0210 	add.w	r2, r7, #16
 8007f6c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007f70:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007f74:	46f2      	mov	sl, lr
 8007f76:	2700      	movs	r7, #0
 8007f78:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f80:	fa1f f883 	uxth.w	r8, r3
 8007f84:	fa17 f78b 	uxtah	r7, r7, fp
 8007f88:	0c1b      	lsrs	r3, r3, #16
 8007f8a:	eba7 0808 	sub.w	r8, r7, r8
 8007f8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f96:	fa1f f888 	uxth.w	r8, r8
 8007f9a:	141f      	asrs	r7, r3, #16
 8007f9c:	454d      	cmp	r5, r9
 8007f9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007fa2:	f84a 3b04 	str.w	r3, [sl], #4
 8007fa6:	d8e7      	bhi.n	8007f78 <__mdiff+0x7c>
 8007fa8:	1b2b      	subs	r3, r5, r4
 8007faa:	3b15      	subs	r3, #21
 8007fac:	f023 0303 	bic.w	r3, r3, #3
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	3415      	adds	r4, #21
 8007fb4:	42a5      	cmp	r5, r4
 8007fb6:	bf38      	it	cc
 8007fb8:	2304      	movcc	r3, #4
 8007fba:	4419      	add	r1, r3
 8007fbc:	4473      	add	r3, lr
 8007fbe:	469e      	mov	lr, r3
 8007fc0:	460d      	mov	r5, r1
 8007fc2:	4565      	cmp	r5, ip
 8007fc4:	d30e      	bcc.n	8007fe4 <__mdiff+0xe8>
 8007fc6:	f10c 0203 	add.w	r2, ip, #3
 8007fca:	1a52      	subs	r2, r2, r1
 8007fcc:	f022 0203 	bic.w	r2, r2, #3
 8007fd0:	3903      	subs	r1, #3
 8007fd2:	458c      	cmp	ip, r1
 8007fd4:	bf38      	it	cc
 8007fd6:	2200      	movcc	r2, #0
 8007fd8:	441a      	add	r2, r3
 8007fda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007fde:	b17b      	cbz	r3, 8008000 <__mdiff+0x104>
 8007fe0:	6106      	str	r6, [r0, #16]
 8007fe2:	e7a5      	b.n	8007f30 <__mdiff+0x34>
 8007fe4:	f855 8b04 	ldr.w	r8, [r5], #4
 8007fe8:	fa17 f488 	uxtah	r4, r7, r8
 8007fec:	1422      	asrs	r2, r4, #16
 8007fee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007ff2:	b2a4      	uxth	r4, r4
 8007ff4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007ff8:	f84e 4b04 	str.w	r4, [lr], #4
 8007ffc:	1417      	asrs	r7, r2, #16
 8007ffe:	e7e0      	b.n	8007fc2 <__mdiff+0xc6>
 8008000:	3e01      	subs	r6, #1
 8008002:	e7ea      	b.n	8007fda <__mdiff+0xde>
 8008004:	0802edf3 	.word	0x0802edf3
 8008008:	0802ee04 	.word	0x0802ee04

0800800c <__d2b>:
 800800c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008010:	4689      	mov	r9, r1
 8008012:	2101      	movs	r1, #1
 8008014:	ec57 6b10 	vmov	r6, r7, d0
 8008018:	4690      	mov	r8, r2
 800801a:	f7ff fcd5 	bl	80079c8 <_Balloc>
 800801e:	4604      	mov	r4, r0
 8008020:	b930      	cbnz	r0, 8008030 <__d2b+0x24>
 8008022:	4602      	mov	r2, r0
 8008024:	4b25      	ldr	r3, [pc, #148]	; (80080bc <__d2b+0xb0>)
 8008026:	4826      	ldr	r0, [pc, #152]	; (80080c0 <__d2b+0xb4>)
 8008028:	f240 310a 	movw	r1, #778	; 0x30a
 800802c:	f000 fa70 	bl	8008510 <__assert_func>
 8008030:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008034:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008038:	bb35      	cbnz	r5, 8008088 <__d2b+0x7c>
 800803a:	2e00      	cmp	r6, #0
 800803c:	9301      	str	r3, [sp, #4]
 800803e:	d028      	beq.n	8008092 <__d2b+0x86>
 8008040:	4668      	mov	r0, sp
 8008042:	9600      	str	r6, [sp, #0]
 8008044:	f7ff fd8c 	bl	8007b60 <__lo0bits>
 8008048:	9900      	ldr	r1, [sp, #0]
 800804a:	b300      	cbz	r0, 800808e <__d2b+0x82>
 800804c:	9a01      	ldr	r2, [sp, #4]
 800804e:	f1c0 0320 	rsb	r3, r0, #32
 8008052:	fa02 f303 	lsl.w	r3, r2, r3
 8008056:	430b      	orrs	r3, r1
 8008058:	40c2      	lsrs	r2, r0
 800805a:	6163      	str	r3, [r4, #20]
 800805c:	9201      	str	r2, [sp, #4]
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	61a3      	str	r3, [r4, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	bf14      	ite	ne
 8008066:	2202      	movne	r2, #2
 8008068:	2201      	moveq	r2, #1
 800806a:	6122      	str	r2, [r4, #16]
 800806c:	b1d5      	cbz	r5, 80080a4 <__d2b+0x98>
 800806e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008072:	4405      	add	r5, r0
 8008074:	f8c9 5000 	str.w	r5, [r9]
 8008078:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800807c:	f8c8 0000 	str.w	r0, [r8]
 8008080:	4620      	mov	r0, r4
 8008082:	b003      	add	sp, #12
 8008084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800808c:	e7d5      	b.n	800803a <__d2b+0x2e>
 800808e:	6161      	str	r1, [r4, #20]
 8008090:	e7e5      	b.n	800805e <__d2b+0x52>
 8008092:	a801      	add	r0, sp, #4
 8008094:	f7ff fd64 	bl	8007b60 <__lo0bits>
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	6163      	str	r3, [r4, #20]
 800809c:	2201      	movs	r2, #1
 800809e:	6122      	str	r2, [r4, #16]
 80080a0:	3020      	adds	r0, #32
 80080a2:	e7e3      	b.n	800806c <__d2b+0x60>
 80080a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080ac:	f8c9 0000 	str.w	r0, [r9]
 80080b0:	6918      	ldr	r0, [r3, #16]
 80080b2:	f7ff fd35 	bl	8007b20 <__hi0bits>
 80080b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080ba:	e7df      	b.n	800807c <__d2b+0x70>
 80080bc:	0802edf3 	.word	0x0802edf3
 80080c0:	0802ee04 	.word	0x0802ee04

080080c4 <_calloc_r>:
 80080c4:	b513      	push	{r0, r1, r4, lr}
 80080c6:	434a      	muls	r2, r1
 80080c8:	4611      	mov	r1, r2
 80080ca:	9201      	str	r2, [sp, #4]
 80080cc:	f000 f85a 	bl	8008184 <_malloc_r>
 80080d0:	4604      	mov	r4, r0
 80080d2:	b118      	cbz	r0, 80080dc <_calloc_r+0x18>
 80080d4:	9a01      	ldr	r2, [sp, #4]
 80080d6:	2100      	movs	r1, #0
 80080d8:	f7fe f9e0 	bl	800649c <memset>
 80080dc:	4620      	mov	r0, r4
 80080de:	b002      	add	sp, #8
 80080e0:	bd10      	pop	{r4, pc}
	...

080080e4 <_free_r>:
 80080e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080e6:	2900      	cmp	r1, #0
 80080e8:	d048      	beq.n	800817c <_free_r+0x98>
 80080ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ee:	9001      	str	r0, [sp, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f1a1 0404 	sub.w	r4, r1, #4
 80080f6:	bfb8      	it	lt
 80080f8:	18e4      	addlt	r4, r4, r3
 80080fa:	f000 fa65 	bl	80085c8 <__malloc_lock>
 80080fe:	4a20      	ldr	r2, [pc, #128]	; (8008180 <_free_r+0x9c>)
 8008100:	9801      	ldr	r0, [sp, #4]
 8008102:	6813      	ldr	r3, [r2, #0]
 8008104:	4615      	mov	r5, r2
 8008106:	b933      	cbnz	r3, 8008116 <_free_r+0x32>
 8008108:	6063      	str	r3, [r4, #4]
 800810a:	6014      	str	r4, [r2, #0]
 800810c:	b003      	add	sp, #12
 800810e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008112:	f000 ba5f 	b.w	80085d4 <__malloc_unlock>
 8008116:	42a3      	cmp	r3, r4
 8008118:	d90b      	bls.n	8008132 <_free_r+0x4e>
 800811a:	6821      	ldr	r1, [r4, #0]
 800811c:	1862      	adds	r2, r4, r1
 800811e:	4293      	cmp	r3, r2
 8008120:	bf04      	itt	eq
 8008122:	681a      	ldreq	r2, [r3, #0]
 8008124:	685b      	ldreq	r3, [r3, #4]
 8008126:	6063      	str	r3, [r4, #4]
 8008128:	bf04      	itt	eq
 800812a:	1852      	addeq	r2, r2, r1
 800812c:	6022      	streq	r2, [r4, #0]
 800812e:	602c      	str	r4, [r5, #0]
 8008130:	e7ec      	b.n	800810c <_free_r+0x28>
 8008132:	461a      	mov	r2, r3
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b10b      	cbz	r3, 800813c <_free_r+0x58>
 8008138:	42a3      	cmp	r3, r4
 800813a:	d9fa      	bls.n	8008132 <_free_r+0x4e>
 800813c:	6811      	ldr	r1, [r2, #0]
 800813e:	1855      	adds	r5, r2, r1
 8008140:	42a5      	cmp	r5, r4
 8008142:	d10b      	bne.n	800815c <_free_r+0x78>
 8008144:	6824      	ldr	r4, [r4, #0]
 8008146:	4421      	add	r1, r4
 8008148:	1854      	adds	r4, r2, r1
 800814a:	42a3      	cmp	r3, r4
 800814c:	6011      	str	r1, [r2, #0]
 800814e:	d1dd      	bne.n	800810c <_free_r+0x28>
 8008150:	681c      	ldr	r4, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	6053      	str	r3, [r2, #4]
 8008156:	4421      	add	r1, r4
 8008158:	6011      	str	r1, [r2, #0]
 800815a:	e7d7      	b.n	800810c <_free_r+0x28>
 800815c:	d902      	bls.n	8008164 <_free_r+0x80>
 800815e:	230c      	movs	r3, #12
 8008160:	6003      	str	r3, [r0, #0]
 8008162:	e7d3      	b.n	800810c <_free_r+0x28>
 8008164:	6825      	ldr	r5, [r4, #0]
 8008166:	1961      	adds	r1, r4, r5
 8008168:	428b      	cmp	r3, r1
 800816a:	bf04      	itt	eq
 800816c:	6819      	ldreq	r1, [r3, #0]
 800816e:	685b      	ldreq	r3, [r3, #4]
 8008170:	6063      	str	r3, [r4, #4]
 8008172:	bf04      	itt	eq
 8008174:	1949      	addeq	r1, r1, r5
 8008176:	6021      	streq	r1, [r4, #0]
 8008178:	6054      	str	r4, [r2, #4]
 800817a:	e7c7      	b.n	800810c <_free_r+0x28>
 800817c:	b003      	add	sp, #12
 800817e:	bd30      	pop	{r4, r5, pc}
 8008180:	20000204 	.word	0x20000204

08008184 <_malloc_r>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	1ccd      	adds	r5, r1, #3
 8008188:	f025 0503 	bic.w	r5, r5, #3
 800818c:	3508      	adds	r5, #8
 800818e:	2d0c      	cmp	r5, #12
 8008190:	bf38      	it	cc
 8008192:	250c      	movcc	r5, #12
 8008194:	2d00      	cmp	r5, #0
 8008196:	4606      	mov	r6, r0
 8008198:	db01      	blt.n	800819e <_malloc_r+0x1a>
 800819a:	42a9      	cmp	r1, r5
 800819c:	d903      	bls.n	80081a6 <_malloc_r+0x22>
 800819e:	230c      	movs	r3, #12
 80081a0:	6033      	str	r3, [r6, #0]
 80081a2:	2000      	movs	r0, #0
 80081a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a6:	f000 fa0f 	bl	80085c8 <__malloc_lock>
 80081aa:	4921      	ldr	r1, [pc, #132]	; (8008230 <_malloc_r+0xac>)
 80081ac:	680a      	ldr	r2, [r1, #0]
 80081ae:	4614      	mov	r4, r2
 80081b0:	b99c      	cbnz	r4, 80081da <_malloc_r+0x56>
 80081b2:	4f20      	ldr	r7, [pc, #128]	; (8008234 <_malloc_r+0xb0>)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	b923      	cbnz	r3, 80081c2 <_malloc_r+0x3e>
 80081b8:	4621      	mov	r1, r4
 80081ba:	4630      	mov	r0, r6
 80081bc:	f000 f998 	bl	80084f0 <_sbrk_r>
 80081c0:	6038      	str	r0, [r7, #0]
 80081c2:	4629      	mov	r1, r5
 80081c4:	4630      	mov	r0, r6
 80081c6:	f000 f993 	bl	80084f0 <_sbrk_r>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	d123      	bne.n	8008216 <_malloc_r+0x92>
 80081ce:	230c      	movs	r3, #12
 80081d0:	6033      	str	r3, [r6, #0]
 80081d2:	4630      	mov	r0, r6
 80081d4:	f000 f9fe 	bl	80085d4 <__malloc_unlock>
 80081d8:	e7e3      	b.n	80081a2 <_malloc_r+0x1e>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	1b5b      	subs	r3, r3, r5
 80081de:	d417      	bmi.n	8008210 <_malloc_r+0x8c>
 80081e0:	2b0b      	cmp	r3, #11
 80081e2:	d903      	bls.n	80081ec <_malloc_r+0x68>
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	441c      	add	r4, r3
 80081e8:	6025      	str	r5, [r4, #0]
 80081ea:	e004      	b.n	80081f6 <_malloc_r+0x72>
 80081ec:	6863      	ldr	r3, [r4, #4]
 80081ee:	42a2      	cmp	r2, r4
 80081f0:	bf0c      	ite	eq
 80081f2:	600b      	streq	r3, [r1, #0]
 80081f4:	6053      	strne	r3, [r2, #4]
 80081f6:	4630      	mov	r0, r6
 80081f8:	f000 f9ec 	bl	80085d4 <__malloc_unlock>
 80081fc:	f104 000b 	add.w	r0, r4, #11
 8008200:	1d23      	adds	r3, r4, #4
 8008202:	f020 0007 	bic.w	r0, r0, #7
 8008206:	1ac2      	subs	r2, r0, r3
 8008208:	d0cc      	beq.n	80081a4 <_malloc_r+0x20>
 800820a:	1a1b      	subs	r3, r3, r0
 800820c:	50a3      	str	r3, [r4, r2]
 800820e:	e7c9      	b.n	80081a4 <_malloc_r+0x20>
 8008210:	4622      	mov	r2, r4
 8008212:	6864      	ldr	r4, [r4, #4]
 8008214:	e7cc      	b.n	80081b0 <_malloc_r+0x2c>
 8008216:	1cc4      	adds	r4, r0, #3
 8008218:	f024 0403 	bic.w	r4, r4, #3
 800821c:	42a0      	cmp	r0, r4
 800821e:	d0e3      	beq.n	80081e8 <_malloc_r+0x64>
 8008220:	1a21      	subs	r1, r4, r0
 8008222:	4630      	mov	r0, r6
 8008224:	f000 f964 	bl	80084f0 <_sbrk_r>
 8008228:	3001      	adds	r0, #1
 800822a:	d1dd      	bne.n	80081e8 <_malloc_r+0x64>
 800822c:	e7cf      	b.n	80081ce <_malloc_r+0x4a>
 800822e:	bf00      	nop
 8008230:	20000204 	.word	0x20000204
 8008234:	20000208 	.word	0x20000208

08008238 <__ssputs_r>:
 8008238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800823c:	688e      	ldr	r6, [r1, #8]
 800823e:	429e      	cmp	r6, r3
 8008240:	4682      	mov	sl, r0
 8008242:	460c      	mov	r4, r1
 8008244:	4690      	mov	r8, r2
 8008246:	461f      	mov	r7, r3
 8008248:	d838      	bhi.n	80082bc <__ssputs_r+0x84>
 800824a:	898a      	ldrh	r2, [r1, #12]
 800824c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008250:	d032      	beq.n	80082b8 <__ssputs_r+0x80>
 8008252:	6825      	ldr	r5, [r4, #0]
 8008254:	6909      	ldr	r1, [r1, #16]
 8008256:	eba5 0901 	sub.w	r9, r5, r1
 800825a:	6965      	ldr	r5, [r4, #20]
 800825c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008260:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008264:	3301      	adds	r3, #1
 8008266:	444b      	add	r3, r9
 8008268:	106d      	asrs	r5, r5, #1
 800826a:	429d      	cmp	r5, r3
 800826c:	bf38      	it	cc
 800826e:	461d      	movcc	r5, r3
 8008270:	0553      	lsls	r3, r2, #21
 8008272:	d531      	bpl.n	80082d8 <__ssputs_r+0xa0>
 8008274:	4629      	mov	r1, r5
 8008276:	f7ff ff85 	bl	8008184 <_malloc_r>
 800827a:	4606      	mov	r6, r0
 800827c:	b950      	cbnz	r0, 8008294 <__ssputs_r+0x5c>
 800827e:	230c      	movs	r3, #12
 8008280:	f8ca 3000 	str.w	r3, [sl]
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008294:	6921      	ldr	r1, [r4, #16]
 8008296:	464a      	mov	r2, r9
 8008298:	f7ff fb88 	bl	80079ac <memcpy>
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a6:	81a3      	strh	r3, [r4, #12]
 80082a8:	6126      	str	r6, [r4, #16]
 80082aa:	6165      	str	r5, [r4, #20]
 80082ac:	444e      	add	r6, r9
 80082ae:	eba5 0509 	sub.w	r5, r5, r9
 80082b2:	6026      	str	r6, [r4, #0]
 80082b4:	60a5      	str	r5, [r4, #8]
 80082b6:	463e      	mov	r6, r7
 80082b8:	42be      	cmp	r6, r7
 80082ba:	d900      	bls.n	80082be <__ssputs_r+0x86>
 80082bc:	463e      	mov	r6, r7
 80082be:	4632      	mov	r2, r6
 80082c0:	6820      	ldr	r0, [r4, #0]
 80082c2:	4641      	mov	r1, r8
 80082c4:	f000 f966 	bl	8008594 <memmove>
 80082c8:	68a3      	ldr	r3, [r4, #8]
 80082ca:	6822      	ldr	r2, [r4, #0]
 80082cc:	1b9b      	subs	r3, r3, r6
 80082ce:	4432      	add	r2, r6
 80082d0:	60a3      	str	r3, [r4, #8]
 80082d2:	6022      	str	r2, [r4, #0]
 80082d4:	2000      	movs	r0, #0
 80082d6:	e7db      	b.n	8008290 <__ssputs_r+0x58>
 80082d8:	462a      	mov	r2, r5
 80082da:	f000 f981 	bl	80085e0 <_realloc_r>
 80082de:	4606      	mov	r6, r0
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d1e1      	bne.n	80082a8 <__ssputs_r+0x70>
 80082e4:	6921      	ldr	r1, [r4, #16]
 80082e6:	4650      	mov	r0, sl
 80082e8:	f7ff fefc 	bl	80080e4 <_free_r>
 80082ec:	e7c7      	b.n	800827e <__ssputs_r+0x46>
	...

080082f0 <_svfiprintf_r>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	4698      	mov	r8, r3
 80082f6:	898b      	ldrh	r3, [r1, #12]
 80082f8:	061b      	lsls	r3, r3, #24
 80082fa:	b09d      	sub	sp, #116	; 0x74
 80082fc:	4607      	mov	r7, r0
 80082fe:	460d      	mov	r5, r1
 8008300:	4614      	mov	r4, r2
 8008302:	d50e      	bpl.n	8008322 <_svfiprintf_r+0x32>
 8008304:	690b      	ldr	r3, [r1, #16]
 8008306:	b963      	cbnz	r3, 8008322 <_svfiprintf_r+0x32>
 8008308:	2140      	movs	r1, #64	; 0x40
 800830a:	f7ff ff3b 	bl	8008184 <_malloc_r>
 800830e:	6028      	str	r0, [r5, #0]
 8008310:	6128      	str	r0, [r5, #16]
 8008312:	b920      	cbnz	r0, 800831e <_svfiprintf_r+0x2e>
 8008314:	230c      	movs	r3, #12
 8008316:	603b      	str	r3, [r7, #0]
 8008318:	f04f 30ff 	mov.w	r0, #4294967295
 800831c:	e0d1      	b.n	80084c2 <_svfiprintf_r+0x1d2>
 800831e:	2340      	movs	r3, #64	; 0x40
 8008320:	616b      	str	r3, [r5, #20]
 8008322:	2300      	movs	r3, #0
 8008324:	9309      	str	r3, [sp, #36]	; 0x24
 8008326:	2320      	movs	r3, #32
 8008328:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800832c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008330:	2330      	movs	r3, #48	; 0x30
 8008332:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80084dc <_svfiprintf_r+0x1ec>
 8008336:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800833a:	f04f 0901 	mov.w	r9, #1
 800833e:	4623      	mov	r3, r4
 8008340:	469a      	mov	sl, r3
 8008342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008346:	b10a      	cbz	r2, 800834c <_svfiprintf_r+0x5c>
 8008348:	2a25      	cmp	r2, #37	; 0x25
 800834a:	d1f9      	bne.n	8008340 <_svfiprintf_r+0x50>
 800834c:	ebba 0b04 	subs.w	fp, sl, r4
 8008350:	d00b      	beq.n	800836a <_svfiprintf_r+0x7a>
 8008352:	465b      	mov	r3, fp
 8008354:	4622      	mov	r2, r4
 8008356:	4629      	mov	r1, r5
 8008358:	4638      	mov	r0, r7
 800835a:	f7ff ff6d 	bl	8008238 <__ssputs_r>
 800835e:	3001      	adds	r0, #1
 8008360:	f000 80aa 	beq.w	80084b8 <_svfiprintf_r+0x1c8>
 8008364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008366:	445a      	add	r2, fp
 8008368:	9209      	str	r2, [sp, #36]	; 0x24
 800836a:	f89a 3000 	ldrb.w	r3, [sl]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 80a2 	beq.w	80084b8 <_svfiprintf_r+0x1c8>
 8008374:	2300      	movs	r3, #0
 8008376:	f04f 32ff 	mov.w	r2, #4294967295
 800837a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800837e:	f10a 0a01 	add.w	sl, sl, #1
 8008382:	9304      	str	r3, [sp, #16]
 8008384:	9307      	str	r3, [sp, #28]
 8008386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800838a:	931a      	str	r3, [sp, #104]	; 0x68
 800838c:	4654      	mov	r4, sl
 800838e:	2205      	movs	r2, #5
 8008390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008394:	4851      	ldr	r0, [pc, #324]	; (80084dc <_svfiprintf_r+0x1ec>)
 8008396:	f7f7 ff5b 	bl	8000250 <memchr>
 800839a:	9a04      	ldr	r2, [sp, #16]
 800839c:	b9d8      	cbnz	r0, 80083d6 <_svfiprintf_r+0xe6>
 800839e:	06d0      	lsls	r0, r2, #27
 80083a0:	bf44      	itt	mi
 80083a2:	2320      	movmi	r3, #32
 80083a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083a8:	0711      	lsls	r1, r2, #28
 80083aa:	bf44      	itt	mi
 80083ac:	232b      	movmi	r3, #43	; 0x2b
 80083ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083b2:	f89a 3000 	ldrb.w	r3, [sl]
 80083b6:	2b2a      	cmp	r3, #42	; 0x2a
 80083b8:	d015      	beq.n	80083e6 <_svfiprintf_r+0xf6>
 80083ba:	9a07      	ldr	r2, [sp, #28]
 80083bc:	4654      	mov	r4, sl
 80083be:	2000      	movs	r0, #0
 80083c0:	f04f 0c0a 	mov.w	ip, #10
 80083c4:	4621      	mov	r1, r4
 80083c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083ca:	3b30      	subs	r3, #48	; 0x30
 80083cc:	2b09      	cmp	r3, #9
 80083ce:	d94e      	bls.n	800846e <_svfiprintf_r+0x17e>
 80083d0:	b1b0      	cbz	r0, 8008400 <_svfiprintf_r+0x110>
 80083d2:	9207      	str	r2, [sp, #28]
 80083d4:	e014      	b.n	8008400 <_svfiprintf_r+0x110>
 80083d6:	eba0 0308 	sub.w	r3, r0, r8
 80083da:	fa09 f303 	lsl.w	r3, r9, r3
 80083de:	4313      	orrs	r3, r2
 80083e0:	9304      	str	r3, [sp, #16]
 80083e2:	46a2      	mov	sl, r4
 80083e4:	e7d2      	b.n	800838c <_svfiprintf_r+0x9c>
 80083e6:	9b03      	ldr	r3, [sp, #12]
 80083e8:	1d19      	adds	r1, r3, #4
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	9103      	str	r1, [sp, #12]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	bfbb      	ittet	lt
 80083f2:	425b      	neglt	r3, r3
 80083f4:	f042 0202 	orrlt.w	r2, r2, #2
 80083f8:	9307      	strge	r3, [sp, #28]
 80083fa:	9307      	strlt	r3, [sp, #28]
 80083fc:	bfb8      	it	lt
 80083fe:	9204      	strlt	r2, [sp, #16]
 8008400:	7823      	ldrb	r3, [r4, #0]
 8008402:	2b2e      	cmp	r3, #46	; 0x2e
 8008404:	d10c      	bne.n	8008420 <_svfiprintf_r+0x130>
 8008406:	7863      	ldrb	r3, [r4, #1]
 8008408:	2b2a      	cmp	r3, #42	; 0x2a
 800840a:	d135      	bne.n	8008478 <_svfiprintf_r+0x188>
 800840c:	9b03      	ldr	r3, [sp, #12]
 800840e:	1d1a      	adds	r2, r3, #4
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	9203      	str	r2, [sp, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	bfb8      	it	lt
 8008418:	f04f 33ff 	movlt.w	r3, #4294967295
 800841c:	3402      	adds	r4, #2
 800841e:	9305      	str	r3, [sp, #20]
 8008420:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80084ec <_svfiprintf_r+0x1fc>
 8008424:	7821      	ldrb	r1, [r4, #0]
 8008426:	2203      	movs	r2, #3
 8008428:	4650      	mov	r0, sl
 800842a:	f7f7 ff11 	bl	8000250 <memchr>
 800842e:	b140      	cbz	r0, 8008442 <_svfiprintf_r+0x152>
 8008430:	2340      	movs	r3, #64	; 0x40
 8008432:	eba0 000a 	sub.w	r0, r0, sl
 8008436:	fa03 f000 	lsl.w	r0, r3, r0
 800843a:	9b04      	ldr	r3, [sp, #16]
 800843c:	4303      	orrs	r3, r0
 800843e:	3401      	adds	r4, #1
 8008440:	9304      	str	r3, [sp, #16]
 8008442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008446:	4826      	ldr	r0, [pc, #152]	; (80084e0 <_svfiprintf_r+0x1f0>)
 8008448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800844c:	2206      	movs	r2, #6
 800844e:	f7f7 feff 	bl	8000250 <memchr>
 8008452:	2800      	cmp	r0, #0
 8008454:	d038      	beq.n	80084c8 <_svfiprintf_r+0x1d8>
 8008456:	4b23      	ldr	r3, [pc, #140]	; (80084e4 <_svfiprintf_r+0x1f4>)
 8008458:	bb1b      	cbnz	r3, 80084a2 <_svfiprintf_r+0x1b2>
 800845a:	9b03      	ldr	r3, [sp, #12]
 800845c:	3307      	adds	r3, #7
 800845e:	f023 0307 	bic.w	r3, r3, #7
 8008462:	3308      	adds	r3, #8
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008468:	4433      	add	r3, r6
 800846a:	9309      	str	r3, [sp, #36]	; 0x24
 800846c:	e767      	b.n	800833e <_svfiprintf_r+0x4e>
 800846e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008472:	460c      	mov	r4, r1
 8008474:	2001      	movs	r0, #1
 8008476:	e7a5      	b.n	80083c4 <_svfiprintf_r+0xd4>
 8008478:	2300      	movs	r3, #0
 800847a:	3401      	adds	r4, #1
 800847c:	9305      	str	r3, [sp, #20]
 800847e:	4619      	mov	r1, r3
 8008480:	f04f 0c0a 	mov.w	ip, #10
 8008484:	4620      	mov	r0, r4
 8008486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800848a:	3a30      	subs	r2, #48	; 0x30
 800848c:	2a09      	cmp	r2, #9
 800848e:	d903      	bls.n	8008498 <_svfiprintf_r+0x1a8>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d0c5      	beq.n	8008420 <_svfiprintf_r+0x130>
 8008494:	9105      	str	r1, [sp, #20]
 8008496:	e7c3      	b.n	8008420 <_svfiprintf_r+0x130>
 8008498:	fb0c 2101 	mla	r1, ip, r1, r2
 800849c:	4604      	mov	r4, r0
 800849e:	2301      	movs	r3, #1
 80084a0:	e7f0      	b.n	8008484 <_svfiprintf_r+0x194>
 80084a2:	ab03      	add	r3, sp, #12
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	462a      	mov	r2, r5
 80084a8:	4b0f      	ldr	r3, [pc, #60]	; (80084e8 <_svfiprintf_r+0x1f8>)
 80084aa:	a904      	add	r1, sp, #16
 80084ac:	4638      	mov	r0, r7
 80084ae:	f7fe f88f 	bl	80065d0 <_printf_float>
 80084b2:	1c42      	adds	r2, r0, #1
 80084b4:	4606      	mov	r6, r0
 80084b6:	d1d6      	bne.n	8008466 <_svfiprintf_r+0x176>
 80084b8:	89ab      	ldrh	r3, [r5, #12]
 80084ba:	065b      	lsls	r3, r3, #25
 80084bc:	f53f af2c 	bmi.w	8008318 <_svfiprintf_r+0x28>
 80084c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084c2:	b01d      	add	sp, #116	; 0x74
 80084c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c8:	ab03      	add	r3, sp, #12
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	462a      	mov	r2, r5
 80084ce:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <_svfiprintf_r+0x1f8>)
 80084d0:	a904      	add	r1, sp, #16
 80084d2:	4638      	mov	r0, r7
 80084d4:	f7fe fb08 	bl	8006ae8 <_printf_i>
 80084d8:	e7eb      	b.n	80084b2 <_svfiprintf_r+0x1c2>
 80084da:	bf00      	nop
 80084dc:	0802ef64 	.word	0x0802ef64
 80084e0:	0802ef6e 	.word	0x0802ef6e
 80084e4:	080065d1 	.word	0x080065d1
 80084e8:	08008239 	.word	0x08008239
 80084ec:	0802ef6a 	.word	0x0802ef6a

080084f0 <_sbrk_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	4d06      	ldr	r5, [pc, #24]	; (800850c <_sbrk_r+0x1c>)
 80084f4:	2300      	movs	r3, #0
 80084f6:	4604      	mov	r4, r0
 80084f8:	4608      	mov	r0, r1
 80084fa:	602b      	str	r3, [r5, #0]
 80084fc:	f7f9 fb9a 	bl	8001c34 <_sbrk>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	d102      	bne.n	800850a <_sbrk_r+0x1a>
 8008504:	682b      	ldr	r3, [r5, #0]
 8008506:	b103      	cbz	r3, 800850a <_sbrk_r+0x1a>
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	20000354 	.word	0x20000354

08008510 <__assert_func>:
 8008510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008512:	4614      	mov	r4, r2
 8008514:	461a      	mov	r2, r3
 8008516:	4b09      	ldr	r3, [pc, #36]	; (800853c <__assert_func+0x2c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4605      	mov	r5, r0
 800851c:	68d8      	ldr	r0, [r3, #12]
 800851e:	b14c      	cbz	r4, 8008534 <__assert_func+0x24>
 8008520:	4b07      	ldr	r3, [pc, #28]	; (8008540 <__assert_func+0x30>)
 8008522:	9100      	str	r1, [sp, #0]
 8008524:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008528:	4906      	ldr	r1, [pc, #24]	; (8008544 <__assert_func+0x34>)
 800852a:	462b      	mov	r3, r5
 800852c:	f000 f80e 	bl	800854c <fiprintf>
 8008530:	f000 faa4 	bl	8008a7c <abort>
 8008534:	4b04      	ldr	r3, [pc, #16]	; (8008548 <__assert_func+0x38>)
 8008536:	461c      	mov	r4, r3
 8008538:	e7f3      	b.n	8008522 <__assert_func+0x12>
 800853a:	bf00      	nop
 800853c:	20000010 	.word	0x20000010
 8008540:	0802ef75 	.word	0x0802ef75
 8008544:	0802ef82 	.word	0x0802ef82
 8008548:	0802efb0 	.word	0x0802efb0

0800854c <fiprintf>:
 800854c:	b40e      	push	{r1, r2, r3}
 800854e:	b503      	push	{r0, r1, lr}
 8008550:	4601      	mov	r1, r0
 8008552:	ab03      	add	r3, sp, #12
 8008554:	4805      	ldr	r0, [pc, #20]	; (800856c <fiprintf+0x20>)
 8008556:	f853 2b04 	ldr.w	r2, [r3], #4
 800855a:	6800      	ldr	r0, [r0, #0]
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	f000 f88f 	bl	8008680 <_vfiprintf_r>
 8008562:	b002      	add	sp, #8
 8008564:	f85d eb04 	ldr.w	lr, [sp], #4
 8008568:	b003      	add	sp, #12
 800856a:	4770      	bx	lr
 800856c:	20000010 	.word	0x20000010

08008570 <__ascii_mbtowc>:
 8008570:	b082      	sub	sp, #8
 8008572:	b901      	cbnz	r1, 8008576 <__ascii_mbtowc+0x6>
 8008574:	a901      	add	r1, sp, #4
 8008576:	b142      	cbz	r2, 800858a <__ascii_mbtowc+0x1a>
 8008578:	b14b      	cbz	r3, 800858e <__ascii_mbtowc+0x1e>
 800857a:	7813      	ldrb	r3, [r2, #0]
 800857c:	600b      	str	r3, [r1, #0]
 800857e:	7812      	ldrb	r2, [r2, #0]
 8008580:	1e10      	subs	r0, r2, #0
 8008582:	bf18      	it	ne
 8008584:	2001      	movne	r0, #1
 8008586:	b002      	add	sp, #8
 8008588:	4770      	bx	lr
 800858a:	4610      	mov	r0, r2
 800858c:	e7fb      	b.n	8008586 <__ascii_mbtowc+0x16>
 800858e:	f06f 0001 	mvn.w	r0, #1
 8008592:	e7f8      	b.n	8008586 <__ascii_mbtowc+0x16>

08008594 <memmove>:
 8008594:	4288      	cmp	r0, r1
 8008596:	b510      	push	{r4, lr}
 8008598:	eb01 0402 	add.w	r4, r1, r2
 800859c:	d902      	bls.n	80085a4 <memmove+0x10>
 800859e:	4284      	cmp	r4, r0
 80085a0:	4623      	mov	r3, r4
 80085a2:	d807      	bhi.n	80085b4 <memmove+0x20>
 80085a4:	1e43      	subs	r3, r0, #1
 80085a6:	42a1      	cmp	r1, r4
 80085a8:	d008      	beq.n	80085bc <memmove+0x28>
 80085aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085b2:	e7f8      	b.n	80085a6 <memmove+0x12>
 80085b4:	4402      	add	r2, r0
 80085b6:	4601      	mov	r1, r0
 80085b8:	428a      	cmp	r2, r1
 80085ba:	d100      	bne.n	80085be <memmove+0x2a>
 80085bc:	bd10      	pop	{r4, pc}
 80085be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085c6:	e7f7      	b.n	80085b8 <memmove+0x24>

080085c8 <__malloc_lock>:
 80085c8:	4801      	ldr	r0, [pc, #4]	; (80085d0 <__malloc_lock+0x8>)
 80085ca:	f000 bc17 	b.w	8008dfc <__retarget_lock_acquire_recursive>
 80085ce:	bf00      	nop
 80085d0:	2000035c 	.word	0x2000035c

080085d4 <__malloc_unlock>:
 80085d4:	4801      	ldr	r0, [pc, #4]	; (80085dc <__malloc_unlock+0x8>)
 80085d6:	f000 bc12 	b.w	8008dfe <__retarget_lock_release_recursive>
 80085da:	bf00      	nop
 80085dc:	2000035c 	.word	0x2000035c

080085e0 <_realloc_r>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	4607      	mov	r7, r0
 80085e4:	4614      	mov	r4, r2
 80085e6:	460e      	mov	r6, r1
 80085e8:	b921      	cbnz	r1, 80085f4 <_realloc_r+0x14>
 80085ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80085ee:	4611      	mov	r1, r2
 80085f0:	f7ff bdc8 	b.w	8008184 <_malloc_r>
 80085f4:	b922      	cbnz	r2, 8008600 <_realloc_r+0x20>
 80085f6:	f7ff fd75 	bl	80080e4 <_free_r>
 80085fa:	4625      	mov	r5, r4
 80085fc:	4628      	mov	r0, r5
 80085fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008600:	f000 fc62 	bl	8008ec8 <_malloc_usable_size_r>
 8008604:	42a0      	cmp	r0, r4
 8008606:	d20f      	bcs.n	8008628 <_realloc_r+0x48>
 8008608:	4621      	mov	r1, r4
 800860a:	4638      	mov	r0, r7
 800860c:	f7ff fdba 	bl	8008184 <_malloc_r>
 8008610:	4605      	mov	r5, r0
 8008612:	2800      	cmp	r0, #0
 8008614:	d0f2      	beq.n	80085fc <_realloc_r+0x1c>
 8008616:	4631      	mov	r1, r6
 8008618:	4622      	mov	r2, r4
 800861a:	f7ff f9c7 	bl	80079ac <memcpy>
 800861e:	4631      	mov	r1, r6
 8008620:	4638      	mov	r0, r7
 8008622:	f7ff fd5f 	bl	80080e4 <_free_r>
 8008626:	e7e9      	b.n	80085fc <_realloc_r+0x1c>
 8008628:	4635      	mov	r5, r6
 800862a:	e7e7      	b.n	80085fc <_realloc_r+0x1c>

0800862c <__sfputc_r>:
 800862c:	6893      	ldr	r3, [r2, #8]
 800862e:	3b01      	subs	r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	b410      	push	{r4}
 8008634:	6093      	str	r3, [r2, #8]
 8008636:	da08      	bge.n	800864a <__sfputc_r+0x1e>
 8008638:	6994      	ldr	r4, [r2, #24]
 800863a:	42a3      	cmp	r3, r4
 800863c:	db01      	blt.n	8008642 <__sfputc_r+0x16>
 800863e:	290a      	cmp	r1, #10
 8008640:	d103      	bne.n	800864a <__sfputc_r+0x1e>
 8008642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008646:	f000 b94b 	b.w	80088e0 <__swbuf_r>
 800864a:	6813      	ldr	r3, [r2, #0]
 800864c:	1c58      	adds	r0, r3, #1
 800864e:	6010      	str	r0, [r2, #0]
 8008650:	7019      	strb	r1, [r3, #0]
 8008652:	4608      	mov	r0, r1
 8008654:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008658:	4770      	bx	lr

0800865a <__sfputs_r>:
 800865a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865c:	4606      	mov	r6, r0
 800865e:	460f      	mov	r7, r1
 8008660:	4614      	mov	r4, r2
 8008662:	18d5      	adds	r5, r2, r3
 8008664:	42ac      	cmp	r4, r5
 8008666:	d101      	bne.n	800866c <__sfputs_r+0x12>
 8008668:	2000      	movs	r0, #0
 800866a:	e007      	b.n	800867c <__sfputs_r+0x22>
 800866c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008670:	463a      	mov	r2, r7
 8008672:	4630      	mov	r0, r6
 8008674:	f7ff ffda 	bl	800862c <__sfputc_r>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d1f3      	bne.n	8008664 <__sfputs_r+0xa>
 800867c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008680 <_vfiprintf_r>:
 8008680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008684:	460d      	mov	r5, r1
 8008686:	b09d      	sub	sp, #116	; 0x74
 8008688:	4614      	mov	r4, r2
 800868a:	4698      	mov	r8, r3
 800868c:	4606      	mov	r6, r0
 800868e:	b118      	cbz	r0, 8008698 <_vfiprintf_r+0x18>
 8008690:	6983      	ldr	r3, [r0, #24]
 8008692:	b90b      	cbnz	r3, 8008698 <_vfiprintf_r+0x18>
 8008694:	f000 fb14 	bl	8008cc0 <__sinit>
 8008698:	4b89      	ldr	r3, [pc, #548]	; (80088c0 <_vfiprintf_r+0x240>)
 800869a:	429d      	cmp	r5, r3
 800869c:	d11b      	bne.n	80086d6 <_vfiprintf_r+0x56>
 800869e:	6875      	ldr	r5, [r6, #4]
 80086a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086a2:	07d9      	lsls	r1, r3, #31
 80086a4:	d405      	bmi.n	80086b2 <_vfiprintf_r+0x32>
 80086a6:	89ab      	ldrh	r3, [r5, #12]
 80086a8:	059a      	lsls	r2, r3, #22
 80086aa:	d402      	bmi.n	80086b2 <_vfiprintf_r+0x32>
 80086ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ae:	f000 fba5 	bl	8008dfc <__retarget_lock_acquire_recursive>
 80086b2:	89ab      	ldrh	r3, [r5, #12]
 80086b4:	071b      	lsls	r3, r3, #28
 80086b6:	d501      	bpl.n	80086bc <_vfiprintf_r+0x3c>
 80086b8:	692b      	ldr	r3, [r5, #16]
 80086ba:	b9eb      	cbnz	r3, 80086f8 <_vfiprintf_r+0x78>
 80086bc:	4629      	mov	r1, r5
 80086be:	4630      	mov	r0, r6
 80086c0:	f000 f96e 	bl	80089a0 <__swsetup_r>
 80086c4:	b1c0      	cbz	r0, 80086f8 <_vfiprintf_r+0x78>
 80086c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086c8:	07dc      	lsls	r4, r3, #31
 80086ca:	d50e      	bpl.n	80086ea <_vfiprintf_r+0x6a>
 80086cc:	f04f 30ff 	mov.w	r0, #4294967295
 80086d0:	b01d      	add	sp, #116	; 0x74
 80086d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d6:	4b7b      	ldr	r3, [pc, #492]	; (80088c4 <_vfiprintf_r+0x244>)
 80086d8:	429d      	cmp	r5, r3
 80086da:	d101      	bne.n	80086e0 <_vfiprintf_r+0x60>
 80086dc:	68b5      	ldr	r5, [r6, #8]
 80086de:	e7df      	b.n	80086a0 <_vfiprintf_r+0x20>
 80086e0:	4b79      	ldr	r3, [pc, #484]	; (80088c8 <_vfiprintf_r+0x248>)
 80086e2:	429d      	cmp	r5, r3
 80086e4:	bf08      	it	eq
 80086e6:	68f5      	ldreq	r5, [r6, #12]
 80086e8:	e7da      	b.n	80086a0 <_vfiprintf_r+0x20>
 80086ea:	89ab      	ldrh	r3, [r5, #12]
 80086ec:	0598      	lsls	r0, r3, #22
 80086ee:	d4ed      	bmi.n	80086cc <_vfiprintf_r+0x4c>
 80086f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086f2:	f000 fb84 	bl	8008dfe <__retarget_lock_release_recursive>
 80086f6:	e7e9      	b.n	80086cc <_vfiprintf_r+0x4c>
 80086f8:	2300      	movs	r3, #0
 80086fa:	9309      	str	r3, [sp, #36]	; 0x24
 80086fc:	2320      	movs	r3, #32
 80086fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008702:	f8cd 800c 	str.w	r8, [sp, #12]
 8008706:	2330      	movs	r3, #48	; 0x30
 8008708:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80088cc <_vfiprintf_r+0x24c>
 800870c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008710:	f04f 0901 	mov.w	r9, #1
 8008714:	4623      	mov	r3, r4
 8008716:	469a      	mov	sl, r3
 8008718:	f813 2b01 	ldrb.w	r2, [r3], #1
 800871c:	b10a      	cbz	r2, 8008722 <_vfiprintf_r+0xa2>
 800871e:	2a25      	cmp	r2, #37	; 0x25
 8008720:	d1f9      	bne.n	8008716 <_vfiprintf_r+0x96>
 8008722:	ebba 0b04 	subs.w	fp, sl, r4
 8008726:	d00b      	beq.n	8008740 <_vfiprintf_r+0xc0>
 8008728:	465b      	mov	r3, fp
 800872a:	4622      	mov	r2, r4
 800872c:	4629      	mov	r1, r5
 800872e:	4630      	mov	r0, r6
 8008730:	f7ff ff93 	bl	800865a <__sfputs_r>
 8008734:	3001      	adds	r0, #1
 8008736:	f000 80aa 	beq.w	800888e <_vfiprintf_r+0x20e>
 800873a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800873c:	445a      	add	r2, fp
 800873e:	9209      	str	r2, [sp, #36]	; 0x24
 8008740:	f89a 3000 	ldrb.w	r3, [sl]
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 80a2 	beq.w	800888e <_vfiprintf_r+0x20e>
 800874a:	2300      	movs	r3, #0
 800874c:	f04f 32ff 	mov.w	r2, #4294967295
 8008750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008754:	f10a 0a01 	add.w	sl, sl, #1
 8008758:	9304      	str	r3, [sp, #16]
 800875a:	9307      	str	r3, [sp, #28]
 800875c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008760:	931a      	str	r3, [sp, #104]	; 0x68
 8008762:	4654      	mov	r4, sl
 8008764:	2205      	movs	r2, #5
 8008766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800876a:	4858      	ldr	r0, [pc, #352]	; (80088cc <_vfiprintf_r+0x24c>)
 800876c:	f7f7 fd70 	bl	8000250 <memchr>
 8008770:	9a04      	ldr	r2, [sp, #16]
 8008772:	b9d8      	cbnz	r0, 80087ac <_vfiprintf_r+0x12c>
 8008774:	06d1      	lsls	r1, r2, #27
 8008776:	bf44      	itt	mi
 8008778:	2320      	movmi	r3, #32
 800877a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800877e:	0713      	lsls	r3, r2, #28
 8008780:	bf44      	itt	mi
 8008782:	232b      	movmi	r3, #43	; 0x2b
 8008784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008788:	f89a 3000 	ldrb.w	r3, [sl]
 800878c:	2b2a      	cmp	r3, #42	; 0x2a
 800878e:	d015      	beq.n	80087bc <_vfiprintf_r+0x13c>
 8008790:	9a07      	ldr	r2, [sp, #28]
 8008792:	4654      	mov	r4, sl
 8008794:	2000      	movs	r0, #0
 8008796:	f04f 0c0a 	mov.w	ip, #10
 800879a:	4621      	mov	r1, r4
 800879c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087a0:	3b30      	subs	r3, #48	; 0x30
 80087a2:	2b09      	cmp	r3, #9
 80087a4:	d94e      	bls.n	8008844 <_vfiprintf_r+0x1c4>
 80087a6:	b1b0      	cbz	r0, 80087d6 <_vfiprintf_r+0x156>
 80087a8:	9207      	str	r2, [sp, #28]
 80087aa:	e014      	b.n	80087d6 <_vfiprintf_r+0x156>
 80087ac:	eba0 0308 	sub.w	r3, r0, r8
 80087b0:	fa09 f303 	lsl.w	r3, r9, r3
 80087b4:	4313      	orrs	r3, r2
 80087b6:	9304      	str	r3, [sp, #16]
 80087b8:	46a2      	mov	sl, r4
 80087ba:	e7d2      	b.n	8008762 <_vfiprintf_r+0xe2>
 80087bc:	9b03      	ldr	r3, [sp, #12]
 80087be:	1d19      	adds	r1, r3, #4
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	9103      	str	r1, [sp, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	bfbb      	ittet	lt
 80087c8:	425b      	neglt	r3, r3
 80087ca:	f042 0202 	orrlt.w	r2, r2, #2
 80087ce:	9307      	strge	r3, [sp, #28]
 80087d0:	9307      	strlt	r3, [sp, #28]
 80087d2:	bfb8      	it	lt
 80087d4:	9204      	strlt	r2, [sp, #16]
 80087d6:	7823      	ldrb	r3, [r4, #0]
 80087d8:	2b2e      	cmp	r3, #46	; 0x2e
 80087da:	d10c      	bne.n	80087f6 <_vfiprintf_r+0x176>
 80087dc:	7863      	ldrb	r3, [r4, #1]
 80087de:	2b2a      	cmp	r3, #42	; 0x2a
 80087e0:	d135      	bne.n	800884e <_vfiprintf_r+0x1ce>
 80087e2:	9b03      	ldr	r3, [sp, #12]
 80087e4:	1d1a      	adds	r2, r3, #4
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	9203      	str	r2, [sp, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	bfb8      	it	lt
 80087ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80087f2:	3402      	adds	r4, #2
 80087f4:	9305      	str	r3, [sp, #20]
 80087f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80088dc <_vfiprintf_r+0x25c>
 80087fa:	7821      	ldrb	r1, [r4, #0]
 80087fc:	2203      	movs	r2, #3
 80087fe:	4650      	mov	r0, sl
 8008800:	f7f7 fd26 	bl	8000250 <memchr>
 8008804:	b140      	cbz	r0, 8008818 <_vfiprintf_r+0x198>
 8008806:	2340      	movs	r3, #64	; 0x40
 8008808:	eba0 000a 	sub.w	r0, r0, sl
 800880c:	fa03 f000 	lsl.w	r0, r3, r0
 8008810:	9b04      	ldr	r3, [sp, #16]
 8008812:	4303      	orrs	r3, r0
 8008814:	3401      	adds	r4, #1
 8008816:	9304      	str	r3, [sp, #16]
 8008818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800881c:	482c      	ldr	r0, [pc, #176]	; (80088d0 <_vfiprintf_r+0x250>)
 800881e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008822:	2206      	movs	r2, #6
 8008824:	f7f7 fd14 	bl	8000250 <memchr>
 8008828:	2800      	cmp	r0, #0
 800882a:	d03f      	beq.n	80088ac <_vfiprintf_r+0x22c>
 800882c:	4b29      	ldr	r3, [pc, #164]	; (80088d4 <_vfiprintf_r+0x254>)
 800882e:	bb1b      	cbnz	r3, 8008878 <_vfiprintf_r+0x1f8>
 8008830:	9b03      	ldr	r3, [sp, #12]
 8008832:	3307      	adds	r3, #7
 8008834:	f023 0307 	bic.w	r3, r3, #7
 8008838:	3308      	adds	r3, #8
 800883a:	9303      	str	r3, [sp, #12]
 800883c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800883e:	443b      	add	r3, r7
 8008840:	9309      	str	r3, [sp, #36]	; 0x24
 8008842:	e767      	b.n	8008714 <_vfiprintf_r+0x94>
 8008844:	fb0c 3202 	mla	r2, ip, r2, r3
 8008848:	460c      	mov	r4, r1
 800884a:	2001      	movs	r0, #1
 800884c:	e7a5      	b.n	800879a <_vfiprintf_r+0x11a>
 800884e:	2300      	movs	r3, #0
 8008850:	3401      	adds	r4, #1
 8008852:	9305      	str	r3, [sp, #20]
 8008854:	4619      	mov	r1, r3
 8008856:	f04f 0c0a 	mov.w	ip, #10
 800885a:	4620      	mov	r0, r4
 800885c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008860:	3a30      	subs	r2, #48	; 0x30
 8008862:	2a09      	cmp	r2, #9
 8008864:	d903      	bls.n	800886e <_vfiprintf_r+0x1ee>
 8008866:	2b00      	cmp	r3, #0
 8008868:	d0c5      	beq.n	80087f6 <_vfiprintf_r+0x176>
 800886a:	9105      	str	r1, [sp, #20]
 800886c:	e7c3      	b.n	80087f6 <_vfiprintf_r+0x176>
 800886e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008872:	4604      	mov	r4, r0
 8008874:	2301      	movs	r3, #1
 8008876:	e7f0      	b.n	800885a <_vfiprintf_r+0x1da>
 8008878:	ab03      	add	r3, sp, #12
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	462a      	mov	r2, r5
 800887e:	4b16      	ldr	r3, [pc, #88]	; (80088d8 <_vfiprintf_r+0x258>)
 8008880:	a904      	add	r1, sp, #16
 8008882:	4630      	mov	r0, r6
 8008884:	f7fd fea4 	bl	80065d0 <_printf_float>
 8008888:	4607      	mov	r7, r0
 800888a:	1c78      	adds	r0, r7, #1
 800888c:	d1d6      	bne.n	800883c <_vfiprintf_r+0x1bc>
 800888e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008890:	07d9      	lsls	r1, r3, #31
 8008892:	d405      	bmi.n	80088a0 <_vfiprintf_r+0x220>
 8008894:	89ab      	ldrh	r3, [r5, #12]
 8008896:	059a      	lsls	r2, r3, #22
 8008898:	d402      	bmi.n	80088a0 <_vfiprintf_r+0x220>
 800889a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800889c:	f000 faaf 	bl	8008dfe <__retarget_lock_release_recursive>
 80088a0:	89ab      	ldrh	r3, [r5, #12]
 80088a2:	065b      	lsls	r3, r3, #25
 80088a4:	f53f af12 	bmi.w	80086cc <_vfiprintf_r+0x4c>
 80088a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088aa:	e711      	b.n	80086d0 <_vfiprintf_r+0x50>
 80088ac:	ab03      	add	r3, sp, #12
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	462a      	mov	r2, r5
 80088b2:	4b09      	ldr	r3, [pc, #36]	; (80088d8 <_vfiprintf_r+0x258>)
 80088b4:	a904      	add	r1, sp, #16
 80088b6:	4630      	mov	r0, r6
 80088b8:	f7fe f916 	bl	8006ae8 <_printf_i>
 80088bc:	e7e4      	b.n	8008888 <_vfiprintf_r+0x208>
 80088be:	bf00      	nop
 80088c0:	0802f0dc 	.word	0x0802f0dc
 80088c4:	0802f0fc 	.word	0x0802f0fc
 80088c8:	0802f0bc 	.word	0x0802f0bc
 80088cc:	0802ef64 	.word	0x0802ef64
 80088d0:	0802ef6e 	.word	0x0802ef6e
 80088d4:	080065d1 	.word	0x080065d1
 80088d8:	0800865b 	.word	0x0800865b
 80088dc:	0802ef6a 	.word	0x0802ef6a

080088e0 <__swbuf_r>:
 80088e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e2:	460e      	mov	r6, r1
 80088e4:	4614      	mov	r4, r2
 80088e6:	4605      	mov	r5, r0
 80088e8:	b118      	cbz	r0, 80088f2 <__swbuf_r+0x12>
 80088ea:	6983      	ldr	r3, [r0, #24]
 80088ec:	b90b      	cbnz	r3, 80088f2 <__swbuf_r+0x12>
 80088ee:	f000 f9e7 	bl	8008cc0 <__sinit>
 80088f2:	4b21      	ldr	r3, [pc, #132]	; (8008978 <__swbuf_r+0x98>)
 80088f4:	429c      	cmp	r4, r3
 80088f6:	d12b      	bne.n	8008950 <__swbuf_r+0x70>
 80088f8:	686c      	ldr	r4, [r5, #4]
 80088fa:	69a3      	ldr	r3, [r4, #24]
 80088fc:	60a3      	str	r3, [r4, #8]
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	071a      	lsls	r2, r3, #28
 8008902:	d52f      	bpl.n	8008964 <__swbuf_r+0x84>
 8008904:	6923      	ldr	r3, [r4, #16]
 8008906:	b36b      	cbz	r3, 8008964 <__swbuf_r+0x84>
 8008908:	6923      	ldr	r3, [r4, #16]
 800890a:	6820      	ldr	r0, [r4, #0]
 800890c:	1ac0      	subs	r0, r0, r3
 800890e:	6963      	ldr	r3, [r4, #20]
 8008910:	b2f6      	uxtb	r6, r6
 8008912:	4283      	cmp	r3, r0
 8008914:	4637      	mov	r7, r6
 8008916:	dc04      	bgt.n	8008922 <__swbuf_r+0x42>
 8008918:	4621      	mov	r1, r4
 800891a:	4628      	mov	r0, r5
 800891c:	f000 f93c 	bl	8008b98 <_fflush_r>
 8008920:	bb30      	cbnz	r0, 8008970 <__swbuf_r+0x90>
 8008922:	68a3      	ldr	r3, [r4, #8]
 8008924:	3b01      	subs	r3, #1
 8008926:	60a3      	str	r3, [r4, #8]
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	6022      	str	r2, [r4, #0]
 800892e:	701e      	strb	r6, [r3, #0]
 8008930:	6963      	ldr	r3, [r4, #20]
 8008932:	3001      	adds	r0, #1
 8008934:	4283      	cmp	r3, r0
 8008936:	d004      	beq.n	8008942 <__swbuf_r+0x62>
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	07db      	lsls	r3, r3, #31
 800893c:	d506      	bpl.n	800894c <__swbuf_r+0x6c>
 800893e:	2e0a      	cmp	r6, #10
 8008940:	d104      	bne.n	800894c <__swbuf_r+0x6c>
 8008942:	4621      	mov	r1, r4
 8008944:	4628      	mov	r0, r5
 8008946:	f000 f927 	bl	8008b98 <_fflush_r>
 800894a:	b988      	cbnz	r0, 8008970 <__swbuf_r+0x90>
 800894c:	4638      	mov	r0, r7
 800894e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008950:	4b0a      	ldr	r3, [pc, #40]	; (800897c <__swbuf_r+0x9c>)
 8008952:	429c      	cmp	r4, r3
 8008954:	d101      	bne.n	800895a <__swbuf_r+0x7a>
 8008956:	68ac      	ldr	r4, [r5, #8]
 8008958:	e7cf      	b.n	80088fa <__swbuf_r+0x1a>
 800895a:	4b09      	ldr	r3, [pc, #36]	; (8008980 <__swbuf_r+0xa0>)
 800895c:	429c      	cmp	r4, r3
 800895e:	bf08      	it	eq
 8008960:	68ec      	ldreq	r4, [r5, #12]
 8008962:	e7ca      	b.n	80088fa <__swbuf_r+0x1a>
 8008964:	4621      	mov	r1, r4
 8008966:	4628      	mov	r0, r5
 8008968:	f000 f81a 	bl	80089a0 <__swsetup_r>
 800896c:	2800      	cmp	r0, #0
 800896e:	d0cb      	beq.n	8008908 <__swbuf_r+0x28>
 8008970:	f04f 37ff 	mov.w	r7, #4294967295
 8008974:	e7ea      	b.n	800894c <__swbuf_r+0x6c>
 8008976:	bf00      	nop
 8008978:	0802f0dc 	.word	0x0802f0dc
 800897c:	0802f0fc 	.word	0x0802f0fc
 8008980:	0802f0bc 	.word	0x0802f0bc

08008984 <__ascii_wctomb>:
 8008984:	b149      	cbz	r1, 800899a <__ascii_wctomb+0x16>
 8008986:	2aff      	cmp	r2, #255	; 0xff
 8008988:	bf85      	ittet	hi
 800898a:	238a      	movhi	r3, #138	; 0x8a
 800898c:	6003      	strhi	r3, [r0, #0]
 800898e:	700a      	strbls	r2, [r1, #0]
 8008990:	f04f 30ff 	movhi.w	r0, #4294967295
 8008994:	bf98      	it	ls
 8008996:	2001      	movls	r0, #1
 8008998:	4770      	bx	lr
 800899a:	4608      	mov	r0, r1
 800899c:	4770      	bx	lr
	...

080089a0 <__swsetup_r>:
 80089a0:	4b32      	ldr	r3, [pc, #200]	; (8008a6c <__swsetup_r+0xcc>)
 80089a2:	b570      	push	{r4, r5, r6, lr}
 80089a4:	681d      	ldr	r5, [r3, #0]
 80089a6:	4606      	mov	r6, r0
 80089a8:	460c      	mov	r4, r1
 80089aa:	b125      	cbz	r5, 80089b6 <__swsetup_r+0x16>
 80089ac:	69ab      	ldr	r3, [r5, #24]
 80089ae:	b913      	cbnz	r3, 80089b6 <__swsetup_r+0x16>
 80089b0:	4628      	mov	r0, r5
 80089b2:	f000 f985 	bl	8008cc0 <__sinit>
 80089b6:	4b2e      	ldr	r3, [pc, #184]	; (8008a70 <__swsetup_r+0xd0>)
 80089b8:	429c      	cmp	r4, r3
 80089ba:	d10f      	bne.n	80089dc <__swsetup_r+0x3c>
 80089bc:	686c      	ldr	r4, [r5, #4]
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089c4:	0719      	lsls	r1, r3, #28
 80089c6:	d42c      	bmi.n	8008a22 <__swsetup_r+0x82>
 80089c8:	06dd      	lsls	r5, r3, #27
 80089ca:	d411      	bmi.n	80089f0 <__swsetup_r+0x50>
 80089cc:	2309      	movs	r3, #9
 80089ce:	6033      	str	r3, [r6, #0]
 80089d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089d4:	81a3      	strh	r3, [r4, #12]
 80089d6:	f04f 30ff 	mov.w	r0, #4294967295
 80089da:	e03e      	b.n	8008a5a <__swsetup_r+0xba>
 80089dc:	4b25      	ldr	r3, [pc, #148]	; (8008a74 <__swsetup_r+0xd4>)
 80089de:	429c      	cmp	r4, r3
 80089e0:	d101      	bne.n	80089e6 <__swsetup_r+0x46>
 80089e2:	68ac      	ldr	r4, [r5, #8]
 80089e4:	e7eb      	b.n	80089be <__swsetup_r+0x1e>
 80089e6:	4b24      	ldr	r3, [pc, #144]	; (8008a78 <__swsetup_r+0xd8>)
 80089e8:	429c      	cmp	r4, r3
 80089ea:	bf08      	it	eq
 80089ec:	68ec      	ldreq	r4, [r5, #12]
 80089ee:	e7e6      	b.n	80089be <__swsetup_r+0x1e>
 80089f0:	0758      	lsls	r0, r3, #29
 80089f2:	d512      	bpl.n	8008a1a <__swsetup_r+0x7a>
 80089f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089f6:	b141      	cbz	r1, 8008a0a <__swsetup_r+0x6a>
 80089f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089fc:	4299      	cmp	r1, r3
 80089fe:	d002      	beq.n	8008a06 <__swsetup_r+0x66>
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff fb6f 	bl	80080e4 <_free_r>
 8008a06:	2300      	movs	r3, #0
 8008a08:	6363      	str	r3, [r4, #52]	; 0x34
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a10:	81a3      	strh	r3, [r4, #12]
 8008a12:	2300      	movs	r3, #0
 8008a14:	6063      	str	r3, [r4, #4]
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	f043 0308 	orr.w	r3, r3, #8
 8008a20:	81a3      	strh	r3, [r4, #12]
 8008a22:	6923      	ldr	r3, [r4, #16]
 8008a24:	b94b      	cbnz	r3, 8008a3a <__swsetup_r+0x9a>
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a30:	d003      	beq.n	8008a3a <__swsetup_r+0x9a>
 8008a32:	4621      	mov	r1, r4
 8008a34:	4630      	mov	r0, r6
 8008a36:	f000 fa07 	bl	8008e48 <__smakebuf_r>
 8008a3a:	89a0      	ldrh	r0, [r4, #12]
 8008a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a40:	f010 0301 	ands.w	r3, r0, #1
 8008a44:	d00a      	beq.n	8008a5c <__swsetup_r+0xbc>
 8008a46:	2300      	movs	r3, #0
 8008a48:	60a3      	str	r3, [r4, #8]
 8008a4a:	6963      	ldr	r3, [r4, #20]
 8008a4c:	425b      	negs	r3, r3
 8008a4e:	61a3      	str	r3, [r4, #24]
 8008a50:	6923      	ldr	r3, [r4, #16]
 8008a52:	b943      	cbnz	r3, 8008a66 <__swsetup_r+0xc6>
 8008a54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a58:	d1ba      	bne.n	80089d0 <__swsetup_r+0x30>
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	0781      	lsls	r1, r0, #30
 8008a5e:	bf58      	it	pl
 8008a60:	6963      	ldrpl	r3, [r4, #20]
 8008a62:	60a3      	str	r3, [r4, #8]
 8008a64:	e7f4      	b.n	8008a50 <__swsetup_r+0xb0>
 8008a66:	2000      	movs	r0, #0
 8008a68:	e7f7      	b.n	8008a5a <__swsetup_r+0xba>
 8008a6a:	bf00      	nop
 8008a6c:	20000010 	.word	0x20000010
 8008a70:	0802f0dc 	.word	0x0802f0dc
 8008a74:	0802f0fc 	.word	0x0802f0fc
 8008a78:	0802f0bc 	.word	0x0802f0bc

08008a7c <abort>:
 8008a7c:	b508      	push	{r3, lr}
 8008a7e:	2006      	movs	r0, #6
 8008a80:	f000 fa52 	bl	8008f28 <raise>
 8008a84:	2001      	movs	r0, #1
 8008a86:	f7f9 f85d 	bl	8001b44 <_exit>
	...

08008a8c <__sflush_r>:
 8008a8c:	898a      	ldrh	r2, [r1, #12]
 8008a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a92:	4605      	mov	r5, r0
 8008a94:	0710      	lsls	r0, r2, #28
 8008a96:	460c      	mov	r4, r1
 8008a98:	d458      	bmi.n	8008b4c <__sflush_r+0xc0>
 8008a9a:	684b      	ldr	r3, [r1, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	dc05      	bgt.n	8008aac <__sflush_r+0x20>
 8008aa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dc02      	bgt.n	8008aac <__sflush_r+0x20>
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aae:	2e00      	cmp	r6, #0
 8008ab0:	d0f9      	beq.n	8008aa6 <__sflush_r+0x1a>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ab8:	682f      	ldr	r7, [r5, #0]
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	d032      	beq.n	8008b24 <__sflush_r+0x98>
 8008abe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	075a      	lsls	r2, r3, #29
 8008ac4:	d505      	bpl.n	8008ad2 <__sflush_r+0x46>
 8008ac6:	6863      	ldr	r3, [r4, #4]
 8008ac8:	1ac0      	subs	r0, r0, r3
 8008aca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008acc:	b10b      	cbz	r3, 8008ad2 <__sflush_r+0x46>
 8008ace:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ad0:	1ac0      	subs	r0, r0, r3
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ad8:	6a21      	ldr	r1, [r4, #32]
 8008ada:	4628      	mov	r0, r5
 8008adc:	47b0      	blx	r6
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	d106      	bne.n	8008af2 <__sflush_r+0x66>
 8008ae4:	6829      	ldr	r1, [r5, #0]
 8008ae6:	291d      	cmp	r1, #29
 8008ae8:	d82c      	bhi.n	8008b44 <__sflush_r+0xb8>
 8008aea:	4a2a      	ldr	r2, [pc, #168]	; (8008b94 <__sflush_r+0x108>)
 8008aec:	40ca      	lsrs	r2, r1
 8008aee:	07d6      	lsls	r6, r2, #31
 8008af0:	d528      	bpl.n	8008b44 <__sflush_r+0xb8>
 8008af2:	2200      	movs	r2, #0
 8008af4:	6062      	str	r2, [r4, #4]
 8008af6:	04d9      	lsls	r1, r3, #19
 8008af8:	6922      	ldr	r2, [r4, #16]
 8008afa:	6022      	str	r2, [r4, #0]
 8008afc:	d504      	bpl.n	8008b08 <__sflush_r+0x7c>
 8008afe:	1c42      	adds	r2, r0, #1
 8008b00:	d101      	bne.n	8008b06 <__sflush_r+0x7a>
 8008b02:	682b      	ldr	r3, [r5, #0]
 8008b04:	b903      	cbnz	r3, 8008b08 <__sflush_r+0x7c>
 8008b06:	6560      	str	r0, [r4, #84]	; 0x54
 8008b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b0a:	602f      	str	r7, [r5, #0]
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	d0ca      	beq.n	8008aa6 <__sflush_r+0x1a>
 8008b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b14:	4299      	cmp	r1, r3
 8008b16:	d002      	beq.n	8008b1e <__sflush_r+0x92>
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f7ff fae3 	bl	80080e4 <_free_r>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	6360      	str	r0, [r4, #52]	; 0x34
 8008b22:	e7c1      	b.n	8008aa8 <__sflush_r+0x1c>
 8008b24:	6a21      	ldr	r1, [r4, #32]
 8008b26:	2301      	movs	r3, #1
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b0      	blx	r6
 8008b2c:	1c41      	adds	r1, r0, #1
 8008b2e:	d1c7      	bne.n	8008ac0 <__sflush_r+0x34>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0c4      	beq.n	8008ac0 <__sflush_r+0x34>
 8008b36:	2b1d      	cmp	r3, #29
 8008b38:	d001      	beq.n	8008b3e <__sflush_r+0xb2>
 8008b3a:	2b16      	cmp	r3, #22
 8008b3c:	d101      	bne.n	8008b42 <__sflush_r+0xb6>
 8008b3e:	602f      	str	r7, [r5, #0]
 8008b40:	e7b1      	b.n	8008aa6 <__sflush_r+0x1a>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b48:	81a3      	strh	r3, [r4, #12]
 8008b4a:	e7ad      	b.n	8008aa8 <__sflush_r+0x1c>
 8008b4c:	690f      	ldr	r7, [r1, #16]
 8008b4e:	2f00      	cmp	r7, #0
 8008b50:	d0a9      	beq.n	8008aa6 <__sflush_r+0x1a>
 8008b52:	0793      	lsls	r3, r2, #30
 8008b54:	680e      	ldr	r6, [r1, #0]
 8008b56:	bf08      	it	eq
 8008b58:	694b      	ldreq	r3, [r1, #20]
 8008b5a:	600f      	str	r7, [r1, #0]
 8008b5c:	bf18      	it	ne
 8008b5e:	2300      	movne	r3, #0
 8008b60:	eba6 0807 	sub.w	r8, r6, r7
 8008b64:	608b      	str	r3, [r1, #8]
 8008b66:	f1b8 0f00 	cmp.w	r8, #0
 8008b6a:	dd9c      	ble.n	8008aa6 <__sflush_r+0x1a>
 8008b6c:	6a21      	ldr	r1, [r4, #32]
 8008b6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b70:	4643      	mov	r3, r8
 8008b72:	463a      	mov	r2, r7
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b0      	blx	r6
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	dc06      	bgt.n	8008b8a <__sflush_r+0xfe>
 8008b7c:	89a3      	ldrh	r3, [r4, #12]
 8008b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b82:	81a3      	strh	r3, [r4, #12]
 8008b84:	f04f 30ff 	mov.w	r0, #4294967295
 8008b88:	e78e      	b.n	8008aa8 <__sflush_r+0x1c>
 8008b8a:	4407      	add	r7, r0
 8008b8c:	eba8 0800 	sub.w	r8, r8, r0
 8008b90:	e7e9      	b.n	8008b66 <__sflush_r+0xda>
 8008b92:	bf00      	nop
 8008b94:	20400001 	.word	0x20400001

08008b98 <_fflush_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	690b      	ldr	r3, [r1, #16]
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	b913      	cbnz	r3, 8008ba8 <_fflush_r+0x10>
 8008ba2:	2500      	movs	r5, #0
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	b118      	cbz	r0, 8008bb2 <_fflush_r+0x1a>
 8008baa:	6983      	ldr	r3, [r0, #24]
 8008bac:	b90b      	cbnz	r3, 8008bb2 <_fflush_r+0x1a>
 8008bae:	f000 f887 	bl	8008cc0 <__sinit>
 8008bb2:	4b14      	ldr	r3, [pc, #80]	; (8008c04 <_fflush_r+0x6c>)
 8008bb4:	429c      	cmp	r4, r3
 8008bb6:	d11b      	bne.n	8008bf0 <_fflush_r+0x58>
 8008bb8:	686c      	ldr	r4, [r5, #4]
 8008bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0ef      	beq.n	8008ba2 <_fflush_r+0xa>
 8008bc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bc4:	07d0      	lsls	r0, r2, #31
 8008bc6:	d404      	bmi.n	8008bd2 <_fflush_r+0x3a>
 8008bc8:	0599      	lsls	r1, r3, #22
 8008bca:	d402      	bmi.n	8008bd2 <_fflush_r+0x3a>
 8008bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bce:	f000 f915 	bl	8008dfc <__retarget_lock_acquire_recursive>
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	f7ff ff59 	bl	8008a8c <__sflush_r>
 8008bda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bdc:	07da      	lsls	r2, r3, #31
 8008bde:	4605      	mov	r5, r0
 8008be0:	d4e0      	bmi.n	8008ba4 <_fflush_r+0xc>
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	059b      	lsls	r3, r3, #22
 8008be6:	d4dd      	bmi.n	8008ba4 <_fflush_r+0xc>
 8008be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bea:	f000 f908 	bl	8008dfe <__retarget_lock_release_recursive>
 8008bee:	e7d9      	b.n	8008ba4 <_fflush_r+0xc>
 8008bf0:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <_fflush_r+0x70>)
 8008bf2:	429c      	cmp	r4, r3
 8008bf4:	d101      	bne.n	8008bfa <_fflush_r+0x62>
 8008bf6:	68ac      	ldr	r4, [r5, #8]
 8008bf8:	e7df      	b.n	8008bba <_fflush_r+0x22>
 8008bfa:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <_fflush_r+0x74>)
 8008bfc:	429c      	cmp	r4, r3
 8008bfe:	bf08      	it	eq
 8008c00:	68ec      	ldreq	r4, [r5, #12]
 8008c02:	e7da      	b.n	8008bba <_fflush_r+0x22>
 8008c04:	0802f0dc 	.word	0x0802f0dc
 8008c08:	0802f0fc 	.word	0x0802f0fc
 8008c0c:	0802f0bc 	.word	0x0802f0bc

08008c10 <std>:
 8008c10:	2300      	movs	r3, #0
 8008c12:	b510      	push	{r4, lr}
 8008c14:	4604      	mov	r4, r0
 8008c16:	e9c0 3300 	strd	r3, r3, [r0]
 8008c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c1e:	6083      	str	r3, [r0, #8]
 8008c20:	8181      	strh	r1, [r0, #12]
 8008c22:	6643      	str	r3, [r0, #100]	; 0x64
 8008c24:	81c2      	strh	r2, [r0, #14]
 8008c26:	6183      	str	r3, [r0, #24]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	2208      	movs	r2, #8
 8008c2c:	305c      	adds	r0, #92	; 0x5c
 8008c2e:	f7fd fc35 	bl	800649c <memset>
 8008c32:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <std+0x38>)
 8008c34:	6263      	str	r3, [r4, #36]	; 0x24
 8008c36:	4b05      	ldr	r3, [pc, #20]	; (8008c4c <std+0x3c>)
 8008c38:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c3a:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <std+0x40>)
 8008c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c3e:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <std+0x44>)
 8008c40:	6224      	str	r4, [r4, #32]
 8008c42:	6323      	str	r3, [r4, #48]	; 0x30
 8008c44:	bd10      	pop	{r4, pc}
 8008c46:	bf00      	nop
 8008c48:	08008f61 	.word	0x08008f61
 8008c4c:	08008f83 	.word	0x08008f83
 8008c50:	08008fbb 	.word	0x08008fbb
 8008c54:	08008fdf 	.word	0x08008fdf

08008c58 <_cleanup_r>:
 8008c58:	4901      	ldr	r1, [pc, #4]	; (8008c60 <_cleanup_r+0x8>)
 8008c5a:	f000 b8af 	b.w	8008dbc <_fwalk_reent>
 8008c5e:	bf00      	nop
 8008c60:	08008b99 	.word	0x08008b99

08008c64 <__sfmoreglue>:
 8008c64:	b570      	push	{r4, r5, r6, lr}
 8008c66:	1e4a      	subs	r2, r1, #1
 8008c68:	2568      	movs	r5, #104	; 0x68
 8008c6a:	4355      	muls	r5, r2
 8008c6c:	460e      	mov	r6, r1
 8008c6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c72:	f7ff fa87 	bl	8008184 <_malloc_r>
 8008c76:	4604      	mov	r4, r0
 8008c78:	b140      	cbz	r0, 8008c8c <__sfmoreglue+0x28>
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	e9c0 1600 	strd	r1, r6, [r0]
 8008c80:	300c      	adds	r0, #12
 8008c82:	60a0      	str	r0, [r4, #8]
 8008c84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c88:	f7fd fc08 	bl	800649c <memset>
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}

08008c90 <__sfp_lock_acquire>:
 8008c90:	4801      	ldr	r0, [pc, #4]	; (8008c98 <__sfp_lock_acquire+0x8>)
 8008c92:	f000 b8b3 	b.w	8008dfc <__retarget_lock_acquire_recursive>
 8008c96:	bf00      	nop
 8008c98:	20000360 	.word	0x20000360

08008c9c <__sfp_lock_release>:
 8008c9c:	4801      	ldr	r0, [pc, #4]	; (8008ca4 <__sfp_lock_release+0x8>)
 8008c9e:	f000 b8ae 	b.w	8008dfe <__retarget_lock_release_recursive>
 8008ca2:	bf00      	nop
 8008ca4:	20000360 	.word	0x20000360

08008ca8 <__sinit_lock_acquire>:
 8008ca8:	4801      	ldr	r0, [pc, #4]	; (8008cb0 <__sinit_lock_acquire+0x8>)
 8008caa:	f000 b8a7 	b.w	8008dfc <__retarget_lock_acquire_recursive>
 8008cae:	bf00      	nop
 8008cb0:	2000035b 	.word	0x2000035b

08008cb4 <__sinit_lock_release>:
 8008cb4:	4801      	ldr	r0, [pc, #4]	; (8008cbc <__sinit_lock_release+0x8>)
 8008cb6:	f000 b8a2 	b.w	8008dfe <__retarget_lock_release_recursive>
 8008cba:	bf00      	nop
 8008cbc:	2000035b 	.word	0x2000035b

08008cc0 <__sinit>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	f7ff fff0 	bl	8008ca8 <__sinit_lock_acquire>
 8008cc8:	69a3      	ldr	r3, [r4, #24]
 8008cca:	b11b      	cbz	r3, 8008cd4 <__sinit+0x14>
 8008ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cd0:	f7ff bff0 	b.w	8008cb4 <__sinit_lock_release>
 8008cd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008cd8:	6523      	str	r3, [r4, #80]	; 0x50
 8008cda:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <__sinit+0x68>)
 8008cdc:	4a13      	ldr	r2, [pc, #76]	; (8008d2c <__sinit+0x6c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ce2:	42a3      	cmp	r3, r4
 8008ce4:	bf04      	itt	eq
 8008ce6:	2301      	moveq	r3, #1
 8008ce8:	61a3      	streq	r3, [r4, #24]
 8008cea:	4620      	mov	r0, r4
 8008cec:	f000 f820 	bl	8008d30 <__sfp>
 8008cf0:	6060      	str	r0, [r4, #4]
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f000 f81c 	bl	8008d30 <__sfp>
 8008cf8:	60a0      	str	r0, [r4, #8]
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 f818 	bl	8008d30 <__sfp>
 8008d00:	2200      	movs	r2, #0
 8008d02:	60e0      	str	r0, [r4, #12]
 8008d04:	2104      	movs	r1, #4
 8008d06:	6860      	ldr	r0, [r4, #4]
 8008d08:	f7ff ff82 	bl	8008c10 <std>
 8008d0c:	68a0      	ldr	r0, [r4, #8]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	2109      	movs	r1, #9
 8008d12:	f7ff ff7d 	bl	8008c10 <std>
 8008d16:	68e0      	ldr	r0, [r4, #12]
 8008d18:	2202      	movs	r2, #2
 8008d1a:	2112      	movs	r1, #18
 8008d1c:	f7ff ff78 	bl	8008c10 <std>
 8008d20:	2301      	movs	r3, #1
 8008d22:	61a3      	str	r3, [r4, #24]
 8008d24:	e7d2      	b.n	8008ccc <__sinit+0xc>
 8008d26:	bf00      	nop
 8008d28:	0802ed38 	.word	0x0802ed38
 8008d2c:	08008c59 	.word	0x08008c59

08008d30 <__sfp>:
 8008d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d32:	4607      	mov	r7, r0
 8008d34:	f7ff ffac 	bl	8008c90 <__sfp_lock_acquire>
 8008d38:	4b1e      	ldr	r3, [pc, #120]	; (8008db4 <__sfp+0x84>)
 8008d3a:	681e      	ldr	r6, [r3, #0]
 8008d3c:	69b3      	ldr	r3, [r6, #24]
 8008d3e:	b913      	cbnz	r3, 8008d46 <__sfp+0x16>
 8008d40:	4630      	mov	r0, r6
 8008d42:	f7ff ffbd 	bl	8008cc0 <__sinit>
 8008d46:	3648      	adds	r6, #72	; 0x48
 8008d48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	d503      	bpl.n	8008d58 <__sfp+0x28>
 8008d50:	6833      	ldr	r3, [r6, #0]
 8008d52:	b30b      	cbz	r3, 8008d98 <__sfp+0x68>
 8008d54:	6836      	ldr	r6, [r6, #0]
 8008d56:	e7f7      	b.n	8008d48 <__sfp+0x18>
 8008d58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d5c:	b9d5      	cbnz	r5, 8008d94 <__sfp+0x64>
 8008d5e:	4b16      	ldr	r3, [pc, #88]	; (8008db8 <__sfp+0x88>)
 8008d60:	60e3      	str	r3, [r4, #12]
 8008d62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d66:	6665      	str	r5, [r4, #100]	; 0x64
 8008d68:	f000 f847 	bl	8008dfa <__retarget_lock_init_recursive>
 8008d6c:	f7ff ff96 	bl	8008c9c <__sfp_lock_release>
 8008d70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d78:	6025      	str	r5, [r4, #0]
 8008d7a:	61a5      	str	r5, [r4, #24]
 8008d7c:	2208      	movs	r2, #8
 8008d7e:	4629      	mov	r1, r5
 8008d80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d84:	f7fd fb8a 	bl	800649c <memset>
 8008d88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d90:	4620      	mov	r0, r4
 8008d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d94:	3468      	adds	r4, #104	; 0x68
 8008d96:	e7d9      	b.n	8008d4c <__sfp+0x1c>
 8008d98:	2104      	movs	r1, #4
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	f7ff ff62 	bl	8008c64 <__sfmoreglue>
 8008da0:	4604      	mov	r4, r0
 8008da2:	6030      	str	r0, [r6, #0]
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d1d5      	bne.n	8008d54 <__sfp+0x24>
 8008da8:	f7ff ff78 	bl	8008c9c <__sfp_lock_release>
 8008dac:	230c      	movs	r3, #12
 8008dae:	603b      	str	r3, [r7, #0]
 8008db0:	e7ee      	b.n	8008d90 <__sfp+0x60>
 8008db2:	bf00      	nop
 8008db4:	0802ed38 	.word	0x0802ed38
 8008db8:	ffff0001 	.word	0xffff0001

08008dbc <_fwalk_reent>:
 8008dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	4688      	mov	r8, r1
 8008dc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dc8:	2700      	movs	r7, #0
 8008dca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dce:	f1b9 0901 	subs.w	r9, r9, #1
 8008dd2:	d505      	bpl.n	8008de0 <_fwalk_reent+0x24>
 8008dd4:	6824      	ldr	r4, [r4, #0]
 8008dd6:	2c00      	cmp	r4, #0
 8008dd8:	d1f7      	bne.n	8008dca <_fwalk_reent+0xe>
 8008dda:	4638      	mov	r0, r7
 8008ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de0:	89ab      	ldrh	r3, [r5, #12]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d907      	bls.n	8008df6 <_fwalk_reent+0x3a>
 8008de6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dea:	3301      	adds	r3, #1
 8008dec:	d003      	beq.n	8008df6 <_fwalk_reent+0x3a>
 8008dee:	4629      	mov	r1, r5
 8008df0:	4630      	mov	r0, r6
 8008df2:	47c0      	blx	r8
 8008df4:	4307      	orrs	r7, r0
 8008df6:	3568      	adds	r5, #104	; 0x68
 8008df8:	e7e9      	b.n	8008dce <_fwalk_reent+0x12>

08008dfa <__retarget_lock_init_recursive>:
 8008dfa:	4770      	bx	lr

08008dfc <__retarget_lock_acquire_recursive>:
 8008dfc:	4770      	bx	lr

08008dfe <__retarget_lock_release_recursive>:
 8008dfe:	4770      	bx	lr

08008e00 <__swhatbuf_r>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	460e      	mov	r6, r1
 8008e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e08:	2900      	cmp	r1, #0
 8008e0a:	b096      	sub	sp, #88	; 0x58
 8008e0c:	4614      	mov	r4, r2
 8008e0e:	461d      	mov	r5, r3
 8008e10:	da07      	bge.n	8008e22 <__swhatbuf_r+0x22>
 8008e12:	2300      	movs	r3, #0
 8008e14:	602b      	str	r3, [r5, #0]
 8008e16:	89b3      	ldrh	r3, [r6, #12]
 8008e18:	061a      	lsls	r2, r3, #24
 8008e1a:	d410      	bmi.n	8008e3e <__swhatbuf_r+0x3e>
 8008e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e20:	e00e      	b.n	8008e40 <__swhatbuf_r+0x40>
 8008e22:	466a      	mov	r2, sp
 8008e24:	f000 f902 	bl	800902c <_fstat_r>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	dbf2      	blt.n	8008e12 <__swhatbuf_r+0x12>
 8008e2c:	9a01      	ldr	r2, [sp, #4]
 8008e2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e36:	425a      	negs	r2, r3
 8008e38:	415a      	adcs	r2, r3
 8008e3a:	602a      	str	r2, [r5, #0]
 8008e3c:	e7ee      	b.n	8008e1c <__swhatbuf_r+0x1c>
 8008e3e:	2340      	movs	r3, #64	; 0x40
 8008e40:	2000      	movs	r0, #0
 8008e42:	6023      	str	r3, [r4, #0]
 8008e44:	b016      	add	sp, #88	; 0x58
 8008e46:	bd70      	pop	{r4, r5, r6, pc}

08008e48 <__smakebuf_r>:
 8008e48:	898b      	ldrh	r3, [r1, #12]
 8008e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e4c:	079d      	lsls	r5, r3, #30
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460c      	mov	r4, r1
 8008e52:	d507      	bpl.n	8008e64 <__smakebuf_r+0x1c>
 8008e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	6123      	str	r3, [r4, #16]
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	6163      	str	r3, [r4, #20]
 8008e60:	b002      	add	sp, #8
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
 8008e64:	ab01      	add	r3, sp, #4
 8008e66:	466a      	mov	r2, sp
 8008e68:	f7ff ffca 	bl	8008e00 <__swhatbuf_r>
 8008e6c:	9900      	ldr	r1, [sp, #0]
 8008e6e:	4605      	mov	r5, r0
 8008e70:	4630      	mov	r0, r6
 8008e72:	f7ff f987 	bl	8008184 <_malloc_r>
 8008e76:	b948      	cbnz	r0, 8008e8c <__smakebuf_r+0x44>
 8008e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e7c:	059a      	lsls	r2, r3, #22
 8008e7e:	d4ef      	bmi.n	8008e60 <__smakebuf_r+0x18>
 8008e80:	f023 0303 	bic.w	r3, r3, #3
 8008e84:	f043 0302 	orr.w	r3, r3, #2
 8008e88:	81a3      	strh	r3, [r4, #12]
 8008e8a:	e7e3      	b.n	8008e54 <__smakebuf_r+0xc>
 8008e8c:	4b0d      	ldr	r3, [pc, #52]	; (8008ec4 <__smakebuf_r+0x7c>)
 8008e8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	6020      	str	r0, [r4, #0]
 8008e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e98:	81a3      	strh	r3, [r4, #12]
 8008e9a:	9b00      	ldr	r3, [sp, #0]
 8008e9c:	6163      	str	r3, [r4, #20]
 8008e9e:	9b01      	ldr	r3, [sp, #4]
 8008ea0:	6120      	str	r0, [r4, #16]
 8008ea2:	b15b      	cbz	r3, 8008ebc <__smakebuf_r+0x74>
 8008ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f000 f8d1 	bl	8009050 <_isatty_r>
 8008eae:	b128      	cbz	r0, 8008ebc <__smakebuf_r+0x74>
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	f023 0303 	bic.w	r3, r3, #3
 8008eb6:	f043 0301 	orr.w	r3, r3, #1
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	89a0      	ldrh	r0, [r4, #12]
 8008ebe:	4305      	orrs	r5, r0
 8008ec0:	81a5      	strh	r5, [r4, #12]
 8008ec2:	e7cd      	b.n	8008e60 <__smakebuf_r+0x18>
 8008ec4:	08008c59 	.word	0x08008c59

08008ec8 <_malloc_usable_size_r>:
 8008ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ecc:	1f18      	subs	r0, r3, #4
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	bfbc      	itt	lt
 8008ed2:	580b      	ldrlt	r3, [r1, r0]
 8008ed4:	18c0      	addlt	r0, r0, r3
 8008ed6:	4770      	bx	lr

08008ed8 <_raise_r>:
 8008ed8:	291f      	cmp	r1, #31
 8008eda:	b538      	push	{r3, r4, r5, lr}
 8008edc:	4604      	mov	r4, r0
 8008ede:	460d      	mov	r5, r1
 8008ee0:	d904      	bls.n	8008eec <_raise_r+0x14>
 8008ee2:	2316      	movs	r3, #22
 8008ee4:	6003      	str	r3, [r0, #0]
 8008ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008eee:	b112      	cbz	r2, 8008ef6 <_raise_r+0x1e>
 8008ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ef4:	b94b      	cbnz	r3, 8008f0a <_raise_r+0x32>
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f000 f830 	bl	8008f5c <_getpid_r>
 8008efc:	462a      	mov	r2, r5
 8008efe:	4601      	mov	r1, r0
 8008f00:	4620      	mov	r0, r4
 8008f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f06:	f000 b817 	b.w	8008f38 <_kill_r>
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d00a      	beq.n	8008f24 <_raise_r+0x4c>
 8008f0e:	1c59      	adds	r1, r3, #1
 8008f10:	d103      	bne.n	8008f1a <_raise_r+0x42>
 8008f12:	2316      	movs	r3, #22
 8008f14:	6003      	str	r3, [r0, #0]
 8008f16:	2001      	movs	r0, #1
 8008f18:	e7e7      	b.n	8008eea <_raise_r+0x12>
 8008f1a:	2400      	movs	r4, #0
 8008f1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f20:	4628      	mov	r0, r5
 8008f22:	4798      	blx	r3
 8008f24:	2000      	movs	r0, #0
 8008f26:	e7e0      	b.n	8008eea <_raise_r+0x12>

08008f28 <raise>:
 8008f28:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <raise+0xc>)
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	6818      	ldr	r0, [r3, #0]
 8008f2e:	f7ff bfd3 	b.w	8008ed8 <_raise_r>
 8008f32:	bf00      	nop
 8008f34:	20000010 	.word	0x20000010

08008f38 <_kill_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4d07      	ldr	r5, [pc, #28]	; (8008f58 <_kill_r+0x20>)
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	4611      	mov	r1, r2
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	f7f8 fded 	bl	8001b24 <_kill>
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	d102      	bne.n	8008f54 <_kill_r+0x1c>
 8008f4e:	682b      	ldr	r3, [r5, #0]
 8008f50:	b103      	cbz	r3, 8008f54 <_kill_r+0x1c>
 8008f52:	6023      	str	r3, [r4, #0]
 8008f54:	bd38      	pop	{r3, r4, r5, pc}
 8008f56:	bf00      	nop
 8008f58:	20000354 	.word	0x20000354

08008f5c <_getpid_r>:
 8008f5c:	f7f8 bdda 	b.w	8001b14 <_getpid>

08008f60 <__sread>:
 8008f60:	b510      	push	{r4, lr}
 8008f62:	460c      	mov	r4, r1
 8008f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f68:	f000 f894 	bl	8009094 <_read_r>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	bfab      	itete	ge
 8008f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f72:	89a3      	ldrhlt	r3, [r4, #12]
 8008f74:	181b      	addge	r3, r3, r0
 8008f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f7a:	bfac      	ite	ge
 8008f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f7e:	81a3      	strhlt	r3, [r4, #12]
 8008f80:	bd10      	pop	{r4, pc}

08008f82 <__swrite>:
 8008f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f86:	461f      	mov	r7, r3
 8008f88:	898b      	ldrh	r3, [r1, #12]
 8008f8a:	05db      	lsls	r3, r3, #23
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	460c      	mov	r4, r1
 8008f90:	4616      	mov	r6, r2
 8008f92:	d505      	bpl.n	8008fa0 <__swrite+0x1e>
 8008f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f98:	2302      	movs	r3, #2
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f000 f868 	bl	8009070 <_lseek_r>
 8008fa0:	89a3      	ldrh	r3, [r4, #12]
 8008fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008faa:	81a3      	strh	r3, [r4, #12]
 8008fac:	4632      	mov	r2, r6
 8008fae:	463b      	mov	r3, r7
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb6:	f000 b817 	b.w	8008fe8 <_write_r>

08008fba <__sseek>:
 8008fba:	b510      	push	{r4, lr}
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc2:	f000 f855 	bl	8009070 <_lseek_r>
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	bf15      	itete	ne
 8008fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fd6:	81a3      	strheq	r3, [r4, #12]
 8008fd8:	bf18      	it	ne
 8008fda:	81a3      	strhne	r3, [r4, #12]
 8008fdc:	bd10      	pop	{r4, pc}

08008fde <__sclose>:
 8008fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe2:	f000 b813 	b.w	800900c <_close_r>
	...

08008fe8 <_write_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4d07      	ldr	r5, [pc, #28]	; (8009008 <_write_r+0x20>)
 8008fec:	4604      	mov	r4, r0
 8008fee:	4608      	mov	r0, r1
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	602a      	str	r2, [r5, #0]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f7f8 fdcb 	bl	8001b92 <_write>
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	d102      	bne.n	8009006 <_write_r+0x1e>
 8009000:	682b      	ldr	r3, [r5, #0]
 8009002:	b103      	cbz	r3, 8009006 <_write_r+0x1e>
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	bd38      	pop	{r3, r4, r5, pc}
 8009008:	20000354 	.word	0x20000354

0800900c <_close_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d06      	ldr	r5, [pc, #24]	; (8009028 <_close_r+0x1c>)
 8009010:	2300      	movs	r3, #0
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	602b      	str	r3, [r5, #0]
 8009018:	f7f8 fdd7 	bl	8001bca <_close>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_close_r+0x1a>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_close_r+0x1a>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	20000354 	.word	0x20000354

0800902c <_fstat_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4d07      	ldr	r5, [pc, #28]	; (800904c <_fstat_r+0x20>)
 8009030:	2300      	movs	r3, #0
 8009032:	4604      	mov	r4, r0
 8009034:	4608      	mov	r0, r1
 8009036:	4611      	mov	r1, r2
 8009038:	602b      	str	r3, [r5, #0]
 800903a:	f7f8 fdd2 	bl	8001be2 <_fstat>
 800903e:	1c43      	adds	r3, r0, #1
 8009040:	d102      	bne.n	8009048 <_fstat_r+0x1c>
 8009042:	682b      	ldr	r3, [r5, #0]
 8009044:	b103      	cbz	r3, 8009048 <_fstat_r+0x1c>
 8009046:	6023      	str	r3, [r4, #0]
 8009048:	bd38      	pop	{r3, r4, r5, pc}
 800904a:	bf00      	nop
 800904c:	20000354 	.word	0x20000354

08009050 <_isatty_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	4d06      	ldr	r5, [pc, #24]	; (800906c <_isatty_r+0x1c>)
 8009054:	2300      	movs	r3, #0
 8009056:	4604      	mov	r4, r0
 8009058:	4608      	mov	r0, r1
 800905a:	602b      	str	r3, [r5, #0]
 800905c:	f7f8 fdd1 	bl	8001c02 <_isatty>
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	d102      	bne.n	800906a <_isatty_r+0x1a>
 8009064:	682b      	ldr	r3, [r5, #0]
 8009066:	b103      	cbz	r3, 800906a <_isatty_r+0x1a>
 8009068:	6023      	str	r3, [r4, #0]
 800906a:	bd38      	pop	{r3, r4, r5, pc}
 800906c:	20000354 	.word	0x20000354

08009070 <_lseek_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d07      	ldr	r5, [pc, #28]	; (8009090 <_lseek_r+0x20>)
 8009074:	4604      	mov	r4, r0
 8009076:	4608      	mov	r0, r1
 8009078:	4611      	mov	r1, r2
 800907a:	2200      	movs	r2, #0
 800907c:	602a      	str	r2, [r5, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	f7f8 fdca 	bl	8001c18 <_lseek>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_lseek_r+0x1e>
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	b103      	cbz	r3, 800908e <_lseek_r+0x1e>
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	20000354 	.word	0x20000354

08009094 <_read_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4d07      	ldr	r5, [pc, #28]	; (80090b4 <_read_r+0x20>)
 8009098:	4604      	mov	r4, r0
 800909a:	4608      	mov	r0, r1
 800909c:	4611      	mov	r1, r2
 800909e:	2200      	movs	r2, #0
 80090a0:	602a      	str	r2, [r5, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	f7f8 fd58 	bl	8001b58 <_read>
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d102      	bne.n	80090b2 <_read_r+0x1e>
 80090ac:	682b      	ldr	r3, [r5, #0]
 80090ae:	b103      	cbz	r3, 80090b2 <_read_r+0x1e>
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	bd38      	pop	{r3, r4, r5, pc}
 80090b4:	20000354 	.word	0x20000354

080090b8 <_init>:
 80090b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ba:	bf00      	nop
 80090bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090be:	bc08      	pop	{r3}
 80090c0:	469e      	mov	lr, r3
 80090c2:	4770      	bx	lr

080090c4 <_fini>:
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c6:	bf00      	nop
 80090c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ca:	bc08      	pop	{r3}
 80090cc:	469e      	mov	lr, r3
 80090ce:	4770      	bx	lr
