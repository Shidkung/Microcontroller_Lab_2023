
Lab01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dec  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003fe4  08003fe4  00013fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ffc  08003ffc  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ffc  08003ffc  00013ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004004  08004004  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004008  08004008  00014008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800400c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004018  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  080040b8  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006a4  2000014c  08004158  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200007f0  08004158  000207f0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .comment      00000086  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY
 15 .debug_info   000114df  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000239c  00000000  00000000  000316df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000d10  00000000  00000000  00033a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000a0e  00000000  00000000  00034790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028521  00000000  00000000  0003519e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000ff8a  00000000  00000000  0005d6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f9575  00000000  00000000  0006d649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003650  00000000  00000000  00166bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000053  00000000  00000000  0016a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003fcc 	.word	0x08003fcc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08003fcc 	.word	0x08003fcc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fcc9 	bl	8000ece <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f90a 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 fa24 	bl	800098c <MX_GPIO_Init>
  MX_ETH_Init();
 8000544:	f000 f976 	bl	8000834 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000548:	f000 f9c2 	bl	80008d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800054c:	f000 f9f0 	bl	8000930 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000556:	487a      	ldr	r0, [pc, #488]	; (8000740 <main+0x20c>)
 8000558:	f001 faf2 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	4877      	ldr	r0, [pc, #476]	; (8000740 <main+0x20c>)
 8000562:	f001 faed 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2101      	movs	r1, #1
 800056a:	4875      	ldr	r0, [pc, #468]	; (8000740 <main+0x20c>)
 800056c:	f001 fae8 	bl	8001b40 <HAL_GPIO_WritePin>
	led0 = 0;
 8000570:	4b74      	ldr	r3, [pc, #464]	; (8000744 <main+0x210>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
	led1 = 0;
 8000576:	4b74      	ldr	r3, [pc, #464]	; (8000748 <main+0x214>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
	led2 = 0;
 800057c:	4b73      	ldr	r3, [pc, #460]	; (800074c <main+0x218>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
	HAL_Delay(300);
 8000582:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000586:	f000 fcff 	bl	8000f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000590:	486b      	ldr	r0, [pc, #428]	; (8000740 <main+0x20c>)
 8000592:	f001 fad5 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	4869      	ldr	r0, [pc, #420]	; (8000740 <main+0x20c>)
 800059c:	f001 fad0 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2101      	movs	r1, #1
 80005a4:	4866      	ldr	r0, [pc, #408]	; (8000740 <main+0x20c>)
 80005a6:	f001 facb 	bl	8001b40 <HAL_GPIO_WritePin>
	led0 = 1;
 80005aa:	4b66      	ldr	r3, [pc, #408]	; (8000744 <main+0x210>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
	led1 = 0;
 80005b0:	4b65      	ldr	r3, [pc, #404]	; (8000748 <main+0x214>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	led2 = 0;
 80005b6:	4b65      	ldr	r3, [pc, #404]	; (800074c <main+0x218>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(300);
 80005bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005c0:	f000 fce2 	bl	8000f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ca:	485d      	ldr	r0, [pc, #372]	; (8000740 <main+0x20c>)
 80005cc:	f001 fab8 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	485a      	ldr	r0, [pc, #360]	; (8000740 <main+0x20c>)
 80005d6:	f001 fab3 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2101      	movs	r1, #1
 80005de:	4858      	ldr	r0, [pc, #352]	; (8000740 <main+0x20c>)
 80005e0:	f001 faae 	bl	8001b40 <HAL_GPIO_WritePin>
	led0 = 0;
 80005e4:	4b57      	ldr	r3, [pc, #348]	; (8000744 <main+0x210>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
	led1 = 1;
 80005ea:	4b57      	ldr	r3, [pc, #348]	; (8000748 <main+0x214>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
	led2 = 0;
 80005f0:	4b56      	ldr	r3, [pc, #344]	; (800074c <main+0x218>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(300);
 80005f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005fa:	f000 fcc5 	bl	8000f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000604:	484e      	ldr	r0, [pc, #312]	; (8000740 <main+0x20c>)
 8000606:	f001 fa9b 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	484c      	ldr	r0, [pc, #304]	; (8000740 <main+0x20c>)
 8000610:	f001 fa96 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2101      	movs	r1, #1
 8000618:	4849      	ldr	r0, [pc, #292]	; (8000740 <main+0x20c>)
 800061a:	f001 fa91 	bl	8001b40 <HAL_GPIO_WritePin>
	led0 = 1;
 800061e:	4b49      	ldr	r3, [pc, #292]	; (8000744 <main+0x210>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
	led1 = 1;
 8000624:	4b48      	ldr	r3, [pc, #288]	; (8000748 <main+0x214>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
	led2 = 0;
 800062a:	4b48      	ldr	r3, [pc, #288]	; (800074c <main+0x218>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(300);
 8000630:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000634:	f000 fca8 	bl	8000f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4840      	ldr	r0, [pc, #256]	; (8000740 <main+0x20c>)
 8000640:	f001 fa7e 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	483d      	ldr	r0, [pc, #244]	; (8000740 <main+0x20c>)
 800064a:	f001 fa79 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2101      	movs	r1, #1
 8000652:	483b      	ldr	r0, [pc, #236]	; (8000740 <main+0x20c>)
 8000654:	f001 fa74 	bl	8001b40 <HAL_GPIO_WritePin>
	led0 = 0;
 8000658:	4b3a      	ldr	r3, [pc, #232]	; (8000744 <main+0x210>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	led1 = 0;
 800065e:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <main+0x214>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
	led2 = 1;
 8000664:	4b39      	ldr	r3, [pc, #228]	; (800074c <main+0x218>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
	HAL_Delay(300);
 800066a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800066e:	f000 fc8b 	bl	8000f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000678:	4831      	ldr	r0, [pc, #196]	; (8000740 <main+0x20c>)
 800067a:	f001 fa61 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	482f      	ldr	r0, [pc, #188]	; (8000740 <main+0x20c>)
 8000684:	f001 fa5c 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2101      	movs	r1, #1
 800068c:	482c      	ldr	r0, [pc, #176]	; (8000740 <main+0x20c>)
 800068e:	f001 fa57 	bl	8001b40 <HAL_GPIO_WritePin>
	led0 = 1;
 8000692:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <main+0x210>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
	led1 = 0;
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <main+0x214>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
	led2 = 1;
 800069e:	4b2b      	ldr	r3, [pc, #172]	; (800074c <main+0x218>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(300);
 80006a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006a8:	f000 fc6e 	bl	8000f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b2:	4823      	ldr	r0, [pc, #140]	; (8000740 <main+0x20c>)
 80006b4:	f001 fa44 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2180      	movs	r1, #128	; 0x80
 80006bc:	4820      	ldr	r0, [pc, #128]	; (8000740 <main+0x20c>)
 80006be:	f001 fa3f 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2101      	movs	r1, #1
 80006c6:	481e      	ldr	r0, [pc, #120]	; (8000740 <main+0x20c>)
 80006c8:	f001 fa3a 	bl	8001b40 <HAL_GPIO_WritePin>
	led0 = 0;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <main+0x210>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
	led1 = 1;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <main+0x214>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
	led2 = 1;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <main+0x218>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	HAL_Delay(300);
 80006de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006e2:	f000 fc51 	bl	8000f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ec:	4814      	ldr	r0, [pc, #80]	; (8000740 <main+0x20c>)
 80006ee:	f001 fa27 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <main+0x20c>)
 80006f8:	f001 fa22 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2101      	movs	r1, #1
 8000700:	480f      	ldr	r0, [pc, #60]	; (8000740 <main+0x20c>)
 8000702:	f001 fa1d 	bl	8001b40 <HAL_GPIO_WritePin>
	led0 = 1;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <main+0x210>)
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
	led1 = 1;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <main+0x214>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
	led2 = 1;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <main+0x218>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
	HAL_Delay(300);
 8000718:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800071c:	f000 fc34 	bl	8000f88 <HAL_Delay>
	num+=1;
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <main+0x21c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <main+0x21c>)
 800072a:	701a      	strb	r2, [r3, #0]
	if (num >7)
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <main+0x21c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b07      	cmp	r3, #7
 8000732:	f67f af0d 	bls.w	8000550 <main+0x1c>
	num = 0;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <main+0x21c>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 800073c:	e708      	b.n	8000550 <main+0x1c>
 800073e:	bf00      	nop
 8000740:	40020400 	.word	0x40020400
 8000744:	200007e1 	.word	0x200007e1
 8000748:	200007e2 	.word	0x200007e2
 800074c:	200007e3 	.word	0x200007e3
 8000750:	200007e0 	.word	0x200007e0

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2234      	movs	r2, #52	; 0x34
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f003 fc06 	bl	8003f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000778:	f001 fb44 	bl	8001e04 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	4b2b      	ldr	r3, [pc, #172]	; (800082c <SystemClock_Config+0xd8>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a2a      	ldr	r2, [pc, #168]	; (800082c <SystemClock_Config+0xd8>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <SystemClock_Config+0xd8>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <SystemClock_Config+0xdc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a25      	ldr	r2, [pc, #148]	; (8000830 <SystemClock_Config+0xdc>)
 800079a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <SystemClock_Config+0xdc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c0:	2304      	movs	r3, #4
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007c4:	23d8      	movs	r3, #216	; 0xd8
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007cc:	2309      	movs	r3, #9
 80007ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 fb73 	bl	8001ec4 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e4:	f000 f952 	bl	8000a8c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007e8:	f001 fb1c 	bl	8001e24 <HAL_PWREx_EnableOverDrive>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007f2:	f000 f94b 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	230f      	movs	r3, #15
 80007f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fa:	2302      	movs	r3, #2
 80007fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000802:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	2107      	movs	r1, #7
 8000814:	4618      	mov	r0, r3
 8000816:	f001 fe03 	bl	8002420 <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000820:	f000 f934 	bl	8000a8c <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	3750      	adds	r7, #80	; 0x50
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_ETH_Init+0x84>)
 800083a:	4a20      	ldr	r2, [pc, #128]	; (80008bc <MX_ETH_Init+0x88>)
 800083c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <MX_ETH_Init+0x8c>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_ETH_Init+0x8c>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800084a:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_ETH_Init+0x8c>)
 800084c:	22e1      	movs	r2, #225	; 0xe1
 800084e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_ETH_Init+0x8c>)
 8000852:	2200      	movs	r2, #0
 8000854:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_ETH_Init+0x8c>)
 8000858:	2200      	movs	r2, #0
 800085a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_ETH_Init+0x8c>)
 800085e:	2200      	movs	r2, #0
 8000860:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_ETH_Init+0x84>)
 8000864:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <MX_ETH_Init+0x8c>)
 8000866:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_ETH_Init+0x84>)
 800086a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800086e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_ETH_Init+0x84>)
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <MX_ETH_Init+0x90>)
 8000874:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_ETH_Init+0x84>)
 8000878:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <MX_ETH_Init+0x94>)
 800087a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_ETH_Init+0x84>)
 800087e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000882:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <MX_ETH_Init+0x84>)
 8000886:	f000 fc89 	bl	800119c <HAL_ETH_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000890:	f000 f8fc 	bl	8000a8c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000894:	2238      	movs	r2, #56	; 0x38
 8000896:	2100      	movs	r1, #0
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_ETH_Init+0x98>)
 800089a:	f003 fb6b 	bl	8003f74 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_ETH_Init+0x98>)
 80008a0:	2221      	movs	r2, #33	; 0x21
 80008a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_ETH_Init+0x98>)
 80008a6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_ETH_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200001a0 	.word	0x200001a0
 80008bc:	40028000 	.word	0x40028000
 80008c0:	200007e4 	.word	0x200007e4
 80008c4:	200000ac 	.word	0x200000ac
 80008c8:	2000000c 	.word	0x2000000c
 80008cc:	20000168 	.word	0x20000168

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <MX_USART3_UART_Init+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000914:	f002 fbd2 	bl	80030bc <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f8b5 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000250 	.word	0x20000250
 800092c:	40004800 	.word	0x40004800

08000930 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800093a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2206      	movs	r2, #6
 8000940:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2202      	movs	r2, #2
 8000946:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	2202      	movs	r2, #2
 8000952:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	2201      	movs	r2, #1
 8000958:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2201      	movs	r2, #1
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	f001 f8fd 	bl	8001b72 <HAL_PCD_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f885 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200002d8 	.word	0x200002d8

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a36      	ldr	r2, [pc, #216]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ba:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a30      	ldr	r2, [pc, #192]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a2a      	ldr	r2, [pc, #168]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a24      	ldr	r2, [pc, #144]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_GPIO_Init+0xf4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <MX_GPIO_Init+0xf4>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_GPIO_Init+0xf4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_GPIO_Init+0xf4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <MX_GPIO_Init+0xf4>)
 8000a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_GPIO_Init+0xf4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a38:	4812      	ldr	r0, [pc, #72]	; (8000a84 <MX_GPIO_Init+0xf8>)
 8000a3a:	f001 f881 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_GPIO_Init+0xfc>)
 8000a54:	f000 fec8 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000a58:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_GPIO_Init+0xf8>)
 8000a72:	f000 feb9 	bl	80017e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a76:	bf00      	nop
 8000a78:	3730      	adds	r7, #48	; 0x30
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40020800 	.word	0x40020800

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_MspInit+0x44>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_MspInit+0x44>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_MspInit+0x44>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x44>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x44>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x44>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a4e      	ldr	r2, [pc, #312]	; (8000c38 <HAL_ETH_MspInit+0x158>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	f040 8096 	bne.w	8000c30 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b04:	4b4d      	ldr	r3, [pc, #308]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a4c      	ldr	r2, [pc, #304]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b18:	623b      	str	r3, [r7, #32]
 8000b1a:	6a3b      	ldr	r3, [r7, #32]
 8000b1c:	4b47      	ldr	r3, [pc, #284]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a46      	ldr	r2, [pc, #280]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b44      	ldr	r3, [pc, #272]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	4b41      	ldr	r3, [pc, #260]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a40      	ldr	r2, [pc, #256]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4c:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a3a      	ldr	r2, [pc, #232]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	4b35      	ldr	r3, [pc, #212]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a34      	ldr	r2, [pc, #208]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
 8000b88:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bac:	2332      	movs	r3, #50	; 0x32
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481e      	ldr	r0, [pc, #120]	; (8000c40 <HAL_ETH_MspInit+0x160>)
 8000bc8:	f000 fe0e 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bcc:	2386      	movs	r3, #134	; 0x86
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bdc:	230b      	movs	r3, #11
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4817      	ldr	r0, [pc, #92]	; (8000c44 <HAL_ETH_MspInit+0x164>)
 8000be8:	f000 fdfe 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfe:	230b      	movs	r3, #11
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	480f      	ldr	r0, [pc, #60]	; (8000c48 <HAL_ETH_MspInit+0x168>)
 8000c0a:	f000 fded 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c20:	230b      	movs	r3, #11
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4808      	ldr	r0, [pc, #32]	; (8000c4c <HAL_ETH_MspInit+0x16c>)
 8000c2c:	f000 fddc 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3738      	adds	r7, #56	; 0x38
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40028000 	.word	0x40028000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40021800 	.word	0x40021800

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0ae      	sub	sp, #184	; 0xb8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2290      	movs	r2, #144	; 0x90
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f003 f97f 	bl	8003f74 <memset>
  if(huart->Instance==USART3)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a22      	ldr	r2, [pc, #136]	; (8000d04 <HAL_UART_MspInit+0xb4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d13c      	bne.n	8000cfa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fdec 	bl	800286c <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c9a:	f7ff fef7 	bl	8000a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_UART_MspInit+0xbc>)
 8000cf6:	f000 fd77 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	37b8      	adds	r7, #184	; 0xb8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40004800 	.word	0x40004800
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020c00 	.word	0x40020c00

08000d10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0ae      	sub	sp, #184	; 0xb8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2290      	movs	r2, #144	; 0x90
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 f91f 	bl	8003f74 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d3e:	d159      	bne.n	8000df4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fd8b 	bl	800286c <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d5c:	f7ff fe96 	bl	8000a8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <HAL_PCD_MspInit+0xec>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a25      	ldr	r2, [pc, #148]	; (8000dfc <HAL_PCD_MspInit+0xec>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <HAL_PCD_MspInit+0xec>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d78:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d92:	230a      	movs	r3, #10
 8000d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4818      	ldr	r0, [pc, #96]	; (8000e00 <HAL_PCD_MspInit+0xf0>)
 8000da0:	f000 fd22 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4810      	ldr	r0, [pc, #64]	; (8000e00 <HAL_PCD_MspInit+0xf0>)
 8000dc0:	f000 fd12 	bl	80017e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <HAL_PCD_MspInit+0xec>)
 8000dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	; (8000dfc <HAL_PCD_MspInit+0xec>)
 8000dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dce:	6353      	str	r3, [r2, #52]	; 0x34
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_PCD_MspInit+0xec>)
 8000dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <HAL_PCD_MspInit+0xec>)
 8000dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <HAL_PCD_MspInit+0xec>)
 8000de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de6:	6453      	str	r3, [r2, #68]	; 0x44
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <HAL_PCD_MspInit+0xec>)
 8000dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000df4:	bf00      	nop
 8000df6:	37b8      	adds	r7, #184	; 0xb8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 f87a 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e82:	490e      	ldr	r1, [pc, #56]	; (8000ebc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e84:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e98:	4c0b      	ldr	r4, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ea6:	f7ff ffd7 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f003 f86b 	bl	8003f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eae:	f7ff fb41 	bl	8000534 <main>
  bx  lr    
 8000eb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ec0:	0800400c 	.word	0x0800400c
  ldr r2, =_sbss
 8000ec4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000ec8:	200007f0 	.word	0x200007f0

08000ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>

08000ece <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f000 f92e 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f000 f805 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ede:	f7ff fddb 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x54>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f93b 	bl	8001182 <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f000 f911 	bl	800114a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_InitTick+0x5c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	200007ec 	.word	0x200007ec

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	200007ec 	.word	0x200007ec

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffde 	bl	8000f70 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x40>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00
 8001014:	05fa0000 	.word	0x05fa0000

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001100:	d301      	bcc.n	8001106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001102:	2301      	movs	r3, #1
 8001104:	e00f      	b.n	8001126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <SysTick_Config+0x40>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110e:	210f      	movs	r1, #15
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f7ff ff8e 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <SysTick_Config+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <SysTick_Config+0x40>)
 8001120:	2207      	movs	r2, #7
 8001122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	e000e010 	.word	0xe000e010

08001134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff47 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800115c:	f7ff ff5c 	bl	8001018 <__NVIC_GetPriorityGrouping>
 8001160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	6978      	ldr	r0, [r7, #20]
 8001168:	f7ff ff8e 	bl	8001088 <NVIC_EncodePriority>
 800116c:	4602      	mov	r2, r0
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff5d 	bl	8001034 <__NVIC_SetPriority>
}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffb0 	bl	80010f0 <SysTick_Config>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e06a      	b.n	8001284 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d106      	bne.n	80011c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2223      	movs	r2, #35	; 0x23
 80011bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fc8d 	bl	8000ae0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <HAL_ETH_Init+0xf0>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a30      	ldr	r2, [pc, #192]	; (800128c <HAL_ETH_Init+0xf0>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b2e      	ldr	r3, [pc, #184]	; (800128c <HAL_ETH_Init+0xf0>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011de:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <HAL_ETH_Init+0xf4>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4a2b      	ldr	r2, [pc, #172]	; (8001290 <HAL_ETH_Init+0xf4>)
 80011e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <HAL_ETH_Init+0xf4>)
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	4927      	ldr	r1, [pc, #156]	; (8001290 <HAL_ETH_Init+0xf4>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <HAL_ETH_Init+0xf4>)
 80011fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001212:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001214:	f7ff feac 	bl	8000f70 <HAL_GetTick>
 8001218:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800121a:	e011      	b.n	8001240 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800121c:	f7ff fea8 	bl	8000f70 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800122a:	d909      	bls.n	8001240 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2204      	movs	r2, #4
 8001230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	22e0      	movs	r2, #224	; 0xe0
 8001238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e021      	b.n	8001284 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1e4      	bne.n	800121c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f958 	bl	8001508 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f9ff 	bl	800165c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fa55 	bl	800170e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	461a      	mov	r2, r3
 800126a:	2100      	movs	r1, #0
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f9bd 	bl	80015ec <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2210      	movs	r2, #16
 800127e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40013800 	.word	0x40013800

08001294 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	4b51      	ldr	r3, [pc, #324]	; (80013f0 <ETH_SetMACConfig+0x15c>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	7c1b      	ldrb	r3, [r3, #16]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <ETH_SetMACConfig+0x28>
 80012b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012ba:	e000      	b.n	80012be <ETH_SetMACConfig+0x2a>
 80012bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	7c5b      	ldrb	r3, [r3, #17]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <ETH_SetMACConfig+0x38>
 80012c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ca:	e000      	b.n	80012ce <ETH_SetMACConfig+0x3a>
 80012cc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012ce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	7fdb      	ldrb	r3, [r3, #31]
 80012da:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80012dc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	7f92      	ldrb	r2, [r2, #30]
 80012e8:	2a00      	cmp	r2, #0
 80012ea:	d102      	bne.n	80012f2 <ETH_SetMACConfig+0x5e>
 80012ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012f0:	e000      	b.n	80012f4 <ETH_SetMACConfig+0x60>
 80012f2:	2200      	movs	r2, #0
                        macconf->Speed |
 80012f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	7f1b      	ldrb	r3, [r3, #28]
 80012fa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012fc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001302:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	791b      	ldrb	r3, [r3, #4]
 8001308:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800130a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001312:	2a00      	cmp	r2, #0
 8001314:	d102      	bne.n	800131c <ETH_SetMACConfig+0x88>
 8001316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131a:	e000      	b.n	800131e <ETH_SetMACConfig+0x8a>
 800131c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800131e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	7bdb      	ldrb	r3, [r3, #15]
 8001324:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001326:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800132c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001334:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001336:	4313      	orrs	r3, r2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff fe1a 	bl	8000f88 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	f64f 7341 	movw	r3, #65345	; 0xff41
 800136a:	4013      	ands	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001372:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800137a:	2a00      	cmp	r2, #0
 800137c:	d101      	bne.n	8001382 <ETH_SetMACConfig+0xee>
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	e000      	b.n	8001384 <ETH_SetMACConfig+0xf0>
 8001382:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001384:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800138a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001392:	2a01      	cmp	r2, #1
 8001394:	d101      	bne.n	800139a <ETH_SetMACConfig+0x106>
 8001396:	2208      	movs	r2, #8
 8001398:	e000      	b.n	800139c <ETH_SetMACConfig+0x108>
 800139a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800139c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80013a4:	2a01      	cmp	r2, #1
 80013a6:	d101      	bne.n	80013ac <ETH_SetMACConfig+0x118>
 80013a8:	2204      	movs	r2, #4
 80013aa:	e000      	b.n	80013ae <ETH_SetMACConfig+0x11a>
 80013ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80013b6:	2a01      	cmp	r2, #1
 80013b8:	d101      	bne.n	80013be <ETH_SetMACConfig+0x12a>
 80013ba:	2202      	movs	r2, #2
 80013bc:	e000      	b.n	80013c0 <ETH_SetMACConfig+0x12c>
 80013be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013c0:	4313      	orrs	r3, r2
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013d8:	2001      	movs	r0, #1
 80013da:	f7ff fdd5 	bl	8000f88 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	ff20810f 	.word	0xff20810f

080013f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <ETH_SetDMAConfig+0x110>)
 800140e:	4013      	ands	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	7b1b      	ldrb	r3, [r3, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <ETH_SetDMAConfig+0x2c>
 800141a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800141e:	e000      	b.n	8001422 <ETH_SetDMAConfig+0x2e>
 8001420:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	7b5b      	ldrb	r3, [r3, #13]
 8001426:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001428:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	7f52      	ldrb	r2, [r2, #29]
 800142e:	2a00      	cmp	r2, #0
 8001430:	d102      	bne.n	8001438 <ETH_SetDMAConfig+0x44>
 8001432:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001436:	e000      	b.n	800143a <ETH_SetDMAConfig+0x46>
 8001438:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800143a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	7b9b      	ldrb	r3, [r3, #14]
 8001440:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001442:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001448:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	7f1b      	ldrb	r3, [r3, #28]
 800144e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001450:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	7f9b      	ldrb	r3, [r3, #30]
 8001456:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001458:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800145e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001466:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001468:	4313      	orrs	r3, r2
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001478:	461a      	mov	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff fd7c 	bl	8000f88 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001498:	461a      	mov	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	791b      	ldrb	r3, [r3, #4]
 80014a2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014a8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80014ae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014b4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014bc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80014be:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014c6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014cc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014da:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f7ff fd4d 	bl	8000f88 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	f8de3f23 	.word	0xf8de3f23

08001508 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0a6      	sub	sp, #152	; 0x98
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001510:	2301      	movs	r3, #1
 8001512:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001516:	2301      	movs	r3, #1
 8001518:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800151c:	2300      	movs	r3, #0
 800151e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001526:	2301      	movs	r3, #1
 8001528:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001532:	2301      	movs	r3, #1
 8001534:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001544:	2300      	movs	r3, #0
 8001546:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800154e:	2300      	movs	r3, #0
 8001550:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800156a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001570:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001574:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800157c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fe86 	bl	8001294 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001588:	2301      	movs	r3, #1
 800158a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800158c:	2301      	movs	r3, #1
 800158e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001590:	2301      	movs	r3, #1
 8001592:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001596:	2301      	movs	r3, #1
 8001598:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80015b4:	2301      	movs	r3, #1
 80015b6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015bc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015c2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	4619      	mov	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ff08 	bl	80013f4 <ETH_SetDMAConfig>
}
 80015e4:	bf00      	nop
 80015e6:	3798      	adds	r7, #152	; 0x98
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3305      	adds	r3, #5
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	3204      	adds	r2, #4
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	4313      	orrs	r3, r2
 8001608:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <ETH_MACAddressConfig+0x68>)
 800160e:	4413      	add	r3, r2
 8001610:	461a      	mov	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3303      	adds	r3, #3
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	061a      	lsls	r2, r3, #24
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3302      	adds	r3, #2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	041b      	lsls	r3, r3, #16
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3301      	adds	r3, #1
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	4313      	orrs	r3, r2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	4313      	orrs	r3, r2
 8001638:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <ETH_MACAddressConfig+0x6c>)
 800163e:	4413      	add	r3, r2
 8001640:	461a      	mov	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	6013      	str	r3, [r2, #0]
}
 8001646:	bf00      	nop
 8001648:	371c      	adds	r7, #28
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40028040 	.word	0x40028040
 8001658:	40028044 	.word	0x40028044

0800165c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e03e      	b.n	80016e8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68d9      	ldr	r1, [r3, #12]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	440b      	add	r3, r1
 800167a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	3206      	adds	r2, #6
 800169c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d80c      	bhi.n	80016cc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68d9      	ldr	r1, [r3, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	461a      	mov	r2, r3
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	e004      	b.n	80016d6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	461a      	mov	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d9bd      	bls.n	800166a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001700:	611a      	str	r2, [r3, #16]
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	e046      	b.n	80017aa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6919      	ldr	r1, [r3, #16]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001758:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001760:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	3212      	adds	r2, #18
 8001776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d80c      	bhi.n	800179a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6919      	ldr	r1, [r3, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	461a      	mov	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	e004      	b.n	80017a4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	461a      	mov	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3301      	adds	r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d9b5      	bls.n	800171c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017da:	60da      	str	r2, [r3, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	e175      	b.n	8001af4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001808:	2201      	movs	r2, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	429a      	cmp	r2, r3
 8001822:	f040 8164 	bne.w	8001aee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d005      	beq.n	800183e <HAL_GPIO_Init+0x56>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d130      	bne.n	80018a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 0201 	and.w	r2, r3, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d017      	beq.n	80018dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d123      	bne.n	8001930 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	220f      	movs	r2, #15
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	08da      	lsrs	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3208      	adds	r2, #8
 800192a:	69b9      	ldr	r1, [r7, #24]
 800192c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80be 	beq.w	8001aee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	4b66      	ldr	r3, [pc, #408]	; (8001b0c <HAL_GPIO_Init+0x324>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a65      	ldr	r2, [pc, #404]	; (8001b0c <HAL_GPIO_Init+0x324>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <HAL_GPIO_Init+0x324>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800198a:	4a61      	ldr	r2, [pc, #388]	; (8001b10 <HAL_GPIO_Init+0x328>)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a58      	ldr	r2, [pc, #352]	; (8001b14 <HAL_GPIO_Init+0x32c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d037      	beq.n	8001a26 <HAL_GPIO_Init+0x23e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a57      	ldr	r2, [pc, #348]	; (8001b18 <HAL_GPIO_Init+0x330>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d031      	beq.n	8001a22 <HAL_GPIO_Init+0x23a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a56      	ldr	r2, [pc, #344]	; (8001b1c <HAL_GPIO_Init+0x334>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d02b      	beq.n	8001a1e <HAL_GPIO_Init+0x236>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a55      	ldr	r2, [pc, #340]	; (8001b20 <HAL_GPIO_Init+0x338>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d025      	beq.n	8001a1a <HAL_GPIO_Init+0x232>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a54      	ldr	r2, [pc, #336]	; (8001b24 <HAL_GPIO_Init+0x33c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d01f      	beq.n	8001a16 <HAL_GPIO_Init+0x22e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a53      	ldr	r2, [pc, #332]	; (8001b28 <HAL_GPIO_Init+0x340>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d019      	beq.n	8001a12 <HAL_GPIO_Init+0x22a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a52      	ldr	r2, [pc, #328]	; (8001b2c <HAL_GPIO_Init+0x344>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_GPIO_Init+0x226>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a51      	ldr	r2, [pc, #324]	; (8001b30 <HAL_GPIO_Init+0x348>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00d      	beq.n	8001a0a <HAL_GPIO_Init+0x222>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a50      	ldr	r2, [pc, #320]	; (8001b34 <HAL_GPIO_Init+0x34c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d007      	beq.n	8001a06 <HAL_GPIO_Init+0x21e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4f      	ldr	r2, [pc, #316]	; (8001b38 <HAL_GPIO_Init+0x350>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_GPIO_Init+0x21a>
 80019fe:	2309      	movs	r3, #9
 8001a00:	e012      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a02:	230a      	movs	r3, #10
 8001a04:	e010      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a06:	2308      	movs	r3, #8
 8001a08:	e00e      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	e00c      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a0e:	2306      	movs	r3, #6
 8001a10:	e00a      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a12:	2305      	movs	r3, #5
 8001a14:	e008      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e004      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a26:	2300      	movs	r3, #0
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	f002 0203 	and.w	r2, r2, #3
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	4093      	lsls	r3, r2
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a38:	4935      	ldr	r1, [pc, #212]	; (8001b10 <HAL_GPIO_Init+0x328>)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a46:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6a:	4a34      	ldr	r2, [pc, #208]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a70:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a94:	4a29      	ldr	r2, [pc, #164]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a9a:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001abe:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3301      	adds	r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	2b0f      	cmp	r3, #15
 8001af8:	f67f ae86 	bls.w	8001808 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3724      	adds	r7, #36	; 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40013800 	.word	0x40013800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020c00 	.word	0x40020c00
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40021400 	.word	0x40021400
 8001b2c:	40021800 	.word	0x40021800
 8001b30:	40021c00 	.word	0x40021c00
 8001b34:	40022000 	.word	0x40022000
 8001b38:	40022400 	.word	0x40022400
 8001b3c:	40013c00 	.word	0x40013c00

08001b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b5c:	e003      	b.n	8001b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	041a      	lsls	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	619a      	str	r2, [r3, #24]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b74:	b08f      	sub	sp, #60	; 0x3c
 8001b76:	af0a      	add	r7, sp, #40	; 0x28
 8001b78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e116      	b.n	8001db2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff f8b6 	bl	8000d10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f001 ff3a 	bl	8003a3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	687e      	ldr	r6, [r7, #4]
 8001bd0:	466d      	mov	r5, sp
 8001bd2:	f106 0410 	add.w	r4, r6, #16
 8001bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001be2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001be6:	1d33      	adds	r3, r6, #4
 8001be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bea:	6838      	ldr	r0, [r7, #0]
 8001bec:	f001 fece 	bl	800398c <USB_CoreInit>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0d7      	b.n	8001db2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f001 ff28 	bl	8003a5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
 8001c12:	e04a      	b.n	8001caa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	333d      	adds	r3, #61	; 0x3d
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	333c      	adds	r3, #60	; 0x3c
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	b298      	uxth	r0, r3
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3344      	adds	r3, #68	; 0x44
 8001c50:	4602      	mov	r2, r0
 8001c52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	3340      	adds	r3, #64	; 0x40
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	3348      	adds	r3, #72	; 0x48
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	334c      	adds	r3, #76	; 0x4c
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	3354      	adds	r3, #84	; 0x54
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d3af      	bcc.n	8001c14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	e044      	b.n	8001d44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ce6:	7bfa      	ldrb	r2, [r7, #15]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	3301      	adds	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d3b5      	bcc.n	8001cba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	687e      	ldr	r6, [r7, #4]
 8001d56:	466d      	mov	r5, sp
 8001d58:	f106 0410 	add.w	r4, r6, #16
 8001d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d68:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d6c:	1d33      	adds	r3, r6, #4
 8001d6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d70:	6838      	ldr	r0, [r7, #0]
 8001d72:	f001 fec1 	bl	8003af8 <USB_DevInit>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e014      	b.n	8001db2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d102      	bne.n	8001da6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f80b 	bl	8001dbc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 f87f 	bl	8003eae <USB_DevDisconnect>

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001dbc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_PCDEx_ActivateLPM+0x44>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	10000003 	.word	0x10000003

08001e04 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40007000 	.word	0x40007000

08001e24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_PWREx_EnableOverDrive+0x98>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <HAL_PWREx_EnableOverDrive+0x98>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_PWREx_EnableOverDrive+0x98>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e46:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e52:	f7ff f88d 	bl	8000f70 <HAL_GetTick>
 8001e56:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e58:	e009      	b.n	8001e6e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e5a:	f7ff f889 	bl	8000f70 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e68:	d901      	bls.n	8001e6e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e022      	b.n	8001eb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e6e:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7a:	d1ee      	bne.n	8001e5a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e88:	f7ff f872 	bl	8000f70 <HAL_GetTick>
 8001e8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e8e:	e009      	b.n	8001ea4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e90:	f7ff f86e 	bl	8000f70 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e9e:	d901      	bls.n	8001ea4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e007      	b.n	8001eb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001eb0:	d1ee      	bne.n	8001e90 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e29b      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8087 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee8:	4b96      	ldr	r3, [pc, #600]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d00c      	beq.n	8001f0e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef4:	4b93      	ldr	r3, [pc, #588]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d112      	bne.n	8001f26 <HAL_RCC_OscConfig+0x62>
 8001f00:	4b90      	ldr	r3, [pc, #576]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f0c:	d10b      	bne.n	8001f26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0e:	4b8d      	ldr	r3, [pc, #564]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d06c      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x130>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d168      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e275      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x7a>
 8001f30:	4b84      	ldr	r3, [pc, #528]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a83      	ldr	r2, [pc, #524]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	e02e      	b.n	8001f9c <HAL_RCC_OscConfig+0xd8>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x9c>
 8001f46:	4b7f      	ldr	r3, [pc, #508]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a7e      	ldr	r2, [pc, #504]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b7c      	ldr	r3, [pc, #496]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a7b      	ldr	r2, [pc, #492]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e01d      	b.n	8001f9c <HAL_RCC_OscConfig+0xd8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0xc0>
 8001f6a:	4b76      	ldr	r3, [pc, #472]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a75      	ldr	r2, [pc, #468]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b73      	ldr	r3, [pc, #460]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a72      	ldr	r2, [pc, #456]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e00b      	b.n	8001f9c <HAL_RCC_OscConfig+0xd8>
 8001f84:	4b6f      	ldr	r3, [pc, #444]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a6e      	ldr	r2, [pc, #440]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b6c      	ldr	r3, [pc, #432]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a6b      	ldr	r2, [pc, #428]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe ffe4 	bl	8000f70 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7fe ffe0 	bl	8000f70 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e229      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b61      	ldr	r3, [pc, #388]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0xe8>
 8001fca:	e014      	b.n	8001ff6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7fe ffd0 	bl	8000f70 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7fe ffcc 	bl	8000f70 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e215      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	4b57      	ldr	r3, [pc, #348]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x110>
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d069      	beq.n	80020d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002002:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800200e:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b08      	cmp	r3, #8
 8002018:	d11c      	bne.n	8002054 <HAL_RCC_OscConfig+0x190>
 800201a:	4b4a      	ldr	r3, [pc, #296]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	4b47      	ldr	r3, [pc, #284]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_RCC_OscConfig+0x17a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d001      	beq.n	800203e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e1e9      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b41      	ldr	r3, [pc, #260]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	493d      	ldr	r1, [pc, #244]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	e040      	b.n	80020d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d023      	beq.n	80020a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800205c:	4b39      	ldr	r3, [pc, #228]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a38      	ldr	r2, [pc, #224]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7fe ff82 	bl	8000f70 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002070:	f7fe ff7e 	bl	8000f70 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e1c7      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208e:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4929      	ldr	r1, [pc, #164]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
 80020a2:	e018      	b.n	80020d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a26      	ldr	r2, [pc, #152]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe ff5e 	bl	8000f70 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b8:	f7fe ff5a 	bl	8000f70 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e1a3      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d038      	beq.n	8002154 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d019      	beq.n	800211e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 80020ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ee:	4a15      	ldr	r2, [pc, #84]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f6:	f7fe ff3b 	bl	8000f70 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fe:	f7fe ff37 	bl	8000f70 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e180      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8002112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x23a>
 800211c:	e01a      	b.n	8002154 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8002120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002122:	4a08      	ldr	r2, [pc, #32]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7fe ff21 	bl	8000f70 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002132:	f7fe ff1d 	bl	8000f70 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d903      	bls.n	8002148 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e166      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
 8002144:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002148:	4b92      	ldr	r3, [pc, #584]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 800214a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ee      	bne.n	8002132 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80a4 	beq.w	80022aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002162:	4b8c      	ldr	r3, [pc, #560]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10d      	bne.n	800218a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	4b89      	ldr	r3, [pc, #548]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a88      	ldr	r2, [pc, #544]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b86      	ldr	r3, [pc, #536]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002186:	2301      	movs	r3, #1
 8002188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800218a:	4b83      	ldr	r3, [pc, #524]	; (8002398 <HAL_RCC_OscConfig+0x4d4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d118      	bne.n	80021c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002196:	4b80      	ldr	r3, [pc, #512]	; (8002398 <HAL_RCC_OscConfig+0x4d4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a7f      	ldr	r2, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x4d4>)
 800219c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a2:	f7fe fee5 	bl	8000f70 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021aa:	f7fe fee1 	bl	8000f70 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b64      	cmp	r3, #100	; 0x64
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e12a      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021bc:	4b76      	ldr	r3, [pc, #472]	; (8002398 <HAL_RCC_OscConfig+0x4d4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x31a>
 80021d0:	4b70      	ldr	r3, [pc, #448]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	4a6f      	ldr	r2, [pc, #444]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6713      	str	r3, [r2, #112]	; 0x70
 80021dc:	e02d      	b.n	800223a <HAL_RCC_OscConfig+0x376>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0x33c>
 80021e6:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	4a6a      	ldr	r2, [pc, #424]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	6713      	str	r3, [r2, #112]	; 0x70
 80021f2:	4b68      	ldr	r3, [pc, #416]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a67      	ldr	r2, [pc, #412]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	6713      	str	r3, [r2, #112]	; 0x70
 80021fe:	e01c      	b.n	800223a <HAL_RCC_OscConfig+0x376>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b05      	cmp	r3, #5
 8002206:	d10c      	bne.n	8002222 <HAL_RCC_OscConfig+0x35e>
 8002208:	4b62      	ldr	r3, [pc, #392]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	4a61      	ldr	r2, [pc, #388]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	6713      	str	r3, [r2, #112]	; 0x70
 8002214:	4b5f      	ldr	r3, [pc, #380]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	4a5e      	ldr	r2, [pc, #376]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6713      	str	r3, [r2, #112]	; 0x70
 8002220:	e00b      	b.n	800223a <HAL_RCC_OscConfig+0x376>
 8002222:	4b5c      	ldr	r3, [pc, #368]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	4a5b      	ldr	r2, [pc, #364]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6713      	str	r3, [r2, #112]	; 0x70
 800222e:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	4a58      	ldr	r2, [pc, #352]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002234:	f023 0304 	bic.w	r3, r3, #4
 8002238:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d015      	beq.n	800226e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002242:	f7fe fe95 	bl	8000f70 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7fe fe91 	bl	8000f70 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	; 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e0d8      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	4b4c      	ldr	r3, [pc, #304]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0ee      	beq.n	800224a <HAL_RCC_OscConfig+0x386>
 800226c:	e014      	b.n	8002298 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226e:	f7fe fe7f 	bl	8000f70 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002274:	e00a      	b.n	800228c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7fe fe7b 	bl	8000f70 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	; 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0c2      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228c:	4b41      	ldr	r3, [pc, #260]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1ee      	bne.n	8002276 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002298:	7dfb      	ldrb	r3, [r7, #23]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d105      	bne.n	80022aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4a3c      	ldr	r2, [pc, #240]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 80022a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 80ae 	beq.w	8002410 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b4:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d06d      	beq.n	800239c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d14b      	bne.n	8002360 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c8:	4b32      	ldr	r3, [pc, #200]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a31      	ldr	r2, [pc, #196]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 80022ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fe4c 	bl	8000f70 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe fe48 	bl	8000f70 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e091      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	4b29      	ldr	r3, [pc, #164]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	019b      	lsls	r3, r3, #6
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	3b01      	subs	r3, #1
 8002314:	041b      	lsls	r3, r3, #16
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	061b      	lsls	r3, r3, #24
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	071b      	lsls	r3, r3, #28
 8002326:	491b      	ldr	r1, [pc, #108]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a18      	ldr	r2, [pc, #96]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe fe1a 	bl	8000f70 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe fe16 	bl	8000f70 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e05f      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x47c>
 800235e:	e057      	b.n	8002410 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800236a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe fe00 	bl	8000f70 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002374:	f7fe fdfc 	bl	8000f70 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e045      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002386:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_RCC_OscConfig+0x4d0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x4b0>
 8002392:	e03d      	b.n	8002410 <HAL_RCC_OscConfig+0x54c>
 8002394:	40023800 	.word	0x40023800
 8002398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800239c:	4b1f      	ldr	r3, [pc, #124]	; (800241c <HAL_RCC_OscConfig+0x558>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d030      	beq.n	800240c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d129      	bne.n	800240c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d122      	bne.n	800240c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023cc:	4013      	ands	r3, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d119      	bne.n	800240c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	3b01      	subs	r3, #1
 80023e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d10f      	bne.n	800240c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d107      	bne.n	800240c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0d0      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d910      	bls.n	8002468 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 020f 	bic.w	r2, r3, #15
 800244e:	4965      	ldr	r1, [pc, #404]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0b8      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002480:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800248a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002498:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 800249e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	494d      	ldr	r1, [pc, #308]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d040      	beq.n	8002544 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d115      	bne.n	8002502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e073      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06b      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002502:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f023 0203 	bic.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4936      	ldr	r1, [pc, #216]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002510:	4313      	orrs	r3, r2
 8002512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002514:	f7fe fd2c 	bl	8000f70 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7fe fd28 	bl	8000f70 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e053      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 020c 	and.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	d1eb      	bne.n	800251c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d210      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 020f 	bic.w	r2, r3, #15
 800255a:	4922      	ldr	r1, [pc, #136]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e032      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4916      	ldr	r1, [pc, #88]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	490e      	ldr	r1, [pc, #56]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b2:	f000 f821 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	490a      	ldr	r1, [pc, #40]	; (80025ec <HAL_RCC_ClockConfig+0x1cc>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x1d0>)
 80025cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_ClockConfig+0x1d4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fc88 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023c00 	.word	0x40023c00
 80025e8:	40023800 	.word	0x40023800
 80025ec:	08003fe4 	.word	0x08003fe4
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025fc:	b094      	sub	sp, #80	; 0x50
 80025fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	647b      	str	r3, [r7, #68]	; 0x44
 8002604:	2300      	movs	r3, #0
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002608:	2300      	movs	r3, #0
 800260a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002610:	4b79      	ldr	r3, [pc, #484]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d00d      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x40>
 800261c:	2b08      	cmp	r3, #8
 800261e:	f200 80e1 	bhi.w	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x34>
 8002626:	2b04      	cmp	r3, #4
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x3a>
 800262a:	e0db      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b73      	ldr	r3, [pc, #460]	; (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 800262e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002630:	e0db      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002632:	4b73      	ldr	r3, [pc, #460]	; (8002800 <HAL_RCC_GetSysClockFreq+0x208>)
 8002634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002636:	e0d8      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002640:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002642:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d063      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264e:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	2200      	movs	r2, #0
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
 8002658:	63fa      	str	r2, [r7, #60]	; 0x3c
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
 8002662:	2300      	movs	r3, #0
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
 8002666:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800266a:	4622      	mov	r2, r4
 800266c:	462b      	mov	r3, r5
 800266e:	f04f 0000 	mov.w	r0, #0
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	0159      	lsls	r1, r3, #5
 8002678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267c:	0150      	lsls	r0, r2, #5
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4621      	mov	r1, r4
 8002684:	1a51      	subs	r1, r2, r1
 8002686:	6139      	str	r1, [r7, #16]
 8002688:	4629      	mov	r1, r5
 800268a:	eb63 0301 	sbc.w	r3, r3, r1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800269c:	4659      	mov	r1, fp
 800269e:	018b      	lsls	r3, r1, #6
 80026a0:	4651      	mov	r1, sl
 80026a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026a6:	4651      	mov	r1, sl
 80026a8:	018a      	lsls	r2, r1, #6
 80026aa:	4651      	mov	r1, sl
 80026ac:	ebb2 0801 	subs.w	r8, r2, r1
 80026b0:	4659      	mov	r1, fp
 80026b2:	eb63 0901 	sbc.w	r9, r3, r1
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ca:	4690      	mov	r8, r2
 80026cc:	4699      	mov	r9, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	eb18 0303 	adds.w	r3, r8, r3
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	462b      	mov	r3, r5
 80026d8:	eb49 0303 	adc.w	r3, r9, r3
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ea:	4629      	mov	r1, r5
 80026ec:	024b      	lsls	r3, r1, #9
 80026ee:	4621      	mov	r1, r4
 80026f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026f4:	4621      	mov	r1, r4
 80026f6:	024a      	lsls	r2, r1, #9
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fe:	2200      	movs	r2, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
 8002702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002708:	f7fd fd96 	bl	8000238 <__aeabi_uldivmod>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4613      	mov	r3, r2
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002714:	e058      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002716:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	2200      	movs	r2, #0
 800271e:	4618      	mov	r0, r3
 8002720:	4611      	mov	r1, r2
 8002722:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	f04f 0000 	mov.w	r0, #0
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	0159      	lsls	r1, r3, #5
 800273e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002742:	0150      	lsls	r0, r2, #5
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4641      	mov	r1, r8
 800274a:	ebb2 0a01 	subs.w	sl, r2, r1
 800274e:	4649      	mov	r1, r9
 8002750:	eb63 0b01 	sbc.w	fp, r3, r1
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002760:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002764:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002768:	ebb2 040a 	subs.w	r4, r2, sl
 800276c:	eb63 050b 	sbc.w	r5, r3, fp
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	00eb      	lsls	r3, r5, #3
 800277a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277e:	00e2      	lsls	r2, r4, #3
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	4643      	mov	r3, r8
 8002786:	18e3      	adds	r3, r4, r3
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	464b      	mov	r3, r9
 800278c:	eb45 0303 	adc.w	r3, r5, r3
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800279e:	4629      	mov	r1, r5
 80027a0:	028b      	lsls	r3, r1, #10
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a8:	4621      	mov	r1, r4
 80027aa:	028a      	lsls	r2, r1, #10
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b2:	2200      	movs	r2, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	61fa      	str	r2, [r7, #28]
 80027b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027bc:	f7fd fd3c 	bl	8000238 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80027d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e2:	e002      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 80027e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3750      	adds	r7, #80	; 0x50
 80027f0:	46bd      	mov	sp, r7
 80027f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	007a1200 	.word	0x007a1200

08002804 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000000 	.word	0x20000000

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002820:	f7ff fff0 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0a9b      	lsrs	r3, r3, #10
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	08003ff4 	.word	0x08003ff4

08002844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002848:	f7ff ffdc 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0b5b      	lsrs	r3, r3, #13
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	08003ff4 	.word	0x08003ff4

0800286c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d012      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002894:	4b69      	ldr	r3, [pc, #420]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a68      	ldr	r2, [pc, #416]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800289e:	6093      	str	r3, [r2, #8]
 80028a0:	4b66      	ldr	r3, [pc, #408]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a8:	4964      	ldr	r1, [pc, #400]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d017      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028c6:	4b5d      	ldr	r3, [pc, #372]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	4959      	ldr	r1, [pc, #356]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028e4:	d101      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028e6:	2301      	movs	r3, #1
 80028e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d017      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002902:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002908:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	494a      	ldr	r1, [pc, #296]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002920:	d101      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002922:	2301      	movs	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800292e:	2301      	movs	r3, #1
 8002930:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 808b 	beq.w	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	4a39      	ldr	r2, [pc, #228]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295a:	6413      	str	r3, [r2, #64]	; 0x40
 800295c:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002968:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a34      	ldr	r2, [pc, #208]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002974:	f7fe fafc 	bl	8000f70 <HAL_GetTick>
 8002978:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297c:	f7fe faf8 	bl	8000f70 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e38f      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800298e:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800299a:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d035      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d02e      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029b8:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029c2:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029e0:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d114      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe fac0 	bl	8000f70 <HAL_GetTick>
 80029f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	e00a      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f4:	f7fe fabc 	bl	8000f70 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e351      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0ee      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a22:	d111      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a32:	400b      	ands	r3, r1
 8002a34:	4901      	ldr	r1, [pc, #4]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40007000 	.word	0x40007000
 8002a44:	0ffffcff 	.word	0x0ffffcff
 8002a48:	4bac      	ldr	r3, [pc, #688]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4aab      	ldr	r2, [pc, #684]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a52:	6093      	str	r3, [r2, #8]
 8002a54:	4ba9      	ldr	r3, [pc, #676]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	49a6      	ldr	r1, [pc, #664]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d010      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a72:	4ba2      	ldr	r3, [pc, #648]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a78:	4aa0      	ldr	r2, [pc, #640]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a82:	4b9e      	ldr	r3, [pc, #632]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	499b      	ldr	r1, [pc, #620]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aa0:	4b96      	ldr	r3, [pc, #600]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aae:	4993      	ldr	r1, [pc, #588]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ac2:	4b8e      	ldr	r3, [pc, #568]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ad0:	498a      	ldr	r1, [pc, #552]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ae4:	4b85      	ldr	r3, [pc, #532]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af2:	4982      	ldr	r1, [pc, #520]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b06:	4b7d      	ldr	r3, [pc, #500]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4979      	ldr	r1, [pc, #484]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b28:	4b74      	ldr	r3, [pc, #464]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	4971      	ldr	r1, [pc, #452]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b4a:	4b6c      	ldr	r3, [pc, #432]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	f023 020c 	bic.w	r2, r3, #12
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	4968      	ldr	r1, [pc, #416]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b6c:	4b63      	ldr	r3, [pc, #396]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7a:	4960      	ldr	r1, [pc, #384]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b8e:	4b5b      	ldr	r3, [pc, #364]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9c:	4957      	ldr	r1, [pc, #348]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bb0:	4b52      	ldr	r3, [pc, #328]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	494f      	ldr	r1, [pc, #316]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bd2:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4946      	ldr	r1, [pc, #280]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bf4:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	493e      	ldr	r1, [pc, #248]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c16:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c24:	4935      	ldr	r1, [pc, #212]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c38:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c46:	492d      	ldr	r1, [pc, #180]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d011      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c5a:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c68:	4924      	ldr	r1, [pc, #144]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c78:	d101      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c9a:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca8:	4914      	ldr	r1, [pc, #80]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ccc:	490b      	ldr	r1, [pc, #44]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00f      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf0:	4902      	ldr	r1, [pc, #8]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cf8:	e002      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00b      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d0c:	4b8a      	ldr	r3, [pc, #552]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1c:	4986      	ldr	r1, [pc, #536]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00b      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d30:	4b81      	ldr	r3, [pc, #516]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d40:	497d      	ldr	r1, [pc, #500]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d006      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 80d6 	beq.w	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d5c:	4b76      	ldr	r3, [pc, #472]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a75      	ldr	r2, [pc, #468]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d68:	f7fe f902 	bl	8000f70 <HAL_GetTick>
 8002d6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d70:	f7fe f8fe 	bl	8000f70 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e195      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d82:	4b6d      	ldr	r3, [pc, #436]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d021      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d11d      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002da2:	4b65      	ldr	r3, [pc, #404]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002db0:	4b61      	ldr	r3, [pc, #388]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db6:	0e1b      	lsrs	r3, r3, #24
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	019a      	lsls	r2, r3, #6
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	071b      	lsls	r3, r3, #28
 8002dd6:	4958      	ldr	r1, [pc, #352]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d02e      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e08:	d129      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e0a:	4b4b      	ldr	r3, [pc, #300]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e18:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1e:	0f1b      	lsrs	r3, r3, #28
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	019a      	lsls	r2, r3, #6
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	061b      	lsls	r3, r3, #24
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	071b      	lsls	r3, r3, #28
 8002e3e:	493e      	ldr	r1, [pc, #248]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e46:	4b3c      	ldr	r3, [pc, #240]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e4c:	f023 021f 	bic.w	r2, r3, #31
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	3b01      	subs	r3, #1
 8002e56:	4938      	ldr	r1, [pc, #224]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01d      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e6a:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e70:	0e1b      	lsrs	r3, r3, #24
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e78:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e7e:	0f1b      	lsrs	r3, r3, #28
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	019a      	lsls	r2, r3, #6
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	041b      	lsls	r3, r3, #16
 8002e92:	431a      	orrs	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	061b      	lsls	r3, r3, #24
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	071b      	lsls	r3, r3, #28
 8002e9e:	4926      	ldr	r1, [pc, #152]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d011      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	019a      	lsls	r2, r3, #6
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	041b      	lsls	r3, r3, #16
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	071b      	lsls	r3, r3, #28
 8002ece:	491a      	ldr	r1, [pc, #104]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ed6:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002edc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee2:	f7fe f845 	bl	8000f70 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002eea:	f7fe f841 	bl	8000f70 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b64      	cmp	r3, #100	; 0x64
 8002ef6:	d901      	bls.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e0d8      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	f040 80ce 	bne.w	80030ac <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a08      	ldr	r2, [pc, #32]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fe f828 	bl	8000f70 <HAL_GetTick>
 8002f20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f22:	e00b      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f24:	f7fe f824 	bl	8000f70 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d904      	bls.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0bb      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f3c:	4b5e      	ldr	r3, [pc, #376]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f48:	d0ec      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d009      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d02e      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d12a      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f72:	4b51      	ldr	r3, [pc, #324]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f80:	4b4d      	ldr	r3, [pc, #308]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	0f1b      	lsrs	r3, r3, #28
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	019a      	lsls	r2, r3, #6
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	071b      	lsls	r3, r3, #28
 8002fa6:	4944      	ldr	r1, [pc, #272]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fae:	4b42      	ldr	r3, [pc, #264]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	493d      	ldr	r1, [pc, #244]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d022      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fdc:	d11d      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fde:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	0e1b      	lsrs	r3, r3, #24
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	0f1b      	lsrs	r3, r3, #28
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	019a      	lsls	r2, r3, #6
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	041b      	lsls	r3, r3, #16
 8003006:	431a      	orrs	r2, r3
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	061b      	lsls	r3, r3, #24
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	071b      	lsls	r3, r3, #28
 8003012:	4929      	ldr	r1, [pc, #164]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d028      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003026:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	0e1b      	lsrs	r3, r3, #24
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003034:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	0c1b      	lsrs	r3, r3, #16
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	019a      	lsls	r2, r3, #6
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	041b      	lsls	r3, r3, #16
 800304c:	431a      	orrs	r2, r3
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	061b      	lsls	r3, r3, #24
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	071b      	lsls	r3, r3, #28
 800305a:	4917      	ldr	r1, [pc, #92]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003068:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	4911      	ldr	r1, [pc, #68]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800307e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003084:	f7fd ff74 	bl	8000f70 <HAL_GetTick>
 8003088:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800308a:	e008      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800308c:	f7fd ff70 	bl	8000f70 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e007      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030aa:	d1ef      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800

080030bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e040      	b.n	8003150 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd fdb6 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2224      	movs	r2, #36	; 0x24
 80030e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f82c 	bl	8003158 <UART_SetConfig>
 8003100:	4603      	mov	r3, r0
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e022      	b.n	8003150 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fa84 	bl	8003620 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fb0b 	bl	8003764 <UART_CheckIdleState>
 800314e:	4603      	mov	r3, r0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4ba6      	ldr	r3, [pc, #664]	; (800341c <UART_SetConfig+0x2c4>)
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	6979      	ldr	r1, [r7, #20]
 800318c:	430b      	orrs	r3, r1
 800318e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a94      	ldr	r2, [pc, #592]	; (8003420 <UART_SetConfig+0x2c8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d120      	bne.n	8003216 <UART_SetConfig+0xbe>
 80031d4:	4b93      	ldr	r3, [pc, #588]	; (8003424 <UART_SetConfig+0x2cc>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d816      	bhi.n	8003210 <UART_SetConfig+0xb8>
 80031e2:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <UART_SetConfig+0x90>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	080031f9 	.word	0x080031f9
 80031ec:	08003205 	.word	0x08003205
 80031f0:	080031ff 	.word	0x080031ff
 80031f4:	0800320b 	.word	0x0800320b
 80031f8:	2301      	movs	r3, #1
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	e150      	b.n	80034a0 <UART_SetConfig+0x348>
 80031fe:	2302      	movs	r3, #2
 8003200:	77fb      	strb	r3, [r7, #31]
 8003202:	e14d      	b.n	80034a0 <UART_SetConfig+0x348>
 8003204:	2304      	movs	r3, #4
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e14a      	b.n	80034a0 <UART_SetConfig+0x348>
 800320a:	2308      	movs	r3, #8
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	e147      	b.n	80034a0 <UART_SetConfig+0x348>
 8003210:	2310      	movs	r3, #16
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e144      	b.n	80034a0 <UART_SetConfig+0x348>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a83      	ldr	r2, [pc, #524]	; (8003428 <UART_SetConfig+0x2d0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d132      	bne.n	8003286 <UART_SetConfig+0x12e>
 8003220:	4b80      	ldr	r3, [pc, #512]	; (8003424 <UART_SetConfig+0x2cc>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d828      	bhi.n	8003280 <UART_SetConfig+0x128>
 800322e:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <UART_SetConfig+0xdc>)
 8003230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003234:	08003269 	.word	0x08003269
 8003238:	08003281 	.word	0x08003281
 800323c:	08003281 	.word	0x08003281
 8003240:	08003281 	.word	0x08003281
 8003244:	08003275 	.word	0x08003275
 8003248:	08003281 	.word	0x08003281
 800324c:	08003281 	.word	0x08003281
 8003250:	08003281 	.word	0x08003281
 8003254:	0800326f 	.word	0x0800326f
 8003258:	08003281 	.word	0x08003281
 800325c:	08003281 	.word	0x08003281
 8003260:	08003281 	.word	0x08003281
 8003264:	0800327b 	.word	0x0800327b
 8003268:	2300      	movs	r3, #0
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e118      	b.n	80034a0 <UART_SetConfig+0x348>
 800326e:	2302      	movs	r3, #2
 8003270:	77fb      	strb	r3, [r7, #31]
 8003272:	e115      	b.n	80034a0 <UART_SetConfig+0x348>
 8003274:	2304      	movs	r3, #4
 8003276:	77fb      	strb	r3, [r7, #31]
 8003278:	e112      	b.n	80034a0 <UART_SetConfig+0x348>
 800327a:	2308      	movs	r3, #8
 800327c:	77fb      	strb	r3, [r7, #31]
 800327e:	e10f      	b.n	80034a0 <UART_SetConfig+0x348>
 8003280:	2310      	movs	r3, #16
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e10c      	b.n	80034a0 <UART_SetConfig+0x348>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a68      	ldr	r2, [pc, #416]	; (800342c <UART_SetConfig+0x2d4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d120      	bne.n	80032d2 <UART_SetConfig+0x17a>
 8003290:	4b64      	ldr	r3, [pc, #400]	; (8003424 <UART_SetConfig+0x2cc>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800329a:	2b30      	cmp	r3, #48	; 0x30
 800329c:	d013      	beq.n	80032c6 <UART_SetConfig+0x16e>
 800329e:	2b30      	cmp	r3, #48	; 0x30
 80032a0:	d814      	bhi.n	80032cc <UART_SetConfig+0x174>
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d009      	beq.n	80032ba <UART_SetConfig+0x162>
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d810      	bhi.n	80032cc <UART_SetConfig+0x174>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <UART_SetConfig+0x15c>
 80032ae:	2b10      	cmp	r3, #16
 80032b0:	d006      	beq.n	80032c0 <UART_SetConfig+0x168>
 80032b2:	e00b      	b.n	80032cc <UART_SetConfig+0x174>
 80032b4:	2300      	movs	r3, #0
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e0f2      	b.n	80034a0 <UART_SetConfig+0x348>
 80032ba:	2302      	movs	r3, #2
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e0ef      	b.n	80034a0 <UART_SetConfig+0x348>
 80032c0:	2304      	movs	r3, #4
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e0ec      	b.n	80034a0 <UART_SetConfig+0x348>
 80032c6:	2308      	movs	r3, #8
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e0e9      	b.n	80034a0 <UART_SetConfig+0x348>
 80032cc:	2310      	movs	r3, #16
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e0e6      	b.n	80034a0 <UART_SetConfig+0x348>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a56      	ldr	r2, [pc, #344]	; (8003430 <UART_SetConfig+0x2d8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d120      	bne.n	800331e <UART_SetConfig+0x1c6>
 80032dc:	4b51      	ldr	r3, [pc, #324]	; (8003424 <UART_SetConfig+0x2cc>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032e6:	2bc0      	cmp	r3, #192	; 0xc0
 80032e8:	d013      	beq.n	8003312 <UART_SetConfig+0x1ba>
 80032ea:	2bc0      	cmp	r3, #192	; 0xc0
 80032ec:	d814      	bhi.n	8003318 <UART_SetConfig+0x1c0>
 80032ee:	2b80      	cmp	r3, #128	; 0x80
 80032f0:	d009      	beq.n	8003306 <UART_SetConfig+0x1ae>
 80032f2:	2b80      	cmp	r3, #128	; 0x80
 80032f4:	d810      	bhi.n	8003318 <UART_SetConfig+0x1c0>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <UART_SetConfig+0x1a8>
 80032fa:	2b40      	cmp	r3, #64	; 0x40
 80032fc:	d006      	beq.n	800330c <UART_SetConfig+0x1b4>
 80032fe:	e00b      	b.n	8003318 <UART_SetConfig+0x1c0>
 8003300:	2300      	movs	r3, #0
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e0cc      	b.n	80034a0 <UART_SetConfig+0x348>
 8003306:	2302      	movs	r3, #2
 8003308:	77fb      	strb	r3, [r7, #31]
 800330a:	e0c9      	b.n	80034a0 <UART_SetConfig+0x348>
 800330c:	2304      	movs	r3, #4
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e0c6      	b.n	80034a0 <UART_SetConfig+0x348>
 8003312:	2308      	movs	r3, #8
 8003314:	77fb      	strb	r3, [r7, #31]
 8003316:	e0c3      	b.n	80034a0 <UART_SetConfig+0x348>
 8003318:	2310      	movs	r3, #16
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e0c0      	b.n	80034a0 <UART_SetConfig+0x348>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a44      	ldr	r2, [pc, #272]	; (8003434 <UART_SetConfig+0x2dc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d125      	bne.n	8003374 <UART_SetConfig+0x21c>
 8003328:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <UART_SetConfig+0x2cc>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003336:	d017      	beq.n	8003368 <UART_SetConfig+0x210>
 8003338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800333c:	d817      	bhi.n	800336e <UART_SetConfig+0x216>
 800333e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003342:	d00b      	beq.n	800335c <UART_SetConfig+0x204>
 8003344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003348:	d811      	bhi.n	800336e <UART_SetConfig+0x216>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <UART_SetConfig+0x1fe>
 800334e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003352:	d006      	beq.n	8003362 <UART_SetConfig+0x20a>
 8003354:	e00b      	b.n	800336e <UART_SetConfig+0x216>
 8003356:	2300      	movs	r3, #0
 8003358:	77fb      	strb	r3, [r7, #31]
 800335a:	e0a1      	b.n	80034a0 <UART_SetConfig+0x348>
 800335c:	2302      	movs	r3, #2
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e09e      	b.n	80034a0 <UART_SetConfig+0x348>
 8003362:	2304      	movs	r3, #4
 8003364:	77fb      	strb	r3, [r7, #31]
 8003366:	e09b      	b.n	80034a0 <UART_SetConfig+0x348>
 8003368:	2308      	movs	r3, #8
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e098      	b.n	80034a0 <UART_SetConfig+0x348>
 800336e:	2310      	movs	r3, #16
 8003370:	77fb      	strb	r3, [r7, #31]
 8003372:	e095      	b.n	80034a0 <UART_SetConfig+0x348>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2f      	ldr	r2, [pc, #188]	; (8003438 <UART_SetConfig+0x2e0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d125      	bne.n	80033ca <UART_SetConfig+0x272>
 800337e:	4b29      	ldr	r3, [pc, #164]	; (8003424 <UART_SetConfig+0x2cc>)
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003384:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003388:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800338c:	d017      	beq.n	80033be <UART_SetConfig+0x266>
 800338e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003392:	d817      	bhi.n	80033c4 <UART_SetConfig+0x26c>
 8003394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003398:	d00b      	beq.n	80033b2 <UART_SetConfig+0x25a>
 800339a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800339e:	d811      	bhi.n	80033c4 <UART_SetConfig+0x26c>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <UART_SetConfig+0x254>
 80033a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a8:	d006      	beq.n	80033b8 <UART_SetConfig+0x260>
 80033aa:	e00b      	b.n	80033c4 <UART_SetConfig+0x26c>
 80033ac:	2301      	movs	r3, #1
 80033ae:	77fb      	strb	r3, [r7, #31]
 80033b0:	e076      	b.n	80034a0 <UART_SetConfig+0x348>
 80033b2:	2302      	movs	r3, #2
 80033b4:	77fb      	strb	r3, [r7, #31]
 80033b6:	e073      	b.n	80034a0 <UART_SetConfig+0x348>
 80033b8:	2304      	movs	r3, #4
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	e070      	b.n	80034a0 <UART_SetConfig+0x348>
 80033be:	2308      	movs	r3, #8
 80033c0:	77fb      	strb	r3, [r7, #31]
 80033c2:	e06d      	b.n	80034a0 <UART_SetConfig+0x348>
 80033c4:	2310      	movs	r3, #16
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e06a      	b.n	80034a0 <UART_SetConfig+0x348>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1b      	ldr	r2, [pc, #108]	; (800343c <UART_SetConfig+0x2e4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d138      	bne.n	8003446 <UART_SetConfig+0x2ee>
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <UART_SetConfig+0x2cc>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033e2:	d017      	beq.n	8003414 <UART_SetConfig+0x2bc>
 80033e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033e8:	d82a      	bhi.n	8003440 <UART_SetConfig+0x2e8>
 80033ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ee:	d00b      	beq.n	8003408 <UART_SetConfig+0x2b0>
 80033f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f4:	d824      	bhi.n	8003440 <UART_SetConfig+0x2e8>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <UART_SetConfig+0x2aa>
 80033fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fe:	d006      	beq.n	800340e <UART_SetConfig+0x2b6>
 8003400:	e01e      	b.n	8003440 <UART_SetConfig+0x2e8>
 8003402:	2300      	movs	r3, #0
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e04b      	b.n	80034a0 <UART_SetConfig+0x348>
 8003408:	2302      	movs	r3, #2
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e048      	b.n	80034a0 <UART_SetConfig+0x348>
 800340e:	2304      	movs	r3, #4
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e045      	b.n	80034a0 <UART_SetConfig+0x348>
 8003414:	2308      	movs	r3, #8
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e042      	b.n	80034a0 <UART_SetConfig+0x348>
 800341a:	bf00      	nop
 800341c:	efff69f3 	.word	0xefff69f3
 8003420:	40011000 	.word	0x40011000
 8003424:	40023800 	.word	0x40023800
 8003428:	40004400 	.word	0x40004400
 800342c:	40004800 	.word	0x40004800
 8003430:	40004c00 	.word	0x40004c00
 8003434:	40005000 	.word	0x40005000
 8003438:	40011400 	.word	0x40011400
 800343c:	40007800 	.word	0x40007800
 8003440:	2310      	movs	r3, #16
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e02c      	b.n	80034a0 <UART_SetConfig+0x348>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a72      	ldr	r2, [pc, #456]	; (8003614 <UART_SetConfig+0x4bc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d125      	bne.n	800349c <UART_SetConfig+0x344>
 8003450:	4b71      	ldr	r3, [pc, #452]	; (8003618 <UART_SetConfig+0x4c0>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800345a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800345e:	d017      	beq.n	8003490 <UART_SetConfig+0x338>
 8003460:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003464:	d817      	bhi.n	8003496 <UART_SetConfig+0x33e>
 8003466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346a:	d00b      	beq.n	8003484 <UART_SetConfig+0x32c>
 800346c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003470:	d811      	bhi.n	8003496 <UART_SetConfig+0x33e>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <UART_SetConfig+0x326>
 8003476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800347a:	d006      	beq.n	800348a <UART_SetConfig+0x332>
 800347c:	e00b      	b.n	8003496 <UART_SetConfig+0x33e>
 800347e:	2300      	movs	r3, #0
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e00d      	b.n	80034a0 <UART_SetConfig+0x348>
 8003484:	2302      	movs	r3, #2
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e00a      	b.n	80034a0 <UART_SetConfig+0x348>
 800348a:	2304      	movs	r3, #4
 800348c:	77fb      	strb	r3, [r7, #31]
 800348e:	e007      	b.n	80034a0 <UART_SetConfig+0x348>
 8003490:	2308      	movs	r3, #8
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e004      	b.n	80034a0 <UART_SetConfig+0x348>
 8003496:	2310      	movs	r3, #16
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e001      	b.n	80034a0 <UART_SetConfig+0x348>
 800349c:	2310      	movs	r3, #16
 800349e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a8:	d15b      	bne.n	8003562 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80034aa:	7ffb      	ldrb	r3, [r7, #31]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d828      	bhi.n	8003502 <UART_SetConfig+0x3aa>
 80034b0:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <UART_SetConfig+0x360>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034dd 	.word	0x080034dd
 80034bc:	080034e5 	.word	0x080034e5
 80034c0:	080034ed 	.word	0x080034ed
 80034c4:	08003503 	.word	0x08003503
 80034c8:	080034f3 	.word	0x080034f3
 80034cc:	08003503 	.word	0x08003503
 80034d0:	08003503 	.word	0x08003503
 80034d4:	08003503 	.word	0x08003503
 80034d8:	080034fb 	.word	0x080034fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034dc:	f7ff f99e 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 80034e0:	61b8      	str	r0, [r7, #24]
        break;
 80034e2:	e013      	b.n	800350c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034e4:	f7ff f9ae 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 80034e8:	61b8      	str	r0, [r7, #24]
        break;
 80034ea:	e00f      	b.n	800350c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034ec:	4b4b      	ldr	r3, [pc, #300]	; (800361c <UART_SetConfig+0x4c4>)
 80034ee:	61bb      	str	r3, [r7, #24]
        break;
 80034f0:	e00c      	b.n	800350c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034f2:	f7ff f881 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80034f6:	61b8      	str	r0, [r7, #24]
        break;
 80034f8:	e008      	b.n	800350c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fe:	61bb      	str	r3, [r7, #24]
        break;
 8003500:	e004      	b.n	800350c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	77bb      	strb	r3, [r7, #30]
        break;
 800350a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d074      	beq.n	80035fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	005a      	lsls	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	441a      	add	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2b0f      	cmp	r3, #15
 800352c:	d916      	bls.n	800355c <UART_SetConfig+0x404>
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d212      	bcs.n	800355c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	b29b      	uxth	r3, r3
 800353a:	f023 030f 	bic.w	r3, r3, #15
 800353e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	b29b      	uxth	r3, r3
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	b29a      	uxth	r2, r3
 800354c:	89fb      	ldrh	r3, [r7, #14]
 800354e:	4313      	orrs	r3, r2
 8003550:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	89fa      	ldrh	r2, [r7, #14]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	e04f      	b.n	80035fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	77bb      	strb	r3, [r7, #30]
 8003560:	e04c      	b.n	80035fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003562:	7ffb      	ldrb	r3, [r7, #31]
 8003564:	2b08      	cmp	r3, #8
 8003566:	d828      	bhi.n	80035ba <UART_SetConfig+0x462>
 8003568:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <UART_SetConfig+0x418>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	08003595 	.word	0x08003595
 8003574:	0800359d 	.word	0x0800359d
 8003578:	080035a5 	.word	0x080035a5
 800357c:	080035bb 	.word	0x080035bb
 8003580:	080035ab 	.word	0x080035ab
 8003584:	080035bb 	.word	0x080035bb
 8003588:	080035bb 	.word	0x080035bb
 800358c:	080035bb 	.word	0x080035bb
 8003590:	080035b3 	.word	0x080035b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003594:	f7ff f942 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003598:	61b8      	str	r0, [r7, #24]
        break;
 800359a:	e013      	b.n	80035c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800359c:	f7ff f952 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 80035a0:	61b8      	str	r0, [r7, #24]
        break;
 80035a2:	e00f      	b.n	80035c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <UART_SetConfig+0x4c4>)
 80035a6:	61bb      	str	r3, [r7, #24]
        break;
 80035a8:	e00c      	b.n	80035c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035aa:	f7ff f825 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80035ae:	61b8      	str	r0, [r7, #24]
        break;
 80035b0:	e008      	b.n	80035c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035b6:	61bb      	str	r3, [r7, #24]
        break;
 80035b8:	e004      	b.n	80035c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	77bb      	strb	r3, [r7, #30]
        break;
 80035c2:	bf00      	nop
    }

    if (pclk != 0U)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d018      	beq.n	80035fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	085a      	lsrs	r2, r3, #1
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	441a      	add	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b0f      	cmp	r3, #15
 80035e2:	d909      	bls.n	80035f8 <UART_SetConfig+0x4a0>
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ea:	d205      	bcs.n	80035f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	e001      	b.n	80035fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003608:	7fbb      	ldrb	r3, [r7, #30]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40007c00 	.word	0x40007c00
 8003618:	40023800 	.word	0x40023800
 800361c:	00f42400 	.word	0x00f42400

08003620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01a      	beq.n	8003736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371e:	d10a      	bne.n	8003736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	605a      	str	r2, [r3, #4]
  }
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af02      	add	r7, sp, #8
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003774:	f7fd fbfc 	bl	8000f70 <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b08      	cmp	r3, #8
 8003786:	d10e      	bne.n	80037a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f831 	bl	80037fe <UART_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e027      	b.n	80037f6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d10e      	bne.n	80037d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f81b 	bl	80037fe <UART_WaitOnFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e011      	b.n	80037f6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b09c      	sub	sp, #112	; 0x70
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380e:	e0a7      	b.n	8003960 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	f000 80a3 	beq.w	8003960 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381a:	f7fd fba9 	bl	8000f70 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <UART_WaitOnFlagUntilTimeout+0x32>
 800382a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800382c:	2b00      	cmp	r3, #0
 800382e:	d13f      	bne.n	80038b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800383e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003840:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003844:	667b      	str	r3, [r7, #100]	; 0x64
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800384e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003850:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003854:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800385c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e6      	bne.n	8003830 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3308      	adds	r3, #8
 8003868:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	663b      	str	r3, [r7, #96]	; 0x60
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3308      	adds	r3, #8
 8003880:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003882:	64ba      	str	r2, [r7, #72]	; 0x48
 8003884:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e5      	bne.n	8003862 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e068      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d050      	beq.n	8003960 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038cc:	d148      	bne.n	8003960 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f6:	637b      	str	r3, [r7, #52]	; 0x34
 80038f8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e6      	bne.n	80038d8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3308      	adds	r3, #8
 8003910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	613b      	str	r3, [r7, #16]
   return(result);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f023 0301 	bic.w	r3, r3, #1
 8003920:	66bb      	str	r3, [r7, #104]	; 0x68
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3308      	adds	r3, #8
 8003928:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800392a:	623a      	str	r2, [r7, #32]
 800392c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	69f9      	ldr	r1, [r7, #28]
 8003930:	6a3a      	ldr	r2, [r7, #32]
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	61bb      	str	r3, [r7, #24]
   return(result);
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e5      	bne.n	800390a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e010      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4013      	ands	r3, r2
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	429a      	cmp	r2, r3
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	429a      	cmp	r2, r3
 800397c:	f43f af48 	beq.w	8003810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3770      	adds	r7, #112	; 0x70
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800398c:	b084      	sub	sp, #16
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	f107 001c 	add.w	r0, r7, #28
 800399a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d120      	bne.n	80039e6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <USB_CoreInit+0xac>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d105      	bne.n	80039da <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fa96 	bl	8003f0c <USB_CoreReset>
 80039e0:	4603      	mov	r3, r0
 80039e2:	73fb      	strb	r3, [r7, #15]
 80039e4:	e010      	b.n	8003a08 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fa8a 	bl	8003f0c <USB_CoreReset>
 80039f8:	4603      	mov	r3, r0
 80039fa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d10b      	bne.n	8003a26 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f043 0206 	orr.w	r2, r3, #6
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f043 0220 	orr.w	r2, r3, #32
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a32:	b004      	add	sp, #16
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	ffbdffbf 	.word	0xffbdffbf

08003a3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 0201 	bic.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	460b      	mov	r3, r1
 8003a68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d115      	bne.n	8003aac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	f7fd fa7b 	bl	8000f88 <HAL_Delay>
      ms++;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3301      	adds	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fa29 	bl	8003ef0 <USB_GetMode>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d01e      	beq.n	8003ae2 <USB_SetCurrentMode+0x84>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b31      	cmp	r3, #49	; 0x31
 8003aa8:	d9f0      	bls.n	8003a8c <USB_SetCurrentMode+0x2e>
 8003aaa:	e01a      	b.n	8003ae2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d115      	bne.n	8003ade <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f7fd fa62 	bl	8000f88 <HAL_Delay>
      ms++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fa10 	bl	8003ef0 <USB_GetMode>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <USB_SetCurrentMode+0x84>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b31      	cmp	r3, #49	; 0x31
 8003ada:	d9f0      	bls.n	8003abe <USB_SetCurrentMode+0x60>
 8003adc:	e001      	b.n	8003ae2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e005      	b.n	8003aee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b32      	cmp	r3, #50	; 0x32
 8003ae6:	d101      	bne.n	8003aec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003af8:	b084      	sub	sp, #16
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	e009      	b.n	8003b2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	3340      	adds	r3, #64	; 0x40
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	2200      	movs	r2, #0
 8003b24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b0e      	cmp	r3, #14
 8003b30:	d9f2      	bls.n	8003b18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d11c      	bne.n	8003b72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b46:	f043 0302 	orr.w	r3, r3, #2
 8003b4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e005      	b.n	8003b7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b84:	461a      	mov	r2, r3
 8003b86:	2300      	movs	r3, #0
 8003b88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b90:	4619      	mov	r1, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b98:	461a      	mov	r2, r3
 8003b9a:	680b      	ldr	r3, [r1, #0]
 8003b9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d10c      	bne.n	8003bbe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003baa:	2100      	movs	r1, #0
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f965 	bl	8003e7c <USB_SetDevSpeed>
 8003bb2:	e008      	b.n	8003bc6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f960 	bl	8003e7c <USB_SetDevSpeed>
 8003bbc:	e003      	b.n	8003bc6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003bbe:	2103      	movs	r1, #3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f95b 	bl	8003e7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003bc6:	2110      	movs	r1, #16
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f8f3 	bl	8003db4 <USB_FlushTxFifo>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f91f 	bl	8003e1c <USB_FlushRxFifo>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c06:	461a      	mov	r2, r3
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	e043      	b.n	8003c9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c28:	d118      	bne.n	8003c5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e013      	b.n	8003c6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c52:	461a      	mov	r2, r3
 8003c54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e008      	b.n	8003c6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	3301      	adds	r3, #1
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d3b7      	bcc.n	8003c12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	e043      	b.n	8003d30 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cbe:	d118      	bne.n	8003cf2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	e013      	b.n	8003d04 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	e008      	b.n	8003d04 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2300      	movs	r3, #0
 8003d02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d10:	461a      	mov	r2, r3
 8003d12:	2300      	movs	r3, #0
 8003d14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d22:	461a      	mov	r2, r3
 8003d24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d3b7      	bcc.n	8003ca8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d105      	bne.n	8003d6c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f043 0210 	orr.w	r2, r3, #16
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <USB_DevInit+0x2b4>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f043 0208 	orr.w	r2, r3, #8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d105      	bne.n	8003d9c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699a      	ldr	r2, [r3, #24]
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <USB_DevInit+0x2b8>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003da8:	b004      	add	sp, #16
 8003daa:	4770      	bx	lr
 8003dac:	803c3800 	.word	0x803c3800
 8003db0:	40000004 	.word	0x40000004

08003db4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <USB_FlushTxFifo+0x64>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e01b      	b.n	8003e0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	daf2      	bge.n	8003dc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	019b      	lsls	r3, r3, #6
 8003de4:	f043 0220 	orr.w	r2, r3, #32
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3301      	adds	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4a08      	ldr	r2, [pc, #32]	; (8003e18 <USB_FlushTxFifo+0x64>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e006      	b.n	8003e0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0320 	and.w	r3, r3, #32
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	d0f0      	beq.n	8003dec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	00030d40 	.word	0x00030d40

08003e1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a11      	ldr	r2, [pc, #68]	; (8003e78 <USB_FlushRxFifo+0x5c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e018      	b.n	8003e6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	daf2      	bge.n	8003e28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2210      	movs	r2, #16
 8003e4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4a08      	ldr	r2, [pc, #32]	; (8003e78 <USB_FlushRxFifo+0x5c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e006      	b.n	8003e6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	d0f0      	beq.n	8003e4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	00030d40 	.word	0x00030d40

08003e7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003ec8:	f023 0303 	bic.w	r3, r3, #3
 8003ecc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003edc:	f043 0302 	orr.w	r3, r3, #2
 8003ee0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f003 0301 	and.w	r3, r3, #1
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a13      	ldr	r2, [pc, #76]	; (8003f70 <USB_CoreReset+0x64>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e01b      	b.n	8003f62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	daf2      	bge.n	8003f18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f043 0201 	orr.w	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3301      	adds	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <USB_CoreReset+0x64>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d901      	bls.n	8003f54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e006      	b.n	8003f62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d0f0      	beq.n	8003f42 <USB_CoreReset+0x36>

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	00030d40 	.word	0x00030d40

08003f74 <memset>:
 8003f74:	4402      	add	r2, r0
 8003f76:	4603      	mov	r3, r0
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d100      	bne.n	8003f7e <memset+0xa>
 8003f7c:	4770      	bx	lr
 8003f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f82:	e7f9      	b.n	8003f78 <memset+0x4>

08003f84 <__libc_init_array>:
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	4d0d      	ldr	r5, [pc, #52]	; (8003fbc <__libc_init_array+0x38>)
 8003f88:	4c0d      	ldr	r4, [pc, #52]	; (8003fc0 <__libc_init_array+0x3c>)
 8003f8a:	1b64      	subs	r4, r4, r5
 8003f8c:	10a4      	asrs	r4, r4, #2
 8003f8e:	2600      	movs	r6, #0
 8003f90:	42a6      	cmp	r6, r4
 8003f92:	d109      	bne.n	8003fa8 <__libc_init_array+0x24>
 8003f94:	4d0b      	ldr	r5, [pc, #44]	; (8003fc4 <__libc_init_array+0x40>)
 8003f96:	4c0c      	ldr	r4, [pc, #48]	; (8003fc8 <__libc_init_array+0x44>)
 8003f98:	f000 f818 	bl	8003fcc <_init>
 8003f9c:	1b64      	subs	r4, r4, r5
 8003f9e:	10a4      	asrs	r4, r4, #2
 8003fa0:	2600      	movs	r6, #0
 8003fa2:	42a6      	cmp	r6, r4
 8003fa4:	d105      	bne.n	8003fb2 <__libc_init_array+0x2e>
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}
 8003fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fac:	4798      	blx	r3
 8003fae:	3601      	adds	r6, #1
 8003fb0:	e7ee      	b.n	8003f90 <__libc_init_array+0xc>
 8003fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb6:	4798      	blx	r3
 8003fb8:	3601      	adds	r6, #1
 8003fba:	e7f2      	b.n	8003fa2 <__libc_init_array+0x1e>
 8003fbc:	08004004 	.word	0x08004004
 8003fc0:	08004004 	.word	0x08004004
 8003fc4:	08004004 	.word	0x08004004
 8003fc8:	08004008 	.word	0x08004008

08003fcc <_init>:
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fce:	bf00      	nop
 8003fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd2:	bc08      	pop	{r3}
 8003fd4:	469e      	mov	lr, r3
 8003fd6:	4770      	bx	lr

08003fd8 <_fini>:
 8003fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fda:	bf00      	nop
 8003fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fde:	bc08      	pop	{r3}
 8003fe0:	469e      	mov	lr, r3
 8003fe2:	4770      	bx	lr
